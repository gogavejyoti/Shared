function renderGeoWiseShrinkageDonut(containerId, rawData) {
  // Step 1: Aggregate Actual Shrinkage Geo-wise
  const geoData = {};

  rawData.forEach(item => {
    if (!geoData[item.geo]) {
      geoData[item.geo] = { totalHC: 0, weightedShrink: 0 };
    }
    geoData[item.geo].totalHC += item.availableHC || 0;
    geoData[item.geo].weightedShrink += (item.availableHC || 0) * (item.actualShrinkage || 0);
  });

  const chartData = Object.keys(geoData).map(geo => {
    const { totalHC, weightedShrink } = geoData[geo];
    const avgShrink = totalHC === 0 ? 0 : (weightedShrink / totalHC) * 100; // percentage
    return {
      name: geo,
      y: parseFloat(avgShrink.toFixed(2))
    };
  });

  // Step 2: Render Donut Chart
  Highcharts.chart(containerId, {
    chart: {
      type: 'pie'
    },
    title: {
      text: 'Geo-wise Actual Shrinkage'
    },
    plotOptions: {
      pie: {
        innerSize: '60%', // makes it donut
        dataLabels: {
          enabled: true,
          format: '{point.name}: {point.y:.2f}%'
        }
      }
    },
    tooltip: {
      pointFormat: '<b>{point.y:.2f}%</b>'
    },
    series: [{
      name: 'Actual Shrinkage',
      colorByPoint: true,
      data: chartData
    }]
  });
}
