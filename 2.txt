function buildGeoShrinkageDonutChart(data, containerId) {
    // Aggregate Actual Shrinkage by geo for current month
    const geoMap = {};
    let currentMonth = '';
    if (data && data.length > 0) {
        currentMonth = data[0].monthFormat;
        data.forEach(d => {
            if (d.monthFormat == currentMonth) {
                if (!geoMap[d.geo]) {
                    geoMap[d.geo] = { totalHC: 0, weightedShrink: 0 };
                }
                geoMap[d.geo].totalHC += d.availableHC || 0;
                geoMap[d.geo].weightedShrink += (d.availableHC || 0) * (d.actualShrinkage || 0);
            }
        });
    }

    const geoLabels = Object.keys(geoMap);
    const geoValues = geoLabels.map(geo => {
        const { totalHC, weightedShrink } = geoMap[geo];
        return totalHC === 0 ? 0 : parseFloat(((weightedShrink / totalHC) * 100).toFixed(2));
    });

    const avgShrink = geoValues.reduce((sum, v) => sum + v, 0) / (geoValues.length || 1);

    const geoOptions = {
        chart: { type: 'donut', height: 250, foreColor: '#fff' },
        title: {
            text: 'Geo-wise Actual Shrinkage',
            align: 'center',
            style: {
                fontSize: '15px',
                fontWeight: 'bold',
                fontFamily: 'Arial, sans-serif',
                color: '#fff'
            }
        },
        series: geoValues,
        labels: geoLabels,
        legend: { position: 'bottom' },
        colors: ["#28a745", "#007bff", "#ffc107", "#ff5733", "#6f42c1"],
        tooltip: {
            y: {
                formatter: val => val.toFixed(2) + "%"
            }
        },
        dataLabels: {
            enabled: true,
            style: { colors: ['#fff'] },
            formatter: (val, opts) => geoValues[opts.seriesIndex] + "%"
        },
        plotOptions: {
            pie: {
                donut: {
                    size: '65%',
                    labels: {
                        show: true,
                        name: { show: true },
                        value: { show: true, formatter: val => val + "%" },
                        total: {
                            show: true,
                            label: currentMonth,
                            color: '#fff',
                            formatter: () => avgShrink.toFixed(2) + "%"
                        }
                    }
                }
            }
        }
    };

    if (geoChart) geoChart.destroy();
    geoChart = new ApexCharts(document.querySelector("#" + containerId), geoOptions);
    geoChart.render();
}
