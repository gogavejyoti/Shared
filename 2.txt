(function ($) {
    $.fn.assumptionSimulator = function (options) {
        const settings = $.extend({
            data: [], // JSON array
        }, options);

        const $container = $(this);
        $container.empty().addClass('assumption-simulator');

        const weeks = [...new Set(settings.data.map(d => d.week))].sort((a, b) => new Date(a) - new Date(b));
        const lobs = [...new Set(settings.data.map(d => d.lob))];

        const simulatedValues = {};
        const originalMetrics = {};

        lobs.forEach(lob => {
            weeks.forEach(week => {
                const d = settings.data.find(x => x.lob === lob && x.week === week);
                if (d) {
                    originalMetrics[`${lob}_${week}`] = {
                        fteAvailable: d.fteAvailable,
                        delta: d.delta,
                        staffingPct: d.staffingPct,
                        shrinkage: d.plannedShrinkage,
                        attrition: d.plannedAttrition ?? 0
                    };
                }
            });
        });

        // Toolbar
        const $toolbar = $(`
            <div class="sim-toolbar mb-2 flex gap-2 items-center">
                <label>Simulation Shrinkage %: 
                    <input type="number" step="0.1" min="0" class="sim-input-global-shrink w-20 p-0.5 border rounded">
                </label>
                <label>Simulation Attrition %: 
                    <input type="number" step="0.1" min="0" class="sim-input-global-attr w-20 p-0.5 border rounded">
                </label>
                <button class="btn-apply px-3 py-1 bg-blue-500 text-white rounded">Apply</button>
                <button class="btn-reset px-3 py-1 bg-gray-300 rounded">Reset</button>
            </div>
        `);
        $container.append($toolbar);

        // Table wrapper
        const $tableWrapper = $('<div class="sim-table-wrapper overflow-x-auto"></div>');
        const $table = $('<table class="table sim-table min-w-max border-collapse border border-gray-200"></table>');
        $tableWrapper.append($table);
        $container.append($tableWrapper);

        // Table header
        let headerHtml = `<thead><tr>
            <th class="sticky-col border">LOB / Overall</th>
            <th class="sticky-col border">Metric</th>`;
        weeks.forEach(w => headerHtml += `<th class="border text-center week-cell" colspan="2">${w}</th>`);
        headerHtml += `</tr><tr><th></th><th></th>`;
        weeks.forEach(_ => headerHtml += `<th>Original</th><th>Simulated</th>`);
        headerHtml += `</tr></thead>`;
        $table.append(headerHtml);

        const $tbody = $('<tbody></tbody>');
        $table.append($tbody);

        const fmt = (val) => {
            if (val === null || val === undefined || val === '' || isNaN(val)) return 'NA';
            return parseFloat(val).toFixed(0);
        };

        function getArrow(sim, orig) {
            if (sim === 'NA' || orig === 'NA') return '';
            sim = parseFloat(sim);
            orig = parseFloat(orig);
            if (sim > orig) return ' <span style="color:aqua;">ðŸ¡…</span>';
            if (sim < orig) return ' <span style="color:aqua;">ðŸ¡‡</span>';
            return '';
        }

        function getData(lob, week) {
            return settings.data.find(d => d.lob === lob && d.week === week);
        }

        function initSimulated() {
            lobs.forEach(lob => {
                weeks.forEach(week => {
                    const d = getData(lob, week);
                    simulatedValues[`${lob}_${week}_shrink`] = d?.plannedShrinkage ?? null;
                    simulatedValues[`${lob}_${week}_attr`] = d?.plannedAttrition ?? null;
                });
            });
        }
        initSimulated();

        function calcSimulated(d) {
            if (!d) return {};

            const shrink = simulatedValues[`${d.lob}_${d.week}_shrink`];
            const attr = simulatedValues[`${d.lob}_${d.week}_attr`];

            if (shrink === null || attr === null) return {
                'FTE Available': null,
                'Delta': null,
                'Staffing %': null,
                'Simulated Shrinkage %': shrink,
                'Simulated Attrition %': attr
            };

            // If simulated = planned â†’ match original exactly
            if (shrink === d.plannedShrinkage && attr === (d.plannedAttrition ?? 0)) {
                const orig = originalMetrics[`${d.lob}_${d.week}`];
                return {
                    'FTE Available': orig?.fteAvailable ?? null,
                    'Delta': orig?.delta ?? null,
                    'Staffing %': orig?.staffingPct ?? null,
                    'Simulated Shrinkage %': shrink,
                    'Simulated Attrition %': attr
                };
            }

            if (d.fteRequired != null) {
                const fteAvail = d.fteRequired * (1 - shrink / 100) * (1 - attr / 100);
                const delta = fteAvail - d.fteRequired;
                const staffing = d.fteRequired !== 0 ? fteAvail / d.fteRequired * 100 : null;
                return {
                    'FTE Available': fteAvail,
                    'Delta': delta,
                    'Staffing %': staffing,
                    'Simulated Shrinkage %': shrink,
                    'Simulated Attrition %': attr
                };
            }
            return { 'FTE Available': null, 'Delta': null, 'Staffing %': null, 'Simulated Shrinkage %': shrink, 'Simulated Attrition %': attr };
        }

        function renderTable() {
            $tbody.empty();
            const metrics = [
                'FTE Required',
                'FTE Available',
                'Delta',
                'Staffing %',
                'Planned Shrinkage %',
                'Simulated Shrinkage %',
                'Planned Attrition %',
                'Simulated Attrition %'
            ];
            const simulatedOnlyMetrics = ['Simulated Shrinkage %', 'Simulated Attrition %'];

            // Overall row
            metrics.forEach(metric => {
                const $tr = $('<tr></tr>');
                if (metric === 'Simulated Shrinkage %') $tr.css('background-color', '#8A2BE2');
                if (metric === 'Simulated Attrition %') $tr.css('background-color', '#b8860b');
                if (metric === 'FTE Required') $tr.append(`<td class="sticky-col font-bold" rowspan="${metrics.length}">Overall</td>`);
                $tr.append(`<td class="sticky-col">${metric}</td>`);

                weeks.forEach(week => {
                    const weekData = lobs.map(lob => getData(lob, week)).filter(d => d);
                    let original = 'NA', simulated = 'NA';
                    if (weekData.length) {
                        if (simulatedOnlyMetrics.includes(metric)) {
                            original = 'NA';
                            const vals = weekData.map(d => calcSimulated(d)[metric]).filter(v => v != null && !isNaN(v));
                            if (vals.length) simulated = fmt(vals.reduce((a, b) => a + b, 0) / vals.length);
                        } else {
                            const origVals = weekData.map(d => {
                                switch (metric) {
                                    case 'FTE Required': return d.fteRequired;
                                    case 'FTE Available': return d.fteAvailable;
                                    case 'Delta': return d.delta;
                                    case 'Staffing %': return d.staffingPct;
                                    case 'Planned Shrinkage %': return d.plannedShrinkage;
                                    case 'Planned Attrition %': return d.plannedAttrition ?? 0;
                                    default: return null;
                                }
                            }).filter(v => v != null && !isNaN(v));
                            if (origVals.length) {
                                original = ['Staffing %', 'Planned Shrinkage %', 'Planned Attrition %'].includes(metric)
                                    ? fmt(origVals.reduce((a, b) => a + b, 0) / origVals.length)
                                    : fmt(origVals.reduce((a, b) => a + b, 0));
                            }

                            const simVals = weekData.map(d => calcSimulated(d)[metric]).filter(v => v != null && !isNaN(v));
                            if (simVals.length) {
                                simulated = ['Staffing %', 'Planned Shrinkage %', 'Planned Attrition %'].includes(metric)
                                    ? fmt(simVals.reduce((a, b) => a + b, 0) / simVals.length)
                                    : fmt(simVals.reduce((a, b) => a + b, 0));
                            }
                        }
                    }
                    const isNeg = !isNaN(simulated) && parseFloat(simulated) < 0;
                    const arrow = !simulatedOnlyMetrics.includes(metric) && !['NA'].includes(original) ? getArrow(simulated, original) : '';
                    if (simulatedOnlyMetrics.includes(metric) || ['FTE Available', 'Delta', 'Staffing %'].includes(metric))
                        $tr.append(`<td class="text-right ${isNeg ? 'text-red' : ''}">${original}${original != 'NA' && metric.indexOf('%') > -1 ? '%' : ''}</td>
                                    <td class="text-right cell-manual-sim ${isNeg ? 'text-red' : ''}">${simulated}${simulated != 'NA' && metric.indexOf('%') > -1 ? '%' : ''}${arrow}</td>`);
                    else $tr.append(`<td class="text-right" colspan="2">${original}${original != 'NA' && metric.indexOf('%') > -1 ? '%' : ''}</td>`);
                });
                $tbody.append($tr);
            });

            // LOB rows
            lobs.forEach(lob => {
                metrics.forEach(metric => {
                    const $tr = $('<tr></tr>');
                    if (metric === 'Simulated Shrinkage %') $tr.css('background-color', '#8A2BE2');
                    if (metric === 'Simulated Attrition %') $tr.css('background-color', '#b8860b');
                    if (metric === 'FTE Required') $tr.append(`<td nowrap class="sticky-col font-semibold" rowspan="${metrics.length}">${lob}</td>`);
                    $tr.append(`<td nowrap class="sticky-col">${metric}</td>`);

                    weeks.forEach(week => {
                        const d = getData(lob, week);
                        let original = 'NA', simulated = 'NA';
                        if (d) {
                            if (!simulatedOnlyMetrics.includes(metric)) {
                                switch (metric) {
                                    case 'FTE Required': original = fmt(d.fteRequired); break;
                                    case 'FTE Available': original = fmt(d.fteAvailable); break;
                                    case 'Delta': original = fmt(d.delta); break;
                                    case 'Staffing %': original = fmt(d.staffingPct); break;
                                    case 'Planned Shrinkage %': original = fmt(d.plannedShrinkage); break;
                                    case 'Planned Attrition %': original = fmt(d.plannedAttrition ?? 0); break;
                                }
                            }
                            if (simulatedOnlyMetrics.includes(metric) || ['FTE Available', 'Delta', 'Staffing %'].includes(metric)) {
                                simulated = fmt(calcSimulated(d)[metric]);
                                const isNeg = !isNaN(simulated) && parseFloat(simulated) < 0;
                                const arrow = !simulatedOnlyMetrics.includes(metric) ? getArrow(simulated, original) : '';
                                $tr.append(`<td class="text-right ${isNeg ? 'text-red' : ''}">${original}${original != 'NA' && metric.indexOf('%') > -1 ? '%' : ''}</td>
                                            <td class="text-right cell-manual-sim ${isNeg ? 'text-red' : ''}">${simulated}${simulated != 'NA' && metric.indexOf('%') > -1 ? '%' : ''}${arrow}</td>`);
                            } else {
                                $tr.append(`<td class="text-right" colspan="2">${original}${original != 'NA' && metric.indexOf('%') > -1 ? '%' : ''}</td>`);
                            }
                        } else {
                            $tr.append(`<td class="text-right" colspan="2">NA</td>`);
                        }
                    });
                    $tbody.append($tr);
                });
            });
        }

        renderTable();

        // Apply global simulation
        $toolbar.find('.btn-apply').on('click', function () {
            const shrinkInput = $toolbar.find('.sim-input-global-shrink').val();
            const attrInput = $toolbar.find('.sim-input-global-attr').val();

            const shrinkVal = shrinkInput !== '' ? parseFloat(shrinkInput) : null;
            const attrVal = attrInput !== '' ? parseFloat(attrInput) : null;

            lobs.forEach(lob => weeks.forEach(week => {
                if (shrinkVal !== null) simulatedValues[`${lob}_${week}_shrink`] = shrinkVal;
                if (attrVal !== null) simulatedValues[`${lob}_${week}_attr`] = attrVal;
            }));

            renderTable();
        });

        // Reset
        $toolbar.find('.btn-reset').on('click', function () {
            initSimulated();
            renderTable();
        });
    };
}(jQuery));
