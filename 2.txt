(function ($) {
    $.fn.assumptionSimulator = function (options) {
        const settings = $.extend({
            data: [],
            weeks: [],
            metrics: [
                "FTE Required",
                "FTE Available",
                "Staffing %",
                "Delta",
                "Planned Shrink %",
                "Manual Shrink %",
                "Staffing % (Sim)",
                "Delta (Sim)",
                "Staffing % (ML)",
                "Delta (ML)"
            ],
            mlApiUrl: null,       // Optional: URL for ML simulation
            onSimulation: null    // Callback after simulation
        }, options);

        const $container = $(this);
        let state = {
            data: settings.data,
            weeks: settings.weeks
        };

        /** --------------------------
         *  RENDER TABLE FUNCTION
         * -------------------------- */
        function renderTable() {
            if (!state.data || state.data.length === 0) {
                $container.html(`<div class="p-3 text-muted">No data available</div>`);
                return;
            }

            // Extract distinct LOBs including 'All'
            const uniqueLOBs = [...new Set(state.data.map(d => d.lob || 'All'))];

            let html = `
            <div class="table-responsive">
                <table class="table table-bordered table-sm align-middle simulator-table">
                    <thead>
                        <tr>
                            <th>LOB</th>
                            <th>Metric</th>`;
            state.weeks.forEach(w => html += `<th>${w}</th>`);
            html += `</tr></thead><tbody>`;

            uniqueLOBs.forEach(lob => {
                const lobRows = state.data.filter(r => (r.lob || 'All') === lob);
                html += settings.metrics.map((metric, idx) => {
                    let rowHtml = `<tr>`;
                    if (idx === 0) {
                        rowHtml += `<td rowspan="${settings.metrics.length}" class="fw-bold">${lob}</td>`;
                    }
                    rowHtml += `<td>${metric}</td>`;

                    state.weeks.forEach(week => {
                        const row = lobRows.find(r => r.week === week);
                        let val = '-';
                        if (row) {
                            switch (metric) {
                                case 'FTE Required': val = row.fteRequired; break;
                                case 'FTE Available': val = row.fteAvailable; break;
                                case 'Staffing %': val = row.staffingPct; break;
                                case 'Delta': val = row.delta; break;
                                case 'Planned Shrink %': val = row.plannedShrinkage; break;
                                case 'Manual Shrink %': val = row.manualShrinkage; break;
                                case 'Staffing % (Sim)': val = row.staffingPctSim; break;
                                case 'Delta (Sim)': val = row.deltaSim; break;
                                case 'Staffing % (ML)': val = row.staffingPctML; break;
                                case 'Delta (ML)': val = row.deltaML; break;
                            }
                            if (val !== null && val !== undefined && !isNaN(val)) {
                                val = Number(val).toFixed(2);
                            }
                        }
                        rowHtml += `<td class="text-end">${val}</td>`;
                    });

                    rowHtml += `</tr>`;
                    return rowHtml;
                }).join('');
            });

            html += `</tbody></table></div>`;
            $container.find('.simulator-table-container').html(html);
        }

        /** --------------------------
         *  SIMULATION APPLY FUNCTION
         * -------------------------- */
        function applySimulation(assumedShrinkage) {
            // Apply new Staffing% and Delta based on assumed shrinkage
            state.data = state.data.map(row => {
                if (row.fteRequired && row.fteAvailable) {
                    const effectiveAvailable = row.fteAvailable * (1 - assumedShrinkage / 100);
                    row.staffingPctSim = (effectiveAvailable / row.fteRequired) * 100;
                    row.deltaSim = effectiveAvailable - row.fteRequired;
                }
                return row;
            });
            renderTable();
            if (typeof settings.onSimulation === 'function') {
                settings.onSimulation(assumedShrinkage, state.data);
            }
        }

        /** --------------------------
         *  OPTIONAL: ML SIMULATION
         * -------------------------- */
        function runMLSimulation() {
            if (!settings.mlApiUrl) return;
            $.ajax({
                url: settings.mlApiUrl,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(state.data),
                success: function (mlResult) {
                    // Merge ML results back into state.data
                    state.data.forEach(row => {
                        const match = mlResult.find(m => m.lob === row.lob && m.week === row.week);
                        if (match) {
                            row.staffingPctML = match.staffingPctML;
                            row.deltaML = match.deltaML;
                        }
                    });
                    renderTable();
                }
            });
        }

        /** --------------------------
         *  INITIALIZE UI
         * -------------------------- */
        function init() {
            const ui = `
                <div class="simulator-controls mb-2">
                    <div class="input-group input-group-sm" style="max-width:200px;">
                        <span class="input-group-text">Shrinkage %</span>
                        <input type="number" step="0.1" min="0" max="100" class="form-control" id="simShrinkageInput">
                        <button class="btn btn-primary btn-sm" id="applySimBtn">Apply</button>
                        ${settings.mlApiUrl ? `<button class="btn btn-secondary btn-sm" id="runMLBtn">ML Sim</button>` : ''}
                    </div>
                </div>
                <div class="simulator-table-container"></div>
            `;
            $container.html(ui);
            renderTable();

            $container.on('click', '#applySimBtn', function () {
                const shrinkVal = parseFloat($container.find('#simShrinkageInput').val());
                if (!isNaN(shrinkVal)) applySimulation(shrinkVal);
            });

            $container.on('click', '#runMLBtn', function () {
                runMLSimulation();
            });
        }

        init();
        return this;
    };
}(jQuery));
