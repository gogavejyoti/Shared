<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Neumorphic D3 Hexbin World Map - Selected Countries with Region Filter</title>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://d3js.org/d3.v7.min.js"></script>
<script src="https://d3js.org/topojson.v3.min.js"></script>
<script src="https://unpkg.com/d3-hexbin@0.2.2"></script>

<style>
body {
    font-family: 'Inter', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #e6e9f2;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
}
#controls {
    margin: 20px 0;
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}
/* MODIFIED STYLES FOR ENHANCED HOVER EFFECT */
.region-btn {
    padding: 10px 20px;
    border-radius: 12px;
    border: none;
    background-color: #EEF1FA;
    /* Base Neumorphic shadow (outset) */
    box-shadow: -4px -4px 8px #fff, 4px 4px 8px rgba(174,174,192,0.4);
    cursor: pointer;
    font-weight: bold;
    /* Increased transition time for a smoother effect */
    transition: all 0.3s ease;
    color: #444; /* Added a default text color for consistency */
}
/* Updated Hover Effect: Simulates a press/sink effect */
.region-btn:hover {
    /* Changes to inset shadow, making it look 'pressed' */
    box-shadow: inset 2px 2px 5px rgba(174,174,192,0.6),
                inset -2px -2px 5px #fff;
    /* Optional: Slight color change on hover */
    background-color: #e0e3eb;
    transform: none; /* Keep size consistent with the 'pressed' look */
}
.region-btn.active {
    background-color: #4a7fd6;
    color: #fff;
    /* Active state is already an inset/pressed look */
    box-shadow: inset -2px -2px 5px #fff, inset 2px 2px 5px rgba(0,0,0,0.1);
    pointer-events: none; /* Prevent clicking/hovering on the active button */
}
/* END MODIFIED STYLES */

#vis {
    width: 95%;
    max-width: 1200px;
    position: relative;
}
.map-wrapper {
    position: relative;
}
.map-wrapper svg {
    display: block;
    margin: auto;
    border-radius: 12px;
    background-color: #EEF1FA;
    box-shadow: -7px -7px 20px 0px #ffffff, 7px 7px 20px 0px rgba(174,174,192,0.4);
    padding: 30px;
}
.land-hexagon {
    stroke: #E0E0E7;
    stroke-width: 0.5px;
    opacity: 1;
}
.data-point {
    cursor: pointer;
    transition: r 0.1s ease, opacity 0.2s;
    opacity: 0.3;
}
.point-blue { fill: #4a7fd6; }
.point-red { fill: #e75454; }
.point-orange { fill: #ffb74d; }
.data-point.active { opacity: 1; r:6; }
.data-point:hover { filter: drop-shadow(0 0 4px rgba(0,0,0,0.4)); }

.tooltip {
    position: absolute;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 5px 10px;
    border-radius: 4px;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.2s;
    z-index: 1000;
}
.country-label-text {
    font-size: 13px;
    font-weight: bold;
    fill: #444;
    opacity: 0.6;
}
.country-label-text.active { opacity: 1; }
</style>
</head>
<body>

<div id="controls"></div>
<div id="vis">
    <div class="map-wrapper"></div>
    <div id="tooltip" class="tooltip"></div>
</div>

<script>
$(document).ready(function() {

  // Selected countries with coordinates, colors, and regions
  const selectedCountries = [
    { name: "India", lon: 77.2, lat: 20.5, color: "blue", region:"Asia" },
    { name: "Philippines", lon: 121.0, lat: 12.9, color: "orange", region:"Asia" },
    { name: "Colombia", lon: -74.3, lat: 4.6, color: "red", region:"Americas" },
    { name: "Jamaica", lon: -77.3, lat: 18.1, color: "orange", region:"Americas" },
    { name: "USA", lon: -98.5, lat: 39.8, color: "blue", region:"Americas" },
    { name: "Canada", lon: -106.3, lat: 56.1, color: "blue", region:"Americas" },
    { name: "Egypt", lon: 30.8, lat: 26.8, color: "red", region:"Africa" },
    { name: "Bulgaria", lon: 25.5, lat: 42.7, color: "orange", region:"Europe" },
    { name: "Malaysia", lon: 102.2, lat: 4.2, color: "orange", region:"Asia" },
    { name: "Kosovo", lon: 20.9, lat: 42.6, color: "red", region:"Europe" },
    { name: "China", lon: 104.2, lat: 35.8, color: "blue", region:"Asia" },
    { name: "Mexico", lon: -102.5, lat: 23.6, color: "orange", region:"Americas" }
  ];

  // Regions for filter buttons
  const regions = ["All","Asia","Europe","Americas","Africa"];

  // Add region buttons
  regions.forEach(r => {
    const btn = $(`<button class="region-btn">${r}</button>`);
    $("#controls").append(btn);
    btn.on("click", function(){
        $(".region-btn").removeClass("active");
        $(this).addClass("active");
        filterRegion(r);
    });
  });
  $(".region-btn:first").addClass("active");

  // Draw map
  const mapChart = hexmap(selectedCountries);
  d3.select('.map-wrapper').call(mapChart);

  // Filter function
  function filterRegion(region){
    d3.selectAll(".data-point").classed("active", d=> region=="All" ? true : d.region==region);
    d3.selectAll(".country-label-text").classed("active", d=> region=="All" ? true : d.region==region);
  }

  filterRegion("All"); // Show all by default
});

// Hexbin Map Function
function hexmap(data) {
  const opts = { width: 960, height: 500 };
  const hexbin = d3.hexbin().extent([[0,0],[opts.width,opts.height]]).radius(5);
  const color = d3.scaleLinear().domain([1,255]).range(['#fff','#f5f5f5']);
  const projection = d3.geoMercator().scale(200).translate([opts.width/2, opts.height/1.5]);

  function exports(_selection) {
    const svg = _selection.append('svg').attr('width', opts.width).attr('height', opts.height);
    const path = d3.geoPath().projection(projection);
    const dataUrl = 'https://cdn.jsdelivr.net/npm/world-atlas@2/countries-50m.json';

    d3.json(dataUrl).then(world => {
      const land = topojson.feature(world, world.objects.countries);

      // Draw hex-land background using canvas
      const canvas = document.createElement('canvas');
      canvas.width = opts.width; canvas.height = opts.height;
      const context = canvas.getContext('2d');
      const canvasPath = d3.geoPath().projection(projection).context(context);
      context.fillStyle = '#111'; context.beginPath(); canvasPath(land); context.fill();
      const image = context.getImageData(0,0,opts.width, opts.height);

      const points = [];
      for (let i=0,n=opts.width*opts.height*4,d=image.data;i<n;i+=4){
        if(d[i]>0) points.push([i/4%opts.width, Math.floor(i/4/opts.width), d[i]]);
      }
      const hexagons = hexbin(points); hexagons.forEach(d=>d.mean=d3.mean(d,p=>p[2]));

      svg.append('g').attr('class','hexagons')
        .selectAll('path').data(hexagons).enter()
        .append('path').attr('d', hexbin.hexagon(4.5))
        .attr('transform', d=>`translate(${d.x},${d.y})`)
        .attr('class','land-hexagon')
        .style('fill', d=>color(d.mean));

      // Data dots
      const dotLayer = svg.append("g").attr("class","data-layer")
        .selectAll("circle").data(data).enter()
        .append("circle")
        .attr("cx", d=>projection([d.lon,d.lat])[0])
        .attr("cy", d=>projection([d.lon,d.lat])[1])
        .attr("r",5)
        .attr("class", d=>`data-point point-${d.color}`)
        .on("mouseover", (event,d)=>{
          d3.select("#tooltip")
            .html(`<strong>${d.name}</strong>`)
            .style("left",(event.pageX+10)+"px")
            .style("top",(event.pageY-20)+"px")
            .style("opacity",1);
        }).on("mouseout", ()=>d3.select("#tooltip").style("opacity",0));

      // Labels with collision detection
      const labelLayer = svg.append("g").attr("class","label-layer");
      const placedLabels = [];
      function isOverlapping(a,b){
        return !(a.x+a.width < b.x || a.x > b.x+b.width || a.y+a.height < b.y || a.y > b.y+b.height);
      }

      data.forEach(d=>{
        const coords = projection([d.lon,d.lat]);
        if(!coords) return;
        let labelX = coords[0], labelY = (d.name ==='Bulgaria' ? coords[1]-20 :  d.name=='Colombia' ? coords[1]+5 : coords[1]-5);
        const textWidth = d.name.length*7;
        const labelWidth = textWidth, labelHeight = 22;
        const tryOffsets = [
          {x:0,y:-25},{x:25,y:-10},{x:-25,y:-10},
          {x:0,y:25},{x:35,y:15},{x:-35,y:15}
        ];
        let chosen = null;
        for(const offset of tryOffsets){
          const candidate = {x:labelX+offset.x-labelWidth/2, y:labelY+offset.y-labelHeight/2, width:labelWidth, height:labelHeight};
          const overlap = placedLabels.some(existing=>isOverlapping(candidate, existing));
          if(!overlap){ chosen=offset; placedLabels.push(candidate); break; }
        }
        if(!chosen) chosen={x:0,y:-25};
        const finalX = labelX+chosen.x, finalY=labelY+chosen.y;

        // Connector line
        labelLayer.append("line")
          .attr("x1", coords[0]).attr("y1", coords[1])
          .attr("x2", finalX).attr("y2", finalY-10)
          .attr("stroke","#c4c7d0").attr("stroke-width",1).attr("opacity",0.7);

        // Label background
        labelLayer.append("rect")
          .attr("x", finalX-labelWidth/2).attr("y", finalY-labelHeight)
          .attr("rx",10).attr("ry",10)
          .attr("width",labelWidth).attr("height",labelHeight)
          .attr("fill","#e6e9f2").attr("stroke","none");

        // Label text
        labelLayer.append("text")
          .attr("x", finalX).attr("y", finalY-5)
          .attr("text-anchor","middle")
          .attr("class","country-label-text")
          .attr("data-region", d.region) // Added for potential debugging
          .text(d.name);
      });

    }).catch(err=>console.error("Map load error:",err));
  }

  return exports;
}
</script>

</body>
</html>
