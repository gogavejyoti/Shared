private static List<float> ForecastMetric(List<float> values, int forecastHorizon)
{
    if (values == null || values.Count == 0)
        return Enumerable.Repeat(0f, forecastHorizon).ToList();

    // Remove invalids
    values = values.Where(v => v >= 0f).ToList();
    if (values.Count == 0) return Enumerable.Repeat(0f, forecastHorizon).ToList();

    // Remove trailing zeros
    values = values.Reverse<float>().SkipWhile(v => v == 0f).Reverse().ToList();

    float minVal = values.Min();
    float maxVal = values.Max();
    float range = maxVal - minVal;

    // Short or flat series â†’ repeat last value
    if (values.Count < 6 || range < 0.05f)
    {
        float lastVal = values.Last();
        return Enumerable.Repeat(lastVal, forecastHorizon).ToList();
    }

    // Exponential Smoothing
    float alpha = 0.5f; // smoothing factor
    float level = values[0];

    for (int i = 1; i < values.Count; i++)
    {
        level = alpha * values[i] + (1 - alpha) * level;
    }

    // Forecast horizon
    var forecast = Enumerable.Repeat(level, forecastHorizon)
        .Select(v => Math.Max(minVal, Math.Min(maxVal, v))) // clamp
        .ToList();

    return forecast;
}
