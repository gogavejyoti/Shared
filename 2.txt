<!-- Include jQuery + Chart.js -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
(function ($) {
    $.fn.staffingDashboard = function (options) {
        const settings = $.extend({
            data: [],
            containerId: null,
            maxWeeks: 12
        }, options);

        if (!settings.containerId || settings.data.length === 0) return;

        const container = $("#" + settings.containerId);
        container.empty();

        // Extract unique filters
        const uniqueWeeks = [...new Set(settings.data.map(d => d.Week))].sort();
        const uniqueLOBs = [...new Set(settings.data.map(d => d.LOB))];
        const uniqueGeos = [...new Set(settings.data.map(d => d.Geo))];
        const uniqueSites = [...new Set(settings.data.map(d => d.Site))];
        const uniqueProjects = [...new Set(settings.data.map(d => d.ProjectId))];
        const metrics = ["Forecasted Hours", "Actual Hours", "Required HC", "Available HC", "Planned Attrition", "Actual Attrition", "Planned Shrinkage", "Actual Shrinkage"];

        // Build filter UI
        let filterHtml = `
        <div class="filters p-3 bg-light rounded-3 mb-3 shadow-sm">
            <div class="row g-2">
                <div class="col-md-2">
                    <label class="form-label fw-bold">From Week</label>
                    <select id="weekFrom" class="form-select form-select-sm">${uniqueWeeks.map(w => `<option value="${w}">${w}</option>`)}</select>
                </div>
                <div class="col-md-2">
                    <label class="form-label fw-bold">To Week</label>
                    <select id="weekTo" class="form-select form-select-sm">${uniqueWeeks.map(w => `<option value="${w}">${w}</option>`)}</select>
                </div>
                <div class="col-md-2">
                    <label class="form-label fw-bold">Summary Type</label>
                    <select id="summaryType" class="form-select form-select-sm">
                        <option value="weekly">Weekly</option>
                        <option value="monthly">Monthly</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label fw-bold">LOB</label>
                    <select id="lobFilter" class="form-select form-select-sm" multiple>${uniqueLOBs.map(l => `<option value="${l}">${l}</option>`)}</select>
                </div>
                <div class="col-md-2">
                    <label class="form-label fw-bold">Geo</label>
                    <select id="geoFilter" class="form-select form-select-sm" multiple>${uniqueGeos.map(g => `<option value="${g}">${g}</option>`)}</select>
                </div>
                <div class="col-md-2">
                    <label class="form-label fw-bold">Site</label>
                    <select id="siteFilter" class="form-select form-select-sm" multiple>${uniqueSites.map(s => `<option value="${s}">${s}</option>`)}</select>
                </div>
                <div class="col-md-2 mt-2">
                    <label class="form-label fw-bold">Project Id</label>
                    <select id="projectFilter" class="form-select form-select-sm" multiple>${uniqueProjects.map(p => `<option value="${p}">${p}</option>`)}</select>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button class="btn btn-primary btn-sm w-100" id="applyFilterBtn">Apply</button>
                </div>
            </div>
        </div>
        <div id="tilesContainer" class="row g-3 mb-3"></div>
        <div id="tableContainer" class="mb-3"></div>
        <div id="chartsContainer" class="mb-3"></div>
        `;
        container.append(filterHtml);

        // Build Table
        function buildTable(filteredData, selectedLOBs, selectedMetrics, weeks) {
            let tableHtml = `<div class="table-responsive"><table class="table table-bordered table-sm">
            <thead class="table-light"><tr><th>LOB</th><th>Week</th>${selectedMetrics.map(m => `<th>${m}</th>`).join("")}</tr></thead><tbody>`;

            filteredData.forEach(d => {
                tableHtml += `<tr>
                    <td>${d.LOB}</td>
                    <td>${d.Week}</td>
                    ${selectedMetrics.map(m => `<td>${d.Header === m ? d.Value : ""}</td>`).join("")}
                </tr>`;
            });

            tableHtml += `</tbody></table></div>`;
            $("#tableContainer").html(tableHtml);
        }

        // Build Charts
        function buildCharts(filteredData, selectedLOBs, selectedMetrics, weeks) {
            $("#chartsContainer").empty();
            selectedMetrics.forEach(metric => {
                const canvasId = `chart_${metric.replace(/\s+/g, "_")}`;
                $("#chartsContainer").append(`<div class="card p-3 shadow-sm mb-3"><h6>${metric}</h6><canvas id="${canvasId}" height="200"></canvas></div>`);

                const datasets = selectedLOBs.map((lob, idx) => {
                    const color = ["#007AFF","#FF3B30","#34C759","#FF9500","#5856D6"][idx % 5];
                    return {
                        label: lob,
                        borderColor: color,
                        backgroundColor: color + "55",
                        data: weeks.map(w => {
                            let rec = filteredData.find(d => d.Week === w && d.LOB === lob && d.Header === metric);
                            return rec ? Number(rec.Value) : 0;
                        }),
                        fill: false,
                        tension: 0.3
                    };
                });

                new Chart(document.getElementById(canvasId), {
                    type: "line",
                    data: { labels: weeks, datasets },
                    options: {
                        responsive: true,
                        plugins: { legend: { position: "bottom" } },
                        scales: { y: { beginAtZero: true } }
                    }
                });
            });
        }

        // Apply Filter
        $("#applyFilterBtn").on("click", function () {
            let weekFrom = $("#weekFrom").val();
            let weekTo = $("#weekTo").val();
            let selectedLOBs = $("#lobFilter").val() || uniqueLOBs;
            let selectedGeos = $("#geoFilter").val() || uniqueGeos;
            let selectedSites = $("#siteFilter").val() || uniqueSites;
            let selectedProjects = $("#projectFilter").val() || uniqueProjects;

            const fromIndex = uniqueWeeks.indexOf(weekFrom);
            const toIndex = uniqueWeeks.indexOf(weekTo);
            const weeks = uniqueWeeks.slice(Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex) + 1);

            let filtered = settings.data.filter(d =>
                selectedLOBs.includes(d.LOB) &&
                selectedGeos.includes(d.Geo) &&
                selectedSites.includes(d.Site) &&
                selectedProjects.includes(d.ProjectId) &&
                weeks.includes(d.Week)
            );

            buildTable(filtered, selectedLOBs, metrics, weeks);
            buildCharts(filtered, selectedLOBs, metrics, weeks);
        });

        // Initial render with defaults
        $("#applyFilterBtn").click();
    };
}(jQuery));
</script>
