(function ($) {
    $.fn.weekAnalyticsPopup = function (options) {
        const settings = $.extend({
            data: [],
            weekStartDay: 'sunday' // or 'monday'
        }, options);

        $('#analyticsModal').remove();

        // Inject styles
        const styles = `
        <style>
            #chartsContainer {
                display: flex;
                flex-direction: column;
                gap: 20px;
                align-items: center;
            }
            #chartsContainer canvas {
                width: 100% !important;
                max-width: 900px;
                height: 220px !important;
            }
        </style>`;
        $('head').append(styles);

        // Modal HTML
        const modalHTML = `
        <div class="modal fade" id="analyticsModal" tabindex="-1">
          <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
              <div class="modal-header bg-gradient-primary text-white">
                <h5 class="modal-title">Workforce Analytics Dashboard</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <div class="filters mb-3 p-3 border rounded bg-light">
                  <label>From Week: 
                    <select id="fromWeek" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label class="ms-3">To Week: 
                    <select id="toWeek" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label class="ms-3">LOB: 
                    <select id="lobSelect" class="form-select d-inline-block w-auto" multiple></select>
                  </label>
                  <button id="applyFilter" class="btn btn-primary btn-sm ms-3">Apply Filter</button>
                  <button id="exportCsv" class="btn btn-secondary btn-sm ms-2">Export CSV</button>
                </div>
                <div id="chartsContainer" class="mt-3"></div>
                <div id="analyticsSummary" class="mt-4"></div>
              </div>
            </div>
          </div>
        </div>`;
        $('body').append(modalHTML);

        const $chartsContainer = $('#chartsContainer');
        const $analyticsSummary = $('#analyticsSummary');

        // Week parsing and formatting
        const parseWeek = (weekStr) => {
            const [dd, mmm, yy] = weekStr.split('-');
            return new Date(`${mmm} ${dd}, 20${yy}`);
        };
        const formatWeek = (date) => {
            const dd = String(date.getDate()).padStart(2, '0');
            const mmm = date.toLocaleString('default', { month: 'short' });
            const yy = String(date.getFullYear()).slice(-2);
            return `${dd}-${mmm}-${yy}`;
        };
        const getCurrentWeek = () => {
            const today = new Date();
            const dayOfWeek = today.getDay();
            const diff = settings.weekStartDay === 'sunday' ? dayOfWeek : (dayOfWeek + 6) % 7;
            const lastWeekDate = new Date(today);
            lastWeekDate.setDate(today.getDate() - diff);
            return formatWeek(lastWeekDate);
        };

        // Transform data
        const structuredData = (() => {
            const grouped = {};
            settings.data.forEach(item => {
                if (!grouped[item.week]) grouped[item.week] = { Week: item.week };
                grouped[item.week][`${item.header}||${item.sheetName}`] = item.value;
            });
            return Object.values(grouped).sort((a, b) => parseWeek(a.Week) - parseWeek(b.Week));
        })();

        const uniqueLOBs = [...new Set(settings.data.map(d => d.sheetName))].sort();
        const uniqueHeaders = [...new Set(settings.data.map(d => d.header))].sort();
        const uniqueWeeks = [...new Set(settings.data.map(d => d.week))].sort((a, b) => parseWeek(a) - parseWeek(b));

        // Populate weeks dropdown
        uniqueWeeks.forEach(week => {
            $('#fromWeek').append(`<option value="${week}">${week}</option>`);
            $('#toWeek').append(`<option value="${week}">${week}</option>`);
        });

        // Populate LOB multiselect dropdown
        uniqueLOBs.forEach(lob => $('#lobSelect').append(`<option value="${lob}">${lob}</option>`));
        // Default select first 2 LOBs
        $('#lobSelect').val(uniqueLOBs.slice(0,2));

        // Set default 12-week range
        const currentWeek = getCurrentWeek();
        const currentIndex = uniqueWeeks.indexOf(currentWeek);
        const fallbackIndex = currentIndex >= 0 ? currentIndex : uniqueWeeks.length - 1;
        const fromIndex = Math.max(0, fallbackIndex - 6);
        const toIndex = Math.min(uniqueWeeks.length - 1, fallbackIndex + 6);
        $('#fromWeek').val(uniqueWeeks[fromIndex]);
        $('#toWeek').val(uniqueWeeks[toIndex]);

        // Colors
        const metricColors = {
            "Required HC": "#007bff", "Available HC": "#28a745",
            "Actual Hours": "#17a2b8", "Forecasted Hours": "#ffc107",
            "Planned Shrinkage": "#6f42c1", "Actual Shrinkage": "#fd7e14",
            "Planned Attrition": "#e83e8c", "Actual Attrition": "#20c997",
            "Planned AHT": "#6610f2", "Actual AHT": "#fd3955"
        };

        const lobColors = {};
        const colorPalette = ['#ff5733','#33ff57','#3357ff','#ff33a1','#33fff0','#ff8f33','#8f33ff','#33ff8f','#ff3333','#33a1ff'];
        uniqueLOBs.forEach((lob,i)=>{ lobColors[lob] = colorPalette[i % colorPalette.length]; });

        const filterData = () => {
            const fromWeek = $('#fromWeek').val();
            const toWeek = $('#toWeek').val();
            const selectedLOBs = $('#lobSelect').val() || [uniqueLOBs[0]];
            const filtered = structuredData.filter(d => parseWeek(d.Week) >= parseWeek(fromWeek) && parseWeek(d.Week) <= parseWeek(toWeek));
            return { filtered, selectedLOBs };
        };

        const generateSummary = (filtered, selectedLOBs) => {
            let summaryHTML = '<h5>Summary Analytics</h5><ul>';
            uniqueHeaders.forEach(header => {
                selectedLOBs.forEach(lob => {
                    let total = filtered.reduce((sum,d)=>sum+Number(d[`${header}||${lob}`]||0),0);
                    if(header.toLowerCase().includes('shrinkage') || header.toLowerCase().includes('attrition')){
                        total = (total*100).toFixed(2)+'%';
                    }
                    summaryHTML += `<li><strong>${lob}</strong> - <em>${header}</em>: ${total}</li>`;
                });
            });
            summaryHTML += '</ul>';
            $analyticsSummary.html(summaryHTML);
        };
