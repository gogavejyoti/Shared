let connection = null;
let documentId = null;
let userId = null;
let hasEditLock = false;
let keepAliveInterval = null;

// Start connection with retry logic
async function startConnection() {
    try {
        await connection.start();
        console.log("‚úÖ Connected to SignalR Hub.");
        await tryLockDocument();
    } catch (err) {
        console.error("‚ùå Connection failed, retrying in 5s...", err);
        setTimeout(startConnection, 5000);
    }
}

// Initialize locking system
async function initDocumentLock(docId, uId) {
    if (connection) return; // Prevent multiple inits

    documentId = docId;
    userId = uId;

    connection = new signalR.HubConnectionBuilder()
        .withUrl("/DocumentHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    // Handle disconnects (try reconnect)
    connection.onclose(async () => {
        console.warn("‚ö†Ô∏è Disconnected, retrying...");
        hasEditLock = false;
        updateUI();
        await startConnection();
    });

    // üî• Listen for real-time lock status
    connection.on("ReceiveLockStatus", (docId, lockedBy) => {
        if (docId === documentId) {
            showLockStatus(lockedBy);
        }
    });

    await startConnection();

    // Explicit unlock when leaving page
    window.addEventListener("beforeunload", async function () {
        if (hasEditLock) {
            try {
                await connection.invoke("UnlockDocument", documentId, userId);
            } catch (err) {
                console.warn("‚ö†Ô∏è Unlock failed on unload", err);
            }
        }
    });
}

// Try to lock the document
async function tryLockDocument() {
    if (!connection || connection.state !== "Connected") return;

    try {
        const canEdit = await connection.invoke("TryLockDocument", documentId, userId);
        hasEditLock = canEdit;
        updateUI();

        // Start keep-alive
        if (!keepAliveInterval) {
            keepAliveInterval = setInterval(() => {
                tryLockDocument(); // Refresh or retry lock every 30s
            }, 30000);
        }
    } catch (err) {
        console.error("‚ùå Lock request failed:", err);
    }
}

// Update UI based on lock state
function updateUI() {
    if (!hasEditLock) {
        $('#btnSaveSheets').hide();
        $("#msgReadOnly").show();
    } else {
        $('#btnSaveSheets').show();
        $("#msgReadOnly").hide();
    }
}

// Show real-time lock message
function showLockStatus(lockedBy) {
    if (!lockedBy) {
        $("#msgLockOwner").text("üîì Document is available").show();
    } else if (lockedBy === userId) {
        $("#msgLockOwner").text("‚úÖ You are editing this document").show();
    } else {
        $("#msgLockOwner").text(`üîí Locked by ${lockedBy}`).show();
    }
}
