(function($){
    $.fn.weekAnalyticsPopup = function(options){
        const settings = $.extend({
            data: [],
            defaultFromWeek: '',
            defaultToWeek: '',
            defaultMode: 'comparison' // or 'single'
        }, options);

        // Remove existing modal
        $('#analyticsModal').remove();

        // Modal HTML
        const modalHTML = `
        <div class="modal fade" id="analyticsModal" tabindex="-1">
          <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
              <div class="modal-header bg-gradient-primary text-white">
                <h5 class="modal-title">Workforce Analytics Dashboard</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <div class="filters mb-3 p-3 border rounded bg-light">
                  <label>From Week: 
                    <select id="fromWeek" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label class="ms-3">To Week: 
                    <select id="toWeek" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label class="ms-3">LOB: 
                    <select id="lobSelect" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label class="ms-3">Header (Metric): 
                    <select id="headerSelect" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label class="ms-3">
                    <input type="checkbox" id="comparisonMode"> Comparison Mode
                  </label>
                  <button id="applyFilter" class="btn btn-primary btn-sm ms-3">Apply Filter</button>
                  <button id="exportCsv" class="btn btn-secondary btn-sm ms-2">Export CSV</button>
                </div>
                <div id="chartsContainer" class="row mt-3"></div>
                <div id="analyticsSummary" class="mt-4"></div>
              </div>
            </div>
          </div>
        </div>`;

        $('body').append(modalHTML);

        const $chartsContainer = $('#chartsContainer');
        const $analyticsSummary = $('#analyticsSummary');

        // Transform data into structured format
        const structuredData = (() => {
            const grouped = {};
            settings.data.forEach(item=>{
                if(!grouped[item.week]) grouped[item.week] = {Week: item.week};
                grouped[item.week][`${item.header}||${item.sheetName}`] = item.value;
            });
            return Object.values(grouped).sort((a,b)=> new Date(a.Week) - new Date(b.Week));
        })();

        const uniqueLOBs = [...new Set(settings.data.map(d=>d.sheetName))].sort();
        const uniqueHeaders = [...new Set(settings.data.map(d=>d.header))].sort();
        const uniqueWeeks = [...new Set(settings.data.map(d=>d.week))].sort();

        // Populate dropdowns
        uniqueLOBs.forEach(lob=>$('#lobSelect').append(`<option value="${lob}">${lob}</option>`));
        uniqueHeaders.forEach(header=>$('#headerSelect').append(`<option value="${header}">${header}</option>`));
        uniqueWeeks.forEach(week=>{
            $('#fromWeek').append(`<option value="${week}">${week}</option>`);
            $('#toWeek').append(`<option value="${week}">${week}</option>`);
        });

        $('#fromWeek').val(settings.defaultFromWeek || uniqueWeeks[0]);
        $('#toWeek').val(settings.defaultToWeek || uniqueWeeks[uniqueWeeks.length-1]);
        $('#headerSelect').val(uniqueHeaders[0]);

        const filterData = ()=>{
            const fromWeek = $('#fromWeek').val();
            const toWeek = $('#toWeek').val();
            const selectedLOB = $('#lobSelect').val() || uniqueLOBs[0];
            const selectedHeader = $('#headerSelect').val() || uniqueHeaders[0];
            const isComparison = $('#comparisonMode').is(':checked');
            const filtered = structuredData.filter(d=> d.Week >= fromWeek && d.Week <= toWeek);
            return {filtered, selectedLOB, selectedHeader, isComparison};
        };

        const generateSummary = (filtered, selectedLOB, selectedHeader, isComparison)=>{
            let summaryHTML = '<h5>Summary Analytics</h5><ul>';
            const lobsToSummarize = isComparison ? uniqueLOBs : [selectedLOB];
            lobsToSummarize.forEach(lob=>{
                const total = filtered.reduce((sum,d)=>{
                    return sum + Number(d[`${selectedHeader}||${lob}`] || 0);
                },0);
                summaryHTML += `<li><strong>${lob}</strong>: Total <em>${selectedHeader}</em> = ${total}</li>`;
            });
            summaryHTML += '</ul>';
            $analyticsSummary.html(summaryHTML);
        };

        const exportCSV = (filtered, selectedHeader, selectedLOB, isComparison)=>{
            const headers = ['Week','LOB','Metric','Value'];
            let csvContent = headers.join(',') + '\n';
            if(isComparison){
                filtered.forEach(row=>{
                    uniqueLOBs.forEach(lob=>{
                        let value = Number(row[`${selectedHeader}||${lob}`] || 0);
                        if(selectedHeader.toLowerCase().includes('shrinkage') || selectedHeader.toLowerCase().includes('attrition')) value = value + '%';
                        csvContent += `${row.Week},${lob},${selectedHeader},${value}\n`;
                    });
                });
            }else{
                filtered.forEach(row=>{
                    let value = Number(row[`${selectedHeader}||${selectedLOB}`] || 0);
                    if(selectedHeader.toLowerCase().includes('shrinkage') || selectedHeader.toLowerCase().includes('attrition')) value = value + '%';
                    csvContent += `${row.Week},${selectedLOB},${selectedHeader},${value}\n`;
                });
            }
            const blob = new Blob([csvContent],{type:'text/csv;charset=utf-8;'});
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'analytics.csv';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        };

        const renderCharts = (filtered, selectedLOB, selectedHeader, isComparison)=>{
            $chartsContainer.empty();
            const colorSet = [];
            const generateColor = (idx)=>`hsl(${(idx*60)%360},70%,50%)`;

            // Generate 6 distinct charts
            const metricPairs = [
                ['Actual Hours','Forecasted Hours'],         // Line chart
                ['Required HC','Available HC'],             // Bar chart
                ['Planned Shrinkage','Actual Shrinkage'],   // Line chart %
                ['Planned Attrition','Actual Attrition'],   // Bar chart %
                ['Planned AHT','Actual AHT'],               // Radar chart
                ['Latest Week Distribution']                // Pie chart
            ];

            metricPairs.forEach((pair, idx)=>{
                const colDiv = `<div class="col-md-6 mb-4">
                    <div class="card shadow-sm border rounded" style="background: linear-gradient(to bottom, #f8f9fa, #e9ecef);">
                        <div class="card-body">
                            <h6 class="card-title fw-bold">${pair.join(' vs ')}</h6>
                            <canvas id="chart${idx}" height="200"></canvas>
                        </div>
                    </div>
                </div>`;
                $chartsContainer.append(colDiv);

                const labels = filtered.map(d=>d.Week);
                let datasets = [];

                if(pair.length===1){ 
                    // Pie chart: Latest week distribution
                    const latestWeek = filtered[filtered.length-1];
                    datasets = [{
                        data: uniqueLOBs.map(lob=>{
                            return Number(latestWeek[`${selectedHeader}||${lob}`]||0);
                        }),
                        backgroundColor: uniqueLOBs.map((_,i)=>generateColor(i)),
                        label: selectedHeader
                    }];
                    new Chart(document.getElementById(`chart${idx}`),{
                        type:'pie',
                        data:{labels:uniqueLOBs,datasets},
                        options:{
                            plugins:{
                                legend:{position:'bottom'},
                                datalabels:{formatter:(val)=>val, color:'#000'}
                            }
                        },
                        plugins:[ChartDataLabels, ChartZoom]
                    });
                } else if(idx===4){ 
                    // Radar chart
                    const radarLabels = pair;
                    datasets = (isComparison ? uniqueLOBs : [selectedLOB]).map((lob,i)=>({
                        label: lob,
                        data: radarLabels.map(metric=>{
                            let val = filtered[filtered.length-1][`${metric}||${lob}`]||0;
                            if(metric.toLowerCase().includes('shrinkage')||metric.toLowerCase().includes('attrition')) val = val;
                            return val;
                        }),
                        borderColor: generateColor(i),
                        backgroundColor: generateColor(i)+'55',
                        fill:true
                    }));
                    new Chart(document.getElementById(`chart${idx}`),{
                        type:'radar',
                        data:{labels:radarLabels,datasets},
                        options:{
                            responsive:true,
                            plugins:{legend:{position:'bottom'}}
                        },
                        plugins:[ChartZoom, ChartDataLabels]
                    });
                } else {
                    // Line or Bar charts
                    datasets = [];
                    pair.forEach(metric=>{
                        (isComparison ? uniqueLOBs : [selectedLOB]).forEach((lob,i)=>{
                            let dataPoints = filtered.map(d=>{
                                let val = d[`${metric}||${lob}`]||0;
                                if(metric.toLowerCase().includes('shrinkage')||metric.toLowerCase().includes('attrition')) val = val;
                                return val;
                            });
                            datasets.push({
                                label:`${lob} - ${metric}`,
                                data:dataPoints,
                                borderColor:generateColor(i),
                                backgroundColor:generateColor(i)+'55',
                                fill:false,
                                tension:0.3,
                                type: (idx%2===0)?'line':'bar'
                            });
                        });
                    });
                    new Chart(document.getElementById(`chart${idx}`),{
                        data:{labels,datasets},
                        options:{
                            responsive:true,
                            plugins:{legend:{position:'bottom'},datalabels:{formatter:(val)=>val,color:'#000'}},
                            scales:{y:{beginAtZero:true}}
                        },
                        plugins:[ChartZoom, ChartDataLabels]
                    });
                }
            });
        };

        const applyFilters = ()=>{
            const {filtered, selectedLOB, selectedHeader, isComparison} = filterData();
            renderCharts(filtered, selectedLOB, selectedHeader, isComparison);
            generateSummary(filtered, selectedLOB, selectedHeader, isComparison);
        };

        $('#applyFilter').off('click').on('click',applyFilters);
        $('#exportCsv').off('click').on('click',()=>{
            const {filtered, selectedLOB, selectedHeader, isComparison} = filterData();
            exportCSV(filtered, selectedHeader, selectedLOB, isComparison);
        });

        applyFilters();
        $('#analyticsModal').modal('show');

        return this;
    };
})(jQuery);
