function fixCrossSheetReferencesAfterRename(oldName, newName) {
    const allSheets = Ft() || [];
    let sheetChanged = false;

    const sheetNameRegex = new RegExp(`'${oldName.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')}'!`, 'g');

    // ✅ 1️⃣ Update formulas in each cell (like _shiftCrossSheetReference)
    for (let s = 0; s < allSheets.length; s++) {
        const sheet = allSheets[s];
        const data = sheet.data;

        if (!data) continue;

        for (let r = 0; r < data.length; r++) {
            if (!data[r]) continue;

            for (let c = 0; c < data[r].length; c++) {
                const cell = data[r][c];
                if (!cell || !cell.f) continue;

                let originalFormula = cell.f;
                let modifiedFormula = originalFormula.replace(sheetNameRegex, `'${newName}'!`);

                if (modifiedFormula !== originalFormula) {
                    cell.f = modifiedFormula;
                    sheetChanged = true;
                }
            }
        }
    }

    // ✅ 2️⃣ Update calcChain (m)
    // This keeps the formula dependency graph correct after renaming
    if (typeof Store !== "undefined" && Store.luckysheetfile) {
        for (let i = 0; i < Store.luckysheetfile.length; i++) {
            const sheet = Store.luckysheetfile[i];
            const m = sheet.calcChain || sheet.m;   // some builds use m, some use calcChain

            if (!m || !Array.isArray(m)) continue;

            for (let j = 0; j < m.length; j++) {
                const chainItem = m[j];
                if (!chainItem || !chainItem.f) continue;

                let originalFormula = chainItem.f;
                let modifiedFormula = originalFormula.replace(sheetNameRegex, `'${newName}'!`);

                if (modifiedFormula !== originalFormula) {
                    chainItem.f = modifiedFormula;
                    sheetChanged = true;
                }
            }
        }
    }

    // ✅ 3️⃣ Update global formula parser cache if exists (optional but safer)
    if (typeof formula !== "undefined" && formula.functionParser) {
        if (formula.functionParser.cellCache) {
            for (const key in formula.functionParser.cellCache) {
                const newKey = key.replace(sheetNameRegex, `'${newName}'!`);
                if (newKey !== key) {
                    formula.functionParser.cellCache[newKey] = formula.functionParser.cellCache[key];
                    delete formula.functionParser.cellCache[key];
                }
            }
        }
    }

    // ✅ 4️⃣ Trigger full workbook recalculation if anything changed
    if (sheetChanged) {
        if (typeof jf !== "undefined" && jf.refresh) {
            jf.refresh();
        } else if (typeof luckysheetrefreshgrid === "function") {
            luckysheetrefreshgrid();
        }
    }
}
