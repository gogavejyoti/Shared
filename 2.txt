
function buildOTFWeekChart(data, containerId) {
    if (!data || data.length === 0) return;

    const weekMap = {};
    data.forEach(d => {
        const week = d.weekFormat;
        if (!week) return;
        if (!weekMap[week]) weekMap[week] = { actual: 0, forecasted: 0 };
        weekMap[week].actual += (d.actualHours || 0);
        weekMap[week].forecasted += (d.forecastedHours || 0);
    });

    const weeks = Object.keys(weekMap).sort((a,b) => new Date(a) - new Date(b));
    if (weeks.length === 0) return;

    const actualHours = [];
    const forecastedHours = [];
    const otfPct = [];

    weeks.forEach(w => {
        const act = weekMap[w]?.actual ?? 0;
        const fc = weekMap[w]?.forecasted ?? 0;

        actualHours.push(Math.round(act));
        forecastedHours.push(Math.round(fc));
        otfPct.push(act > 0 ? Math.round((fc / act) * 100) : 0);
    });

    const options = {
        chart: { type: 'line', height: 300, stacked: false, toolbar: { show: false } },
        stroke: { width: [0,0,3], dashArray: [0,0,4] },
        colors: ["#007bff", "#28a745", "#ffc107"],
        dataLabels: { enabled: false },
        series: [
            { name: 'Forecasted Hours', type: 'column', data: forecastedHours },
            { name: 'Actual Hours', type: 'column', data: actualHours },
            { name: 'OTF %', type: 'line', data: otfPct }
        ],
        xaxis: { categories: weeks },
        yaxis: [
            {
                title: { text: 'Hours' },
                min: 0,
                labels: { formatter: val => Math.round(val) }
            },
            {
                opposite: true,
                title: { text: 'OTF %' },
                min: 0,
                max: 150, // or 100
                labels: { formatter: val => Math.round(val) + "%" }
            }
        ],
        tooltip: {
            shared: true,
            intersect: false,
            y: {
                formatter: function(val, opts) {
                    return opts.seriesIndex === 2 ? Math.round(val) + "%" : Math.round(val);
                }
            }
        },
        legend: { position: 'bottom', horizontalAlign: 'center' },
        fill: { type: ['solid','solid','solid'] }
    };

    if (otfChart) otfChart.destroy();
    otfChart = new ApexCharts(document.querySelector("#" + containerId), options);
    otfChart.render();
}
