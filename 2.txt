public List<WfmAggregateException> GetAggregateExceptions(Dictionary<string, DrilldownNode> report)
{
    var result = new List<WfmAggregateException>();

    foreach (var (account, accNode) in report)
    {
        // Check Account-level exceptions (precomputed)
        foreach (var metric in accNode.Data.Keys)
        {
            if (!IsMetricExceedingThreshold(accNode.Data, metric, out var actual, out var target)) continue;

            result.Add(new WfmAggregateException
            {
                Level = "Account",
                Entity = account,
                Parent = null,
                Metric = metric,
                Actual = actual,
                Target = target
            });
        }

        foreach (var (geo, geoNode) in accNode.Children)
        {
            // Check Geo-level exceptions (precomputed)
            foreach (var metric in geoNode.Data.Keys)
            {
                if (!IsMetricExceedingThreshold(geoNode.Data, metric, out var actual, out var target)) continue;

                result.Add(new WfmAggregateException
                {
                    Level = "Geo",
                    Entity = geo,
                    Parent = account,
                    Metric = metric,
                    Actual = actual,
                    Target = target
                });
            }
        }
    }

    return result;
}


private bool IsMetricExceedingThreshold(Dictionary<string, string> data, string metric, out double actual, out double target)
{
    actual = 0;
    target = 0;

    if (!data.TryGetValue(metric, out var valStr) || 
        string.IsNullOrWhiteSpace(valStr) ||
        valStr == "null" || valStr == "undefined" ||
        !double.TryParse(valStr, out actual))
        return false;

    // Define default targets
    if (metric == "FTE Delta") target = 20;
    else if (metric == "Shr%" || metric == "Attr%") target = 5;
    else return false;

    // If Shrinkage or Attrition, higher is worse
    if ((metric == "Shr%" || metric == "Attr%") && actual > target) return true;

    // For FTE Delta, absolute difference > target
    if (metric == "FTE Delta" && Math.Abs(actual) > target) return true;

    return false;
}
