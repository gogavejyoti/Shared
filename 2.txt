let connection = null;
let documentId = null;
let userId = null;
let hasEditLock = false;
let keepAliveInterval = null;

// Start connection with manual retry
async function startConnection() {
    try {
        await connection.start();
        console.log("Connected to SignalR Hub.");
        await tryLockDocument();
    } catch (err) {
        console.error("Connection failed, retrying in 5s...", err);
        setTimeout(startConnection, 5000);
    }
}

async function initDocumentLock(docId, uId) {
    documentId = docId;
    userId = uId;

    connection = new signalR.HubConnectionBuilder()
        .withUrl("/DocumentHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    connection.onclose(async () => {
        console.log("Disconnected, retrying...");
        hasEditLock = false;
        updateUI();
        await startConnection();
    });

    await startConnection();

    // Setup beforeunload to unlock
    window.addEventListener("beforeunload", async function () {
        if (hasEditLock) {
            await connection.invoke("UnlockDocument", documentId, userId);
        }
    });
}

async function tryLockDocument() {
    try {
        const canEdit = await connection.invoke("TryLockDocument", documentId, userId);
        hasEditLock = canEdit;
        updateUI();

        if (canEdit) {
            if (!keepAliveInterval) {
                keepAliveInterval = setInterval(() => {
                    connection.invoke("RefreshLock", documentId, userId);
                }, 30000); // every 30 sec
            }
        } else {
            if (keepAliveInterval) {
                clearInterval(keepAliveInterval);
                keepAliveInterval = null;
            }
        }
    } catch (err) {
        console.error("Lock request failed:", err);
    }
}

function updateUI() {
    if (!hasEditLock) {
        $('#btnSaveSheets').css('display', 'none');
        $("#msgReadOnly").show();
    } else {
        $('#btnSaveSheets').css('display', 'block');
        $("#msgReadOnly").hide();
    }
}



    
using Microsoft.AspNetCore.SignalR;
    using System;
    using System.Collections.Concurrent;
    using System.Threading.Tasks;

public class DocumentHub : Hub
{
    // Store document locks: documentId â†’ (userId, lockTime)
    private static ConcurrentDictionary<string, (string UserId, DateTime LockTime)> _locks
        = new ConcurrentDictionary<string, (string, DateTime)>();

    // Try to lock document
    public async Task<bool> TryLockDocument(string documentId, string userId)
    {
        if (_locks.TryGetValue(documentId, out var lockInfo))
        {
            if (lockInfo.UserId == userId)
            {
                // Already locked by same user
                _locks[documentId] = (userId, DateTime.UtcNow);
                return true;
            }
            return false; // Locked by someone else
        }

        // Lock document
        _locks[documentId] = (userId, DateTime.UtcNow);
        return true;
    }

    // Unlock document explicitly
    public async Task UnlockDocument(string documentId, string userId)
    {
        if (_locks.TryGetValue(documentId, out var lockInfo) && lockInfo.UserId == userId)
        {
            _locks.TryRemove(documentId, out _);
        }
    }

    // Refresh lock timestamp (keep-alive)
    public async Task RefreshLock(string documentId, string userId)
    {
        if (_locks.TryGetValue(documentId, out var lockInfo) && lockInfo.UserId == userId)
        {
            _locks[documentId] = (userId, DateTime.UtcNow);
        }
    }

    // Cleanup locks when user disconnects
    public override async Task OnDisconnectedAsync(Exception exception)
    {
        string connectionId = Context.ConnectionId;
        foreach (var doc in _locks)
        {
            if (doc.Value.UserId == Context.UserIdentifier)
                _locks.TryRemove(doc.Key, out _);
        }
        await base.OnDisconnectedAsync(exception);
    }
}




