public async Task<string> GetWfmSummaryFromAIStreamingAsync(string exceptionSummary)
{
    var prompt = BuildPrompt(exceptionSummary);

    var requestBody = new
    {
        messages = new[]
        {
            new { role = "system", content = "You are a Workforce Management domain expert." },
            new { role = "user", content = prompt }
        },
        temperature = 0.4,
        max_tokens = 2000,
        top_p = 1,
        frequency_penalty = 0,
        presence_penalty = 0,
        stream = true // âœ… enable streaming
    };

    var requestJson = JsonConvert.SerializeObject(requestBody);

    using var http = new HttpClient();
    http.DefaultRequestHeaders.Add("api-key", azureApiKey);
    var url = $"{azureEndpoint}openai/deployments/{chatDeployment}/chat/completions?api-version={chatApiVersion}";
    var content = new StringContent(requestJson, Encoding.UTF8, "application/json");

    var response = await http.PostAsync(url, content, HttpCompletionOption.ResponseHeadersRead);
    if (!response.IsSuccessStatusCode)
    {
        var error = await response.Content.ReadAsStringAsync();
        throw new Exception("ChatGPT streaming error: " + error);
    }

    var fullResponse = new StringBuilder();

    using var stream = await response.Content.ReadAsStreamAsync();
    using var reader = new StreamReader(stream);

    while (!reader.EndOfStream)
    {
        var line = await reader.ReadLineAsync();
        if (string.IsNullOrWhiteSpace(line) || !line.StartsWith("data:")) continue;

        var json = line["data:".Length..].Trim();
        if (json == "[DONE]") break;

        using var jsonDoc = JsonDocument.Parse(json);
        var delta = jsonDoc.RootElement
            .GetProperty("choices")[0]
            .GetProperty("delta");

        if (delta.TryGetProperty("content", out var contentProp))
        {
            var contentChunk = contentProp.GetString();
            fullResponse.Append(contentChunk); // accumulate
        }
    }

    return fullResponse.ToString();
}
