(function ($) {
    var originalAjax = $.ajax;
    $.ajax = function (options) {
        var originalSuccess = options.success;
        options.success = function (data, textStatus, jqXHR) {
            data = sanitizeJson(data); // Clean response globally
            if (originalSuccess) originalSuccess(data, textStatus, jqXHR);
        };
        return originalAjax.call(this, options);
    };

    function sanitizeJson(obj) {
        if (obj && typeof obj === 'object') {
            ['__proto__', 'constructor', 'prototype'].forEach(key => {
                if (key in obj) delete obj[key];
            });
        }
        return obj;
    }
})(jQuery);


using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using System.Text.Json;
using System.Text.Json.Nodes;

public class SanitizeJsonAttribute : ActionFilterAttribute
{
    public override void OnActionExecuting(ActionExecutingContext context)
    {
        if (context.ActionArguments != null)
        {
            foreach (var key in context.ActionArguments.Keys)
            {
                if (context.ActionArguments[key] is string jsonString)
                {
                    context.ActionArguments[key] = SanitizeJson(jsonString);
                }
            }
        }
        base.OnActionExecuting(context);
    }

    private string SanitizeJson(string jsonString)
    {
        try
        {
            JsonNode? jsonNode = JsonNode.Parse(jsonString);
            if (jsonNode is JsonObject jsonObject)
            {
                RemoveUnsafeKeys(jsonObject);
            }
            return jsonNode?.ToJsonString() ?? jsonString;
        }
        catch
        {
            return jsonString; // Return original if parsing fails
        }
    }

    private void RemoveUnsafeKeys(JsonObject obj)
    {
        string[] unsafeKeys = { "__proto__", "constructor", "prototype" };
        
        foreach (var key in unsafeKeys)
        {
            obj.Remove(key);
        }

        // Recursively clean nested objects
        foreach (var prop in obj.ToList())  // Convert to list to avoid modifying collection during iteration
        {
            if (prop.Value is JsonObject nestedObj)
            {
                RemoveUnsafeKeys(nestedObj);
            }
        }
    }
}



var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers(options => options.Filters.Add<SanitizeJsonAttribute>());
var app = builder.Build();
app.UseAuthorization();
app.MapControllers();
app.Run();
