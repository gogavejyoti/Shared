getSelectedCellsData: function () {
    const cellList = [];
    const px = s => Math.round(parseFloat(s) || 0);

    // Collect all selected cells
    this.host.find(".rowStyleSelected, .cellStyleSelected").each(function (idx) {
        const $cell = a(this);
        const top    = px($cell.css("top"));
        const left   = px($cell.css("left"));
        const value  = $cell.find("#innerDiv").text().trim();

        // Determine class priority: rowStyleSelected = 0, cellStyleSelected = 1
        const priority = $cell.hasClass("rowStyleSelected") ? 0 : 1;

        cellList.push({ top, left, value, priority, domIdx: idx });
    });

    // Group into rows by `top`
    const rows = {};
    cellList.forEach(c => {
        if (!rows[c.top]) rows[c.top] = [];
        rows[c.top].push(c);
    });

    // Sort row keys (top)
    const sortedTops = Object.keys(rows).map(Number).sort((a, b) => a - b);
    const result = [];

    sortedTops.forEach(top => {
        // sort each row by: left, then class priority, then DOM idx
        const row = rows[top].sort((a, b) => {
            if (a.left !== b.left)      return a.left  - b.left;
            if (a.priority !== b.priority) return a.priority - b.priority;
            return a.domIdx - b.domIdx;
        });
        result.push(row.map(c => c.value));
    });

    return result;
}
