(function ($) {
    $.fn.generateDynamicChart = function (options) {
        let settings = $.extend({
            botTextContainer: null,
            userInput: '',
            data: [],
            transposeTable: false,
            tableHeight: '250px'
        }, options);

        if (!settings.data || settings.data.length === 0) {
            console.error("No data provided for the chart.");
            return this;
        }

        // Remove unnecessary filter fields
        settings.data.forEach(item => {
            delete item.DateWeekFilter;
            delete item.DateMonthFilter;
            delete item.DateYearFilter;
        });

        let sampleItem = settings.data[0];
        let nonNumericFields = [];
        let numericFields = [];
        let percentageFields = [];
        let dateFields = [];

        // Identify column types dynamically and robustly
        Object.keys(sampleItem).forEach(key => {
            let value = sampleItem[key];
            if (typeof value === 'string' && (/^\d{1,2}-[A-Za-z]{3}-\d{2}$/.test(value) ||
                /^[A-Za-z]{3}-\d{2}$/.test(value) ||
                /^\d{4}-\d{2}$/.test(value))) {
                dateFields.push(key);
            } else if (typeof value === 'string' && isNaN(value) && value !== '') {
                nonNumericFields.push(key);
            } else if (typeof value === 'number' || (!isNaN(parseFloat(value)) && isFinite(value))) {
                numericFields.push(key);
                if (typeof value === 'string' && (key.toLowerCase().includes("percentage") || key.includes("%"))) {
                    percentageFields.push(key);
                }
            }
        });

        let mainContainer = $("<div>").addClass("chat-result card p-3 mb-3 shadow-sm").css({
            width: "100%",
            border: "1px solid #ddd",
            borderRadius: "10px",
            padding: "15px"
        });

        // Table Rendering and Toggle
        let tableContainer = $("<div>").addClass("table-responsive").css({
            width: "100%",
            maxWidth: "1050px",
            maxHeight: settings.tableHeight,
            overflowY: "auto",
            marginBottom: "15px",
            padding: "10px",
            border: "1px solid #ccc",
            borderRadius: "5px",
            backgroundColor: "#f8f9fa",
            position: "relative"
        });

        let table = $("<table>").addClass("table table-bordered table-striped text-center").css({
            width: "100%",
            fontSize: "14px"
        });

        function renderTable(isTransposed) {
            table.empty();
            let thead = $("<thead>").css({ position: "sticky", top: 0, backgroundColor: "#fff", zIndex: 1 });
            let tbody = $("<tbody></tbody>");

            if (isTransposed) {
                let headers = Object.keys(settings.data[0]);
                let headerRow = $("<tr>");
                headerRow.append($("<th>").text("").addClass("bg-primary text-white"));
                settings.data.forEach((_, index) => {
                    headerRow.append($("<th>").text(`Column ${index + 1}`).addClass("bg-primary text-white"));
                });
                thead.append(headerRow);

                headers.forEach(header => {
                    let tr = $("<tr>");
                    tr.append($("<td>").text(header).addClass("font-weight-bold"));
                    settings.data.forEach(row => {
                        let value = row[header];
                        let displayValue = percentageFields.includes(header) && !isNaN(value)
                            ? (parseFloat(value) || 0).toFixed(1) + "%"
                            : !isNaN(value)
                                ? (parseFloat(value) || 0).toFixed(0)
                                : value;
                        tr.append($("<td>").text(displayValue));
                    });
                    tbody.append(tr);
                });
            } else {
                let headerRow = $("<tr>");
                Object.keys(settings.data[0]).forEach(key => {
                    headerRow.append($("<th>").text(key).addClass("bg-primary text-white"));
                });
                thead.append(headerRow);

                settings.data.forEach(row => {
                    let tr = $("<tr></tr>");
                    Object.keys(row).forEach(key => {
                        let value = row[key];
                        let displayValue = percentageFields.includes(key) && !isNaN(value)
                            ? (parseFloat(value) || 0).toFixed(1) + "%"
                            : !isNaN(value)
                                ? Math.round(value)
                                : value;
                        tr.append($("<td>").text(displayValue));
                    });
                    tbody.append(tr);
                });
            }

            table.append(thead).append(tbody);
        }

        let toggleButton = $("<button><i class='fa fa-table'></i>").text("Transpose Table")
            .addClass("btn btn-sm").css({ padding: "5px 10px", fontSize: "14px", background: '#AA336A', color: "#fff" });

        toggleButton.on("click", function () {
            settings.transposeTable = !settings.transposeTable;
            renderTable(settings.transposeTable);
            $(this).text(settings.transposeTable ? "Normal View" : "Transpose Table");
        });

        mainContainer.append($("<div>").css({ marginBottom: "10px", textAlign: "right" }).append(toggleButton))
            .append(tableContainer.append(table));

        // Chart Generation
        if (settings.userInput.toLowerCase().includes("show chart") || settings.userInput.toLowerCase().includes("with chart")) {
            let chartContainer = $("<div>").css({ width: "100%", height: "350px", border: "1px solid #ccc", borderRadius: "5px", backgroundColor: "#fff", padding: "10px" });
            $('.bot-message:last').remove();
            mainContainer.append(chartContainer);

            function buildChart(data, chartContainer) {
                let categoryField = dateFields.length > 0 ? dateFields[0] : nonNumericFields.length > 0 ? nonNumericFields[nonNumericFields.length - 1] : Object.keys(sampleItem)[0];
                let chartType = numericFields.length > 1 ? "line" : "bar";
                if (numericFields.length === 1 && data.length <= 5) {
                    chartType = "pie";
                }

                let chartOptions = {
                    chart: { type: chartType, height: 320, animations: { enabled: true, easing: 'easeInOutQuad', duration: 800 } },
                    series: [],
                    xaxis: { categories: [], labels: { rotate: -45, style: { fontSize: "12px" } } },
                    yaxis: {
                        labels: {
                            formatter: (value) => {
                                const firstNumericField = numericFields[0];
                                return percentageFields.includes(firstNumericField) ? value.toFixed(1) + "%" : Math.round(value);
                            }
                        }
                    },
                    tooltip: {
                        y: {
                            formatter: (value, { seriesIndex, w }) => {
                                const fieldName = w.config.series[seriesIndex].name;
                                return percentageFields.includes(fieldName) ? `${value.toFixed(1)}%` : Math.round(value);
                            }
                        }
                    },
                    dataLabels: {
                        enabled: true,
                        formatter: (value, { seriesIndex, w }) => {
                            const fieldName = w.config.series[seriesIndex].name;
                            return percentageFields.includes(fieldName) ? `${value.toFixed(1)}%` : Math.round(value);
                        },
                        style: { fontSize: "12px" }
                    },
                    legend: {
                        position: 'bottom',
                        horizontalAlign: 'center',
                        fontSize: '12px',
                        markers: { width: 10, height: 10, radius: 2 },
                        itemMargin: { horizontal: 8, vertical: 0 },
                        onItemClick: {
                            toggleDataSeries: true
                        },
                        onItemHover: {
                            highlightDataSeries: true
                        },
                    },
                    plotOptions: {
                        bar: {
                            horizontal: false,
                            columnWidth: '70%',
                            dataLabels: {
                                position: 'top'
                            }
                        },
                        line: {
                            curve: 'smooth',
                            lineWidth: 2.5,
                            markers: {
                                size: 4,
                                fillOpacity: 0.9,
                                strokeColor: '#fff',
                                strokeWidth: 2,
                                hover: {
                                    size: 7,
                                }
                            },
                            dataLabels: {
                                position: 'bottom'
                            }
                        },
                        pie: {
                            allowPointSelect: true,
                            donut: {
                                size: '45%',
                                labels: {
                                    show: true,
                                    name: {
                                        show: true,
                                        fontSize: '13px',
                                        color: '#343a40',
                                        formatter: (val) => val
                                    },
                                    value: {
                                        show: true,
                                        fontSize: '16px',
                                        color: undefined,
                                        formatter: (val) => val
                                    },
                                    total: {
                                        show: true,
                                        showAlways: false,
                                        label: 'Total',
                                        formatter: (w) => {
                                            const total = w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                                            return total;
                                        }
                                    }
                                },
                            },
                            shadow: {
                                enabled: true,
                                blur: 8,
                                opacity: 0.7
                            }
                        },
                        radialBar: {
                            startAngle: -135,
                            endAngle: 225,
                            hollow: {
                                margin: 0,
                                size: '70%',
                                background: 'transparent',
                                image: undefined,
                                imageOffsetX: 0,
                                imageOffsetY: 0,
                                position: 'start',
                            },
                            dataLabels: {
                                show: true,
                                name: {
                                    fontSize: '14px',
                                    fontWeight: 'bold',
                                    formatter: (val) => val
                                },
                                value: {
                                    fontSize: '16px',
                                    color: '#fff',
                                    formatter: (val) => val,
                                },
                                total: {
                                    show: true,
                                    label: 'Total',
                                    formatter: (w) => {
                                        const total = w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                                        return total;
                                    }
                                }
                            },
                            track: {
                                background: '#e0e0e0',
                                strokeWidth: '100%',
                                opacity: 1,
                                margin: 10,
                                dropShadow: {
                                    enabled: true,
                                    top: -3,
                                    left: 0,
                                    blur: 3,
                                    opacity: 0.5
                                }
                            },
                            bar: {
                                strokeWidth: '70%',
                                fill: {
                                    opacity: 1
                                },
                                borderRadius: 5,
                                colors: undefined,
                            },
                        }
                    }
                };

                if (chartType === 'pie') {
                    chartOptions.series = data.map(item => parseFloat(item[numericFields[0]]));
                    chartOptions.labels = data.map(item => item[categoryField]);
                    chartOptions.chart.type = 'pie';
                } else {
                    let categories = [...new Set(data.map(item => item[categoryField]))].sort();
                    chartOptions.xaxis.categories = categories;

                    if (numericFields.length > 1) {
                        numericFields.forEach(field => {
                            chartOptions.series.push({
                                name: field,
                                data: categories.map(category => {
                                    let item = data.find(item => item[categoryField] === category);
                                    return item ? parseFloat(item[field]) : 0;
                                })
                            });
                        });
                        chartOptions.chart.type = chartType;
                    } else {
                        chartOptions.series = [{
                            name: numericFields[0],
                            data: data.map(item => parseFloat(item[numericFields[0]]))
                        }];
                        chartOptions.chart.type = 'bar';
                    }
                }

                let chart = new ApexCharts(chartContainer[0], chartOptions);
                chart.render();
            }
            buildChart(settings.data, chartContainer);
        } else {
            $('.bot-message:last').remove();
            mainContainer.append(tableContainer);
        }

        return this;
    };
}(jQuery));
