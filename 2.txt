            getAllDependentSheetsFromSheet: function (sheetIndex) {
            const allSheets = Ft() || [];
            const dependencyMap = new Map(); // sheetIndex -> Set of referenced sheetIndices
            // Step 1: Build dependency graph
            for (const sheet of allSheets) {
                if (!sheet.data || !sheet.name) continue;

                const references = new Set();
                for (const row of sheet.data) {
                    if (!row) continue;
                    for (const cell of row) {
                        if (!cell?.f) continue;

                        for (const targetSheet of allSheets) {
                            if (!targetSheet.name || targetSheet.index === sheet.index) continue;

                            const refRegex = new RegExp(`(?:'${targetSheet.name}'|${targetSheet.name})!\\$?[A-Z]+\\$?\\d+(?::\\$?[A-Z]+\\$?\\d+)?`, 'g');
                            if (refRegex.test(cell.f)) {
                                references.add(targetSheet.index);
                            }
                        }
                    }
                }
                dependencyMap.set(sheet.index, references);
            }

            // Step 2: Traverse reverse dependencies
            const result = new Set([sheetIndex]); // Always include the original sheet
            const queue = [sheetIndex];

            while (queue.length > 0) {
                const current = queue.shift();

                for (const [sheetIdx, refs] of dependencyMap.entries()) {
                    if (refs.has(current) && !result.has(sheetIdx)) {
                        result.add(sheetIdx);
                        queue.push(sheetIdx);
                    }
                }
            }

            return Array.from(result);
        },
