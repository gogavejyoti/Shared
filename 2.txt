(function ($) {
    $.fn.weekAnalyticsPopup = function (options) {
        const settings = $.extend({
            data: [],
            weekStartDay: 'sunday'
        }, options);

        $('#analyticsModal').remove();

        const styles = `
        <style>
            #chartsContainer {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 20px;
                justify-items: center;
            }
            #chartsContainer canvas {
                width: 100% !important;
                max-width: 450px;
                height: 220px !important;
            }
            .multiselect-dropdown {
                max-height: 200px;
                overflow-y: auto;
            }
        </style>`;
        $('head').append(styles);

        const modalHTML = `
        <div class="modal fade" id="analyticsModal" tabindex="-1">
          <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
              <div class="modal-header bg-gradient-primary text-white">
                <h5 class="modal-title">Workforce Analytics Dashboard</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <div class="filters mb-3 p-3 border rounded bg-light">
                  <label>From Week: 
                    <select id="fromWeek" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label class="ms-3">To Week: 
                    <select id="toWeek" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label class="ms-3">LOB: 
                    <select id="lobSelect" class="form-select d-inline-block w-auto" multiple></select>
                  </label>
                  <label class="ms-3">
                    <input type="checkbox" id="comparisonMode"> Comparison Mode
                  </label>
                  <button id="applyFilter" class="btn btn-outline-primary btn-sm ms-3">Apply Filter</button>
                  <button id="exportCsv" class="btn btn-outline-secondary btn-sm ms-2" title="Download CSV">Export CSV</button>
                </div>
                <div id="chartsContainer" class="mt-3"></div>
                <div id="analyticsSummary" class="mt-4"></div>
              </div>
            </div>
          </div>
        </div>`;
        $('body').append(modalHTML);

        const $chartsContainer = $('#chartsContainer');
        const $analyticsSummary = $('#analyticsSummary');

        const parseWeek = (weekStr) => {
            const [dd, mmm, yy] = weekStr.split('-');
            return new Date(`${mmm} ${dd}, 20${yy}`);
        };
        const formatWeek = (date) => {
            const dd = String(date.getDate()).padStart(2, '0');
            const mmm = date.toLocaleString('default', { month: 'short' });
            const yy = String(date.getFullYear()).slice(-2);
            return `${dd}-${mmm}-${yy}`;
        };
        const getCurrentWeek = () => {
            const today = new Date();
            const dayOfWeek = today.getDay();
            const diff = settings.weekStartDay === 'sunday' ? dayOfWeek : (dayOfWeek + 6) % 7;
            const lastWeekDate = new Date(today);
            lastWeekDate.setDate(today.getDate() - diff);
            return formatWeek(lastWeekDate);
        };

        const structuredData = (() => {
            const grouped = {};
            settings.data.forEach(item => {
                if (!grouped[item.week]) grouped[item.week] = { Week: item.week };
                grouped[item.week][`${item.header}||${item.sheetName}`] = item.value;
            });
            return Object.values(grouped).sort((a, b) => parseWeek(a.Week) - parseWeek(b.Week));
        })();

        const uniqueLOBs = [...new Set(settings.data.map(d => d.sheetName))].sort();
        const uniqueHeaders = [...new Set(settings.data.map(d => d.header))].sort();
        const uniqueWeeks = [...new Set(settings.data.map(d => d.week))].sort((a, b) => parseWeek(a) - parseWeek(b));

        uniqueLOBs.forEach(lob => $('#lobSelect').append(`<option value="${lob}">${lob}</option>`));
        uniqueWeeks.forEach(week => {
            $('#fromWeek').append(`<option value="${week}">${week}</option>`);
            $('#toWeek').append(`<option value="${week}">${week}</option>`);
        });

        const currentWeek = getCurrentWeek();
        const currentIndex = uniqueWeeks.indexOf(currentWeek);
        const fallbackIndex = currentIndex >= 0 ? currentIndex : uniqueWeeks.length - 1;
        const fromIndex = Math.max(0, fallbackIndex - 6);
        const toIndex = Math.min(uniqueWeeks.length - 1, fallbackIndex + 6);
        $('#fromWeek').val(uniqueWeeks[fromIndex]);
        $('#toWeek').val(uniqueWeeks[toIndex]);
        $('#lobSelect').val([uniqueLOBs[0]]);

        const metricColors = {
            "Required HC": "#007bff", "Available HC": "#28a745",
            "Actual Hours": "#17a2b8", "Forecasted Hours": "#ffc107",
            "Planned Shrinkage": "#6f42c1", "Actual Shrinkage": "#fd7e14",
            "Planned Attrition": "#e83e8c", "Actual Attrition": "#20c997",
            "Planned AHT": "#6610f2", "Actual AHT": "#fd3955"
        };

        const lobColors = {};
        uniqueLOBs.forEach((lob,i)=> lobColors[lob] = `hsl(${(i*60)%360},70%,50%)`);

        const filterData = () => {
            const fromWeek = $('#fromWeek').val();
            const toWeek = $('#toWeek').val();
            const selectedLOBs = $('#lobSelect').val();
            const isComparison = $('#comparisonMode').is(':checked');
            let filtered = structuredData.filter(d => parseWeek(d.Week) >= parseWeek(fromWeek) && parseWeek(d.Week) <= parseWeek(toWeek));
            return { filtered, selectedLOBs, isComparison };
        };

        const generateSummary = (filtered, selectedLOBs) => {
            let html = `<div class="table-responsive"><table class="table table-striped table-hover"><thead class="table-primary"><tr><th>LOB</th><th>Metric</th><th>Value</th></tr></thead><tbody>`;
            selectedLOBs.forEach(lob=>{
                uniqueHeaders.forEach(header=>{
                    let total = filtered.reduce((sum,d)=>sum + Number(d[`${header}||${lob}`]||0),0);
                    if(header.toLowerCase().includes('shrinkage') || header.toLowerCase().includes('attrition')){
                        total = total.toFixed(2) + '%';
                    } else {
                        total = Math.round(total).toLocaleString();
                    }
                    html += `<tr><td>${lob}</td><td>${header}</td><td>${total}</td></tr>`;
                });
            });
            html += '</tbody></table></div>';
            $analyticsSummary.html(html);
        };

        const exportCSV = (filtered, selectedLOBs) => {
            const headers = ['Week','LOB','Metric','Value'];
            let csvContent = headers.join(',') + '\n';
            filtered.forEach(row=>{
                selectedLOBs.forEach(lob=>{
                    uniqueHeaders.forEach(header=>{
                        let val = row[`${header}||${lob}`]||0;
                        if(header.toLowerCase().includes('shrinkage') || header.toLowerCase().includes('attrition')) val = (val*100).toFixed(2);
                        csvContent += `${row.Week},${lob},${header},${val}\n`;
                    });
                });
            });
            const blob = new Blob([csvContent], {type:'text/csv;charset=utf-8;'});
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'analytics.csv';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        };

        const renderCharts = (filtered, selectedLOBs, isComparison) => {
            $chartsContainer.empty();

            if(filtered.length > 12) {
                $chartsContainer.css('grid-template-columns','1fr');
            } else {
                $chartsContainer.css('grid-template-columns','repeat(2,1fr)');
            }

            const labels = filtered.map(d=>d.Week);

            const createChart = (type, title, metrics, lobList, showPercent=false, includeStaffing=false) => {
                $chartsContainer.append(`
                    <div class="card mb-4 shadow-sm border rounded bg-light" style="width:100%; max-width:900px;">
                        <div class="card-body text-center">
                            <h6 class="card-title fw-bold">
