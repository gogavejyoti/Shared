(function ($) {
    $.fn.assumptionSimulator = function (options) {
        const settings = $.extend({
            data: [], // JSON array
        }, options);

        const $container = $(this);
        $container.empty().addClass('assumption-simulator');

        // Extract weeks sorted
        const weeks = [...new Set(settings.data.map(d => d.week))].sort((a, b) => new Date(a) - new Date(b));

        // Extract LOBs
        const lobs = [...new Set(settings.data.map(d => d.lob))];

        // Store simulated shrinkage and attrition
        const simulatedValues = {};

        // Toolbar for input + apply
        const $toolbar = $(`
            <div class="sim-toolbar mb-2 flex gap-2 items-center">
                <label>Simulation Shrinkage %: <input type="number" step="0.1" min="0" class="sim-input-global-shrink w-20 p-0.5 border rounded"></label>
                <label>Simulation Attrition %: <input type="number" step="0.1" min="0" class="sim-input-global-attr w-20 p-0.5 border rounded"></label>
                <button class="btn-apply px-3 py-1 bg-blue-500 text-white rounded">Apply</button>
            </div>
        `);
        $container.append($toolbar);

        // Table wrapper
        const $tableWrapper = $('<div class="sim-table-wrapper overflow-x-auto"></div>');
        const $table = $('<table class="table sim-table min-w-max border-collapse border border-gray-200"></table>');
        $tableWrapper.append($table);
        $container.append($tableWrapper);

        // Table header: week spanning 2 columns each
        let headerHtml = `<thead><tr>
            <th class="sticky-col bg-white border">LOB / Overall</th>
            <th class="sticky-col bg-white border">Metric</th>`;
        weeks.forEach(w => {
            headerHtml += `<th class="border text-center" colspan="2">${w}</th>`;
        });
        headerHtml += `</tr><tr><th></th><th></th>`;
        weeks.forEach(_ => {
            headerHtml += `<th>Original</th><th>Simulated</th>`;
        });
        headerHtml += `</tr></thead>`;
        $table.append(headerHtml);

        const $tbody = $('<tbody></tbody>');
        $table.append($tbody);

        const fmt = (val) => (val !== null && val !== undefined && !isNaN(val)) ? parseFloat(val).toFixed(2) : 'NA';

        // Helper to get data
        const getData = (lob, week) => settings.data.find(d => d.lob === lob && d.week === week);

        // Initialize simulatedValues with planned values
        lobs.forEach(lob => {
            weeks.forEach(week => {
                const d = getData(lob, week);
                if (d) {
                    simulatedValues[`${lob}_${week}_shrink`] = d.plannedShrinkage || 0;
                    simulatedValues[`${lob}_${week}_attr`] = d.plannedAttrition || 0;
                }
            });
        });

        // Function to calculate simulated metrics
        function calcSimulated(d) {
            if (!d) return {};
            const shrink = simulatedValues[`${d.lob}_${d.week}_shrink`] ?? d.plannedShrinkage ?? 0;
            const attr = simulatedValues[`${d.lob}_${d.week}_attr`] ?? d.plannedAttrition ?? 0;
            const fteAvail = d.fteRequired != null ? d.fteRequired * (1 - shrink / 100) : null;
            const delta = fteAvail != null && d.fteRequired != null ? fteAvail - d.fteRequired : null;
            const staffing = (d.fteRequired != null && d.fteRequired !== 0 && fteAvail != null) ? fteAvail / d.fteRequired * 100 : null;
            return {
                'FTE Required': d.fteRequired,
                'FTE Available': fteAvail,
                'Delta': delta,
                'Staffing %': staffing,
                'Planned Shrinkage %': d.plannedShrinkage ?? 'NA',
                'Simulated Shrinkage %': shrink,
                'Planned Attrition %': d.plannedAttrition ?? 'NA',
                'Simulated Attrition %': attr
            };
        }

        // Function to render table
        function renderTable() {
            $tbody.empty();
            const metrics = ['FTE Required','FTE Available','Delta','Staffing %','Planned Shrinkage %','Simulated Shrinkage %','Planned Attrition %','Simulated Attrition %'];

            // Overall row first
            metrics.forEach(metric => {
                const $tr = $('<tr></tr>');
                if (metric === 'FTE Required') $tr.append(`<td class="sticky-col bg-gray-100 font-bold" rowspan="${metrics.length}">Overall</td>`);
                $tr.append(`<td class="sticky-col bg-gray-50">${metric}</td>`);

                weeks.forEach(week => {
                    const weekData = lobs.map(lob => getData(lob, week)).filter(d => d);
                    let original = 'NA', simulated = 'NA';
                    if (weekData.length) {
                        original = weekData.reduce((sum,d) => sum + (calcSimulated(d)[metric] != null ? calcSimulated(d)[metric] : 0),0);
                        simulated = weekData.reduce((sum,d) => sum + (calcSimulated(d)[metric] != null ? calcSimulated(d)[metric] : 0),0);
                        if (metric === 'Staffing %' || metric.includes('Shrinkage') || metric.includes('Attrition')) {
                            original /= weekData.length;
                            simulated /= weekData.length;
                        }
                        original = fmt(original);
                        simulated = fmt(simulated);
                    }

                    // Determine if simulated column is applicable
                    const isSimulatedMetric = ['FTE Available','Delta','Staffing %','Simulated Shrinkage %','Simulated Attrition %'].includes(metric);
                    if (isSimulatedMetric) {
                        $tr.append(`<td class="text-right">${original}</td><td class="text-right"><input type="text" readonly class="sim-input-cell w-16 p-0.5 border rounded text-right" value="${simulated}"></td>`);
                    } else {
                        $tr.append(`<td class="text-right" colspan="2">${original}</td>`);
                    }
                });
                $tbody.append($tr);
            });

            // LOB rows
            lobs.forEach(lob => {
                metrics.forEach(metric => {
                    const $tr = $('<tr></tr>');
                    if (metric === 'FTE Required') $tr.append(`<td class="sticky-col bg-gray-100 font-semibold" rowspan="${metrics.length}">${lob}</td>`);
                    $tr.append(`<td class="sticky-col bg-gray-50">${metric}</td>`);

                    weeks.forEach(week => {
                        const d = getData(lob, week);
                        const simData = calcSimulated(d);
                        let original = d && simData[metric] != null ? fmt(simData[metric]) : 'NA';
                        let simulated = 'NA';
                        if (['FTE Available','Delta','Staffing %','Simulated Shrinkage %','Simulated Attrition %'].includes(metric)) {
                            simulated = d && simData[metric] != null ? fmt(simData[metric]) : 'NA';
                            $tr.append(`<td class="text-right">${original}</td><td class="text-right"><input type="text" readonly class="sim-input-cell w-16 p-0.5 border rounded text-right" value="${simulated}"></td>`);
                        } else {
                            $tr.append(`<td class="text-right" colspan="2">${original}</td>`);
                        }
                    });

                    $tbody.append($tr);
                });
            });
        }

        renderTable();

        // Event: Apply global simulation
        $toolbar.find('.btn-apply').on('click', function () {
            const shrinkVal = parseFloat($toolbar.find('.sim-input-global-shrink').val()) || 0;
            const attrVal = parseFloat($toolbar.find('.sim-input-global-attr').val()) || 0;

            lobs.forEach(lob => weeks.forEach(week => {
                simulatedValues[`${lob}_${week}_shrink`] = shrinkVal;
                simulatedValues[`${lob}_${week}_attr`] = attrVal;
            }));

            renderTable();
        });

    };
}(jQuery));
