public class AIForecastEntry
{
    public string Program { get; set; }
    public string Metric { get; set; }
    public List<string> Forecasts { get; set; }
}



static AIForecastEntry GetForecastForPrompt(List<WfmMetric> data, string metricName, Func<WfmMetric, float?> selector, DateTime lastMonth, int horizon)
{
    var values = data.OrderBy(m => m.Month)
                     .Select(selector)
                     .Where(v => v.HasValue && v.Value != 0)
                     .Select(v => v.Value.Value)
                     .ToList();

    if (values.Count < 6)
        return null;

    var forecast = Forecast(values, horizon);

    var result = new AIForecastEntry
    {
        Program = data.First().Program,
        Metric = metricName,
        Forecasts = forecast.Select((v, i) =>
        {
            var month = lastMonth.AddMonths(i + 1).ToString("yyyy-MM");
            return $"Month +{i + 1} ({month}): {v:F2}";
        }).ToList()
    };

    return result;
}



static string BuildAiPrompt(List<AIForecastEntry> forecastEntries)
{
    var grouped = forecastEntries
        .GroupBy(f => f.Program)
        .Select(g => new
        {
            Program = g.Key,
            Metrics = g.ToList()
        });

    var promptBuilder = new System.Text.StringBuilder();
    promptBuilder.AppendLine("You are a workforce planning assistant. Below is a 3-month forecast for different metrics across programs.");
    promptBuilder.AppendLine("Summarize the trends, highlight risks (like increasing attrition or decreasing staffing), and recommend actions if needed.");
    promptBuilder.AppendLine();
    promptBuilder.AppendLine("Forecast Data:");

    foreach (var group in grouped)
    {
        promptBuilder.AppendLine($"\nðŸ“Š Program: {group.Program}");

        foreach (var metric in group.Metrics)
        {
            promptBuilder.AppendLine($"- {metric.Metric}:");
            foreach (var f in metric.Forecasts)
                promptBuilder.AppendLine($"  â€¢ {f}");
        }
    }

    promptBuilder.AppendLine("\nPlease provide insights per program.");

    return promptBuilder.ToString();
}



var forecastEntries = new List<AIForecastEntry>();

if (programMetrics.First().AccountType == 0)
{
    var entry = GetForecastForPrompt(programMetrics, "OfferedToForecast", x => x.OfferedToForecast, latestMonth, forecastHorizon);
    if (entry != null) forecastEntries.Add(entry);

    entry = GetForecastForPrompt(programMetrics, "HandledToForecast", x => x.HandledToForecast, latestMonth, forecastHorizon);
    if (entry != null) forecastEntries.Add(entry);

    entry = GetForecastForPrompt(programMetrics, "HandledToOffered", x => x.HandledToOffered, latestMonth, forecastHorizon);
    if (entry != null) forecastEntries.Add(entry);

    entry = GetForecastForPrompt(programMetrics, "HandledToStaffing", x => x.HandledToStaffing, latestMonth, forecastHorizon);
    if (entry != null) forecastEntries.Add(entry);
}

forecastEntries.AddRange(new[]
{
    GetForecastForPrompt(programMetrics, "Shrinkage", x => x.Shrinkage, latestMonth, forecastHorizon),
    GetForecastForPrompt(programMetrics, "Attrition", x => x.Attrition, latestMonth, forecastHorizon),
    GetForecastForPrompt(programMetrics, "Staffing", x => x.Staffing, latestMonth, forecastHorizon)
}.Where(e => e != null));

var aiPrompt = BuildAiPrompt(forecastEntries);
Console.WriteLine(aiPrompt);

// You can now pass `aiPrompt` to Azure OpenAI via your API call.


