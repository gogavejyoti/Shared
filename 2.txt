functionParser: function (e, n) {
    let t = this;

    if (t.operatorjson == null) {
        let y = t.operator.split("|"), v = {};
        for (let k = 0; k < y.length; k++) v[y[k].toString()] = 1;
        t.operatorjson = v;
    }

    if (e == null) return "";

    if (e.substr(0, 2) == "=+") e = e.substr(2);
    else if (e.substr(0, 1) == "=") e = e.substr(1);

    let l = e, a = 0, o = "", s = "";
    let u = { bracket: 0, comma: 0, squote: 0, dquote: 0, compare: 0, braces: 0 };
    let d = [], f = [], m = [], g = -1;

    const arrayRegex = /{.*?}/; // ✅ moved outside loop

    for (; a < l.length;) {
        let y = l[a];

        if (y == "(" && u.squote == 0 && u.dquote == 0 && u.braces == 0) {
            if (o.length > 0 && m.length == 0) {
                if (o = o.toUpperCase(), o.indexOf(":") > -1) {
                    let v = o.split(":");
                    s += "luckysheet_getSpecialReference(true,'" + $.trim(v[0]).replace(/'/g, "\\'") + "', luckysheet_function." + v[1] + ".f(#lucky#";
                } else {
                    s += "luckysheet_function." + o + ".f(";
                }
                m.push(1); o = "";
            } else {
                if (m.length == 0) { s += "("; m.push(0); o = ""; }
                else { m.push(0); o += y; }
            }
        }
        else if (y == ")" && u.squote == 0 && u.dquote == 0 && u.braces == 0) {
            let v = m.pop();
            if (m.length == 0) {
                let k = t.functionParser(o, n);
                if (k.indexOf("#lucky#") > -1) k = k.replace(/#lucky#/g, "") + ")";
                s += k + ")"; o = "";
            } else o += y;
        }
        else if (y == "{" && u.squote == 0 && u.dquote == 0) { o += "{"; u.braces += 1; }
        else if (y == "}" && u.squote == 0 && u.dquote == 0) { o += "}"; u.braces -= 1; }
        else if (y == '"' && u.squote == 0) {
            if (u.dquote > 0) {
                if (a < l.length - 1 && l[a + 1] == '"') { a++; o += "\x7F"; }
                else { u.dquote -= 1; o += '"'; }
            } else { u.dquote += 1; o += '"'; }
        }
        else if (y == "'" && u.dquote == 0) {
            o += "'";
            if (u.squote > 0) {
                if (g == a - 1) return "";
                if (a < l.length - 1 && l[a + 1] == "'") { a++; o += "'"; }
                else {
                    if (l[a - 1] == "'") return "";
                    u.squote -= 1;
                }
            } else { u.squote += 1; g = a; }
        }
        else if (y == "," && u.squote == 0 && u.dquote == 0 && u.braces == 0) {
            if (m.length <= 1) {
                let v = t.functionParser(o, n);
                if (v.indexOf("#lucky#") > -1) v = v.replace(/#lucky#/g, "") + ")";
                s += v + ","; o = "";
            } else o += ",";
        }
        else if (y in t.operatorjson && u.squote == 0 && u.dquote == 0 && u.braces == 0) {
            let v = "", k = t.operatorPriority;
            if (a + 1 < l.length && (v = l[a + 1]), y + v in t.operatorjson) {
                if (m.length == 0) {
                    if ($.trim(o).length > 0) f.push(t.functionParser($.trim(o), n));
                    else if ($.trim(s).length > 0) f.push($.trim(s));
                    if (d[0] in t.operatorjson) {
                        let b = k[d[0]];
                        for (; d.length > 0 && b != null;) { f.push(d.shift()); b = k[d[0]]; }
                    }
                    d.unshift(y + v); s = ""; o = "";
                } else o += y + v;
                a++;
            } else if (m.length == 0) {
                if ($.trim(o).length > 0) f.push(t.functionParser($.trim(o), n));
                else if ($.trim(s).length > 0) f.push($.trim(s));
                if (d[0] in t.operatorjson) {
                    let b = k[d[0]] ?? 1e3, w = k[y] ?? 1e3;
                    for (; d.length > 0 && w >= b;) { f.push(d.shift()); b = k[d[0]] ?? 1e3; }
                }
                d.unshift(y); s = ""; o = "";
            } else o += y;
        }
        else { o += y; }

        if (a == l.length - 1) {
            let v = "", k = $.trim(o).replace(/'/g, "\\'");
            if (t.iscelldata(k) && k.substr(0, 1) != ":") {
                v = "luckysheet_getcelldata('" + k + "')";
                if (typeof n == "function") n(k);
            }
            else if (k.substr(0, 1) == ":") {
                k = k.substr(1);
                if (t.iscelldata(k)) v = "luckysheet_getSpecialReference(false," + s + ",'" + k + "')";
            }
            else {
                o = $.trim(o);
                if (arrayRegex.test(o) && o.substr(0, 1) != '"' && o.substr(o.length - 1, 1) != '"') {
                    let w = arrayRegex.exec(o)[0], x = o.search(arrayRegex);
                    if (x > 0) v += o.substr(0, x);
                    v += "luckysheet_getarraydata('" + w + "')";
                    if (x + w.length < o.length) v += o.substr(x + w.length, o.length);
                } else v = o;
            }

            if (v.length > 0) f.push(v);
            if (d.length > 0) {
                if (s.length > 0) { f.push(s); s = ""; }
                while (d.length > 0) f.push(d.shift());
            }

            if (f.length > 0) s = t.calPostfixExpression(f.reverse()); // ✅ reversed instead of unshift
            else s += v;
        }

        a++;
    }
    return s;
},
