    function At(e, n, t, l) {
        t == null && (t = h.flowdata);
        let a = t[e][n], o;
        if (L(l) == "object" ? (a == null ? a = l : (l.f != null ? a.f = l.f : a.hasOwnProperty("f") && delete a.f,
            l.spl != null && (a.spl = l.spl),
            l.ct != null && (a.ct = l.ct)),
            L(l.v) == "object" ? o = l.v.v : o = l.v) : o = l,
            o == null)
            return L(a) == "object" ? (delete a.m,
                delete a.v) : a = null,
                t[e][n] = a,
                a;
        (fe(a) || (L(a) === "string" || L(a) === "number") && a === l) && (a = {});
        let s = o.toString();
        if (s.substr(0, 1) == "'")
            a.m = s.substr(1),
                a.ct = {
                    fa: "@",
                    t: "s"
                },
                a.v = s.substr(1),
                a.qp = 1;
        else if (a.qp == 1)
            a.m = s,
                a.ct = {
                    fa: "@",
                    t: "s"
                },
                a.v = s;
        else if (s.toUpperCase() === "TRUE")
            a.m = "TRUE",
                a.ct = {
                    fa: "General",
                    t: "b"
                },
                a.v = !0;
        else if (s.toUpperCase() === "FALSE")
            a.m = "FALSE",
                a.ct = {
                    fa: "General",
                    t: "b"
                },
                a.v = !1;
        else if (s.substr(-1) === "%" && B(s.substring(0, s.length - 1)))
            a.ct = {
                fa: "0%",
                t: "n"
            },
                a.v = s.substring(0, s.length - 1) / 100,
                a.m = o;
        else if (H(o))
            a.m = s,
                a.ct != null ? a.ct.t = "e" : a.ct = {
                    fa: "General",
                    t: "e"
                },
                a.v = o;
        else if (a.f != null && B(o) && !/^\d{6}(18|19|20)?\d{2}(0[1-9]|1[12])(0[1-9]|[12]\d|3[01])\d{3}(\d|X)$/i.test(o))
            if (a.v = parseFloat(o),
                a.ct == null && (a.ct = {
                    fa: "General",
                    t: "n"
                }),
                a.v == Infinity || a.v == -Infinity)
                a.m = a.v.toString();
            else if (a.v.toString().indexOf("e") > -1) {
                let u;
                a.v.toString().split(".").length == 1 ? u = 0 : u = a.v.toString().split(".")[1].split("e")[0].length,
                    u > 5 && (u = 5),
                    a.m = a.v.toExponential(u).toString()
            } else {
                let u = Math.round(a.v * 1e9) / 1e9;
                if (a.ct == null) {
                    let d = it(u);
                    a.m = d[0].toString()
                } else {
                    let d = mt(a.ct.fa, u);
                    a.m = d.toString()
                }
            }
        else if (a.ct != null && a.ct.fa == "@")
            a.m = s,
                a.v = o;
        else if (a.ct != null && a.ct.fa != null && a.ct.fa != "General") {
            B(o) && (o = parseFloat(o));
            let u = mt(a.ct.fa, o);
            u === o ? (u = it(o),
                a.m = u[0].toString(),
                a.ct = u[1],
                a.v = u[2]) : (a.m = u.toString(),
                    a.v = o)
        } else if (B(o) && !/^\d{6}(18|19|20)?\d{2}(0[1-9]|1[12])(0[1-9]|[12]\d|3[01])\d{3}(\d|X)$/i.test(o))
            if (typeof o == "string" && o.split("").every(d => d == "0" || d == ".") && (o = parseFloat(o)),
                a.v = o,
                a.ct = {
                    fa: "General",
                    t: "n"
                },
                a.v == Infinity || a.v == -Infinity)
                a.m = a.v.toString();
            else {
                let u = it(a.v);
                a.m = u[0].toString()
            }
        else {
            let u = it(o);
            a.m = u[0].toString(),
                a.ct = u[1],
                a.v = u[2]
        }
        if (!ne.allowUpdate && !me.pointEdit && a.ct != null && /^(w|W)((0?)|(0\.0+))$/.test(a.ct.fa) == !1 && a.ct.t == "n" && a.v != null && parseInt(a.v).toString().length > 4) {
            let u = me.autoFormatw.toString().toUpperCase()
                , d = me.accuracy
                , f = Z2(u, d);
            f != "General" && (a.ct.fa = f,
                a.m = mt(f, a.v))
        }
        return t[e][n] = a,
            a
    }
