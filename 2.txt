(function ($) {
    $.fn.staffingSummaryPopup = function (options) {
        const settings = $.extend({
            data: [],
            weekStartDay: 'sunday'
        }, options);

        $('#analyticsModal').remove();

        if ($('#weekAnalyticsPopupStyles').length === 0) {
            $('head').append(`
            <style id="weekAnalyticsPopupStyles">
                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

                #analyticsModal { font-family: 'Inter', sans-serif; zoom: 90%; }
                #analyticsModal .modal-content { border-radius: 12px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); border: none; background: #f9f9f9; }
                #analyticsModal .modal-header { border-bottom: none; background: #fff; padding: 1rem 1.5rem; display: flex; align-items: center; justify-content: space-between; font-weight: 600; font-size: 1.25rem; color: #333; }
                #analyticsModal .btn-close { background: url('data:image/svg+xml;utf8,<svg fill="gray" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path d="M2 2l12 12m0-12L2 14" stroke="gray" stroke-width="2"/></svg>') no-repeat center; opacity: 0.8; }
                #analyticsModal .btn-close:hover { opacity: 1; }
                #analyticsModal .modal-body { padding: 1.5rem; background: #f9f9f9; }
                #analyticsModal .filter-container { background: #fff; padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem; box-shadow: 0 1px 6px rgba(0,0,0,0.05); display: flex; flex-wrap: wrap; gap: 1rem; align-items: flex-end; }
                #analyticsModal .filter-container label { font-weight: 500; color: #555; margin-bottom: 0.25rem; display: block; }
                #analyticsModal .filter-container .dropdown { min-width: 200px; }
                #analyticsModal .filter-container .btn-sm { padding: 0.375rem 0.75rem; border-radius: 6px; border: 1px solid #ddd; background: #fff; color: #333; }
                #analyticsModal .filter-container .btn-sm:hover { border-color: #b497fc; background: #f5f0ff; color: #333; }
                #analyticsModal .btn-primary { background-color: #b497fc; border: none; font-weight: 600; }
                #analyticsModal .btn-primary:hover { background-color: #a07efc; }
                #analyticsModal .dropdown-checkbox { max-height: 200px; overflow-y: auto; padding: 10px; }
                #analyticsModal .table-wrapper { overflow-x: auto; overflow-y: auto; max-height: 500px; position: relative; border: 1px solid #ddd; background: #fff; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.05); }
                #analyticsModal table { border-collapse: collapse; width: max-content; table-layout: auto; font-size: 0.95rem; }
                #analyticsModal th, #analyticsModal td { border-top: 1px solid #e0e0e0; padding: 10px; text-align: center; white-space: nowrap; background: #fff; overflow: hidden; text-overflow: ellipsis; }
                
                /* Sticky header and first two columns */
                #analyticsModal thead th { position: sticky; top: 0; background: #f1f1f1; z-index: 6; }
                #analyticsModal thead th.sticky-left, #analyticsModal tbody td.sticky-left {
                    position: sticky; left: 0; background: #f7f7f7; z-index: 8; min-width: 120px;
                }
                #analyticsModal thead th.sticky-left-2, #analyticsModal tbody td.sticky-left-2 {
                    position: sticky; left: 120px; background: #f7f7f7; z-index: 8; min-width: 150px;
                }

                #analyticsModal .rag-red { color: #e74c3c; font-weight: bold; }
                #analyticsModal .rag-amber { color: #f39c12; font-weight: bold; }
                #analyticsModal .rag-green { color: #2ecc71; font-weight: bold; }
            </style>
            `);
        }

        const modalHTML = `
        <div class="modal fade" id="analyticsModal" tabindex="-1" style="z-index:9999;">
          <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Staffing Summary</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body p-0">
                <div class="filter-container">
                    <div>
                        <label><b>LOB:</b></label>
                        <div class="dropdown">
                            <button class="btn btn-sm dropdown-toggle" type="button" id="lobDropdownBtn" data-bs-toggle="dropdown">Select LOBs</button>
                            <div class="dropdown-menu dropdown-checkbox" aria-labelledby="lobDropdownBtn" id="lobDropdown"></div>
                        </div>
                    </div>
                    <div>
                        <label><b>Metrics:</b></label>
                        <div class="dropdown">
                            <button class="btn btn-sm dropdown-toggle" type="button" id="metricDropdownBtn" data-bs-toggle="dropdown">Select Metrics</button>
                            <div class="dropdown-menu dropdown-checkbox" aria-labelledby="metricDropdownBtn" id="metricDropdown"></div>
                        </div>
                    </div>
                    <div>
                        <label><b>Week From:</b></label>
                        <div class="dropdown">
                            <button class="btn btn-sm dropdown-toggle" type="button" id="weekFromDropdownBtn" data-bs-toggle="dropdown">Select From Week</button>
                            <div class="dropdown-menu dropdown-checkbox" aria-labelledby="weekFromDropdownBtn" id="weekFromDropdown"></div>
                        </div>
                    </div>
                    <div>
                        <label><b>Week To:</b></label>
                        <div class="dropdown">
                            <button class="btn btn-sm dropdown-toggle" type="button" id="weekToDropdownBtn" data-bs-toggle="dropdown">Select To Week</button>
                            <div class="dropdown-menu dropdown-checkbox" aria-labelledby="weekToDropdownBtn" id="weekToDropdown"></div>
                        </div>
                    </div>
                    <div>
                        <button id="applyFilterBtn" class="btn btn-primary btn-sm">Apply Filter</button>
                    </div>
                </div>
                <div class="table-wrapper" id="staffingContainer"></div>
              </div>
            </div>
          </div>
        </div>`;

        $('body').append(modalHTML);

        const $container = $('#staffingContainer');
        const parseWeek = w => {
            const [dd, mmm, yy] = w.split('-');
            const fullYear = yy.length === 2 ? (parseInt(yy, 10) < 50 ? '20' + yy : '19' + yy) : yy;
            return new Date(`${mmm} ${dd}, ${fullYear}`);
        };

        const uniqueWeeks = [...new Set(settings.data.map(d => d.week))]
            .sort((a, b) => parseWeek(a) - parseWeek(b));
        const uniqueLOBs = [...new Set(settings.data.map(d => d.sheetName))].sort();
        const metrics = ['Required HC', 'Available HC', 'Delta', 'Staffing %'];

        const groupedData = {};
        settings.data.forEach(d => {
            if (!groupedData[d.sheetName]) groupedData[d.sheetName] = {};
            if (!groupedData[d.sheetName][d.week]) groupedData[d.sheetName][d.week] = {};
            groupedData[d.sheetName][d.week][d.header] = Number(d.value);
        });

        for (const lob in groupedData) {
            for (const week in groupedData[lob]) {
                const req = groupedData[lob][week]?.['Required HC'] || 0;
                const avail = groupedData[lob][week]?.['Available HC'] || 0;
                groupedData[lob][week]['Delta'] = avail - req;
                groupedData[lob][week]['Staffing %'] = req === 0 ? 0 : Math.round((avail / req) * 100);
            }
        }

        const lobColors = ['#2c3e50', '#34495e', '#16a085', '#8e44ad', '#d35400', '#7f8c8d', '#27ae60', '#c0392b'];

        function updateDropdownLabel(dropdownId, selectedItems, placeholder) {
            const btn = $(`#${dropdownId}Btn`);
            if (selectedItems.length === 0) btn.text(placeholder);
            else btn.text(`${placeholder.split(' ')[0]} (${selectedItems.length}) selected`);
        }

        function updateRadioDropdownLabel(dropdownBtnId, selectedValue, prefix) {
            $(`#${dropdownBtnId}`).text(`${prefix}: ${selectedValue}`);
        }

        function populateFilters() {
            const lobContainer = document.createDocumentFragment();
            lobContainer.appendChild(document.createElement('label')).innerHTML = `<label><input type="checkbox" class="lobSelectAll" checked> <b>Select All</b></label><br/>`;
            uniqueLOBs.forEach(lob => {
                const label = document.createElement('label');
                label.innerHTML = `<input type="checkbox" class="lobCheckbox" value="${lob}" checked> ${lob}`;
                lobContainer.appendChild(label);
                lobContainer.appendChild(document.createElement('br'));
            });
            $('#lobDropdown').append(lobContainer);

            const metricContainer = document.createDocumentFragment();
            metricContainer.appendChild(document.createElement('label')).innerHTML = `<label><input type="checkbox" class="metricSelectAll" checked> <b>Select All</b></label><br/>`;
            metrics.forEach(metric => {
                const label = document.createElement('label');
                label.innerHTML = `<input type="checkbox" class="metricCheckbox" value="${metric}" checked> ${metric}`;
                metricContainer.appendChild(label);
                metricContainer.appendChild(document.createElement('br'));
            });
            $('#metricDropdown').append(metricContainer);

            uniqueWeeks.forEach(week => {
                $('#weekFromDropdown').append(`<label><input type="radio" name="weekFrom" value="${week}" ${week === uniqueWeeks[0] ? 'checked' : ''}> ${week}</label><br/>`);
                $('#weekToDropdown').append(`<label><input type="radio" name="weekTo" value="${week}" ${week === uniqueWeeks[uniqueWeeks.length - 1] ? 'checked' : ''}> ${week}</label><br/>`);
            });

            updateDropdownLabel('lobDropdown', uniqueLOBs, 'Select LOBs');
            updateDropdownLabel('metricDropdown', metrics, 'Select Metrics');
            updateRadioDropdownLabel('weekFromDropdownBtn', uniqueWeeks[0], 'From');
            updateRadioDropdownLabel('weekToDropdownBtn', uniqueWeeks[uniqueWeeks.length - 1], 'To');
        }

        function buildTable(selectedLOBs, selectedMetrics, weekFrom, weekTo) {
            const fromIndex = uniqueWeeks.indexOf(weekFrom);
            const toIndex = uniqueWeeks.indexOf(weekTo);
            const weeksInRange = uniqueWeeks.slice(Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex) + 1);

            const table = document.createElement('table');
            const thead = document.createElement('thead');
            const tbody = document.createElement('tbody');

            const headerRow = document.createElement('tr');
            headerRow.innerHTML = `<th class="sticky-left">LOB</th><th class="sticky-left-2">Metric</th>`;
            weeksInRange.forEach(week => {
                const th = document.createElement('th');
                th.textContent = week;
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);

            selectedLOBs.forEach((lob, lobIndex) => {
                const lobColor = lobColors[lobIndex % lobColors.length];
                selectedMetrics.forEach((metric, i) => {
                    const row = document.createElement('tr');
                    if (i === 0) {
                        const tdLOB = document.createElement('td');
                        tdLOB.className = 'sticky-left';
                        tdLOB.setAttribute('rowspan', selectedMetrics.length);
                        tdLOB.style.background = lobColor;
                        tdLOB.style.color = '#fff';
                        tdLOB.textContent = lob;
                        row.appendChild(tdLOB);
                    }
                    const tdMetric = document.createElement('td');
                    tdMetric.className = 'sticky-left-2';
                    tdMetric.textContent = metric;
                    row.appendChild(tdMetric);

                    weeksInRange.forEach(week => {
                        const td = document.createElement('td');
                        let val = (groupedData[lob][week] && groupedData[lob][week][metric]) || 0;
                        val = Math.round(val);

                        let cls = '';
                        if (metric === 'Delta' && val < 0) cls = 'rag-red';
                        if (metric === 'Staffing %') {
                            if (val < 80) cls = 'rag-red';
                            else if (val < 100) cls = 'rag-amber';
                            else cls = 'rag-green';
                            val = `${val}%`;
                        } else {
                            val = new Intl.NumberFormat().format(val);
                        }

                        td.className = cls;
                        td.title = val;
                        td.textContent = val;
                        row.appendChild(td);
                    });

                    tbody.appendChild(row);
                });
            });

            table.appendChild(thead);
            table.appendChild(tbody);
            $container.empty().append(table);
        }

        populateFilters();

        $('#analyticsModal').on('hidden.bs.modal', function () {
            $('#analyticsModal').remove();
            $('#weekAnalyticsPopupStyles').remove();
        });

        // Select All / Unselect All Logic
        $('#lobDropdown').on('change', '.lobSelectAll', function () {
            const checked = $(this).is(':checked');
            $('.lobCheckbox').prop('checked', checked);
            const selectedLOBs = checked ? uniqueLOBs.slice() : [];
            updateDropdownLabel('lobDropdown', selectedLOBs, 'Select LOBs');
        });

        $('#metricDropdown').on('change', '.metricSelectAll', function () {
            const checked = $(this).is(':checked');
            $('.metricCheckbox').prop('checked', checked);
            const selectedMetrics = checked ? metrics.slice() : [];
            updateDropdownLabel('metricDropdown', selectedMetrics, 'Select Metrics');
        });

        $('#lobDropdown').on('change', '.lobCheckbox', function () {
            const selectedLOBs = $('.lobCheckbox:checked').map(function () { return this.value; }).get();
            updateDropdownLabel('lobDropdown', selectedLOBs, 'Select LOBs');
            $('.lobSelectAll').prop('checked', selectedLOBs.length === uniqueLOBs.length);
        });

        $('#metricDropdown').on('change', '.metricCheckbox', function () {
            const selectedMetrics = $('.metricCheckbox:checked').map(function () { return this.value; }).get();
            updateDropdownLabel('metricDropdown', selectedMetrics, 'Select Metrics');
            $('.metricSelectAll').prop('checked', selectedMetrics.length === metrics.length);
        });

        $('#weekFromDropdown').on('change', 'input[type=radio]', function () {
            const selectedWeek = $('#weekFromDropdown input[type=radio]:checked').val();
            updateRadioDropdownLabel('weekFromDropdownBtn', selectedWeek, 'From');
        });

        $('#weekToDropdown').on('change', 'input[type=radio]', function () {
            const selectedWeek = $('#weekToDropdown input[type=radio]:checked').val();
            updateRadioDropdownLabel('weekToDropdownBtn', selectedWeek, 'To');
        });

        $('#applyFilterBtn').on('click', function () {
            const selectedLOBs = $('.lobCheckbox:checked').map(function () { return this.value; }).get();
            const selectedMetrics = $('.metricCheckbox:checked').map(function () { return this.value; }).get();
            const weekFrom = $('#weekFromDropdown input[type=radio]:checked').val();
            const weekTo = $('#weekToDropdown input[type=radio]:checked').val();

            buildTable(selectedLOBs, selectedMetrics, weekFrom, weekTo);
        });

        buildTable(uniqueLOBs, metrics, uniqueWeeks[0], uniqueWeeks[uniqueWeeks.length - 1]);

        const modalEl = document.getElementById('analyticsModal');
        const modal = new bootstrap.Modal(modalEl);
        modal.show();

        return this;
    };
})(jQuery);
