(function ($) {
    $.fn.weekAnalyticsPopup = function (options) {
        const settings = $.extend({
            data: [],
            weekStartDay: 'sunday',
            defaultMode: 'staffing'
        }, options);

        $('#analyticsModal').remove();

        // Add modal HTML
        const modalHTML = `
        <div class="modal fade" id="analyticsModal" tabindex="-1">
          <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Workforce Analytics Dashboard</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <ul class="nav nav-tabs mb-3" id="analyticsTab" role="tablist">
                  <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="staffing-tab" data-bs-toggle="tab" data-bs-target="#staffing" type="button" role="tab">Staffing Summary</button>
                  </li>
                  <li class="nav-item" role="presentation">
                    <button class="nav-link" id="charts-tab" data-bs-toggle="tab" data-bs-target="#charts" type="button" role="tab">Charts</button>
                  </li>
                </ul>
                <div class="tab-content">
                  <div class="tab-pane fade show active" id="staffing" role="tabpanel">
                    <div id="analyticsSummary" class="table-responsive" style="overflow:auto;"></div>
                  </div>
                  <div class="tab-pane fade" id="charts" role="tabpanel">
                    <div class="filters mb-3 p-3 border rounded bg-light d-flex flex-wrap align-items-center gap-2">
                        <label>From Week: 
                          <select id="fromWeek" class="form-select d-inline-block w-auto"></select>
                        </label>
                        <label>To Week: 
                          <select id="toWeek" class="form-select d-inline-block w-auto"></select>
                        </label>
                        <label>LOB: 
                          <div class="custom-multiselect" id="lobSelectContainer">
                              <button type="button" class="btn btn-light dropdown-toggle" id="lobSelectBtn">Select LOBs</button>
                              <div class="multiselect-options"></div>
                          </div>
                        </label>
                        <button id="applyFilter" class="btn btn-primary btn-sm">Apply Filter</button>
                    </div>
                    <div id="chartsContainer" style="overflow:auto;"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>`;
        $('body').append(modalHTML);

        const $analyticsSummary = $('#analyticsSummary');
        const $chartsContainer = $('#chartsContainer');

        const parseWeek = (weekStr) => {
            const [dd, mmm, yy] = weekStr.split('-');
            return new Date(`${mmm} ${dd}, 20${yy}`);
        };

        const unique = (arr) => [...new Set(arr)];

        // Transform structured data
        const structuredData = (() => {
            const grouped = {};
            settings.data.forEach(item => {
                if (!grouped[item.week]) grouped[item.week] = { Week: item.week };
                grouped[item.week][`${item.header}||${item.sheetName}`] = item.value;
            });
            return Object.values(grouped).sort((a, b) => parseWeek(a.Week) - parseWeek(b.Week));
        })();

        const uniqueWeeks = structuredData.map(d => d.Week);
        const uniqueLOBs = unique(settings.data.map(d => d.sheetName));
        const uniqueHeaders = ['Required HC', 'Available HC', 'Actual Hours', 'Forecasted Hours', 'Planned Shrinkage', 'Actual Shrinkage', 'Planned Attrition', 'Actual Attrition', 'Planned AHT', 'Actual AHT'];

        // Populate week filters
        uniqueWeeks.forEach(w => $('#fromWeek, #toWeek').append(`<option value="${w}">${w}</option>`));
        $('#fromWeek').val(uniqueWeeks[0]);
        $('#toWeek').val(uniqueWeeks[uniqueWeeks.length - 1]);

        // Populate LOB multiselect
        const $optionsDiv = $('#lobSelectContainer .multiselect-options');
        uniqueLOBs.forEach(lob => $optionsDiv.append(`<label><input type="checkbox" value="${lob}" checked> ${lob}</label>`));

        const getSelectedLOBs = () => {
            const selected = [];
            $optionsDiv.find('input:checked').each(function () { selected.push($(this).val()); });
            return selected.length ? selected : [uniqueLOBs[0]];
        };

        $('#lobSelectBtn').on('click', e => { e.stopPropagation(); $optionsDiv.toggle(); });
        $(document).on('click', () => $optionsDiv.hide());
        $optionsDiv.find('input').on('change', () => { $('#lobSelectBtn').text(getSelectedLOBs().join(', ')); });

        // Generate Staffing Summary
        const generateSummary = () => {
            let html = `<table class="table table-bordered table-striped" id="lobStaffingTable" style="white-space:nowrap;"><thead><tr><th>LOB</th><th>Metric</th>`;
            structuredData.forEach(d => html += `<th>${d.Week}</th>`); html += `</tr></thead><tbody>`;
            getSelectedLOBs().forEach(lob => {
                html += `<tr><td rowspan="4">${lob}</td><td>FTE Required</td>`; structuredData.forEach(d => html += `<td>${Math.round(d[`Required HC||${lob}`]||0)}</td>`); html += `</tr>`;
                html += `<tr><td>FTE Available</td>`; structuredData.forEach(d => html += `<td>${Math.round(d[`Available HC||${lob}`]||0)}</td>`); html += `</tr>`;
                html += `<tr><td>Delta</td>`; structuredData.forEach(d => html += `<td>${(Math.round(d[`Available HC||${lob}`]||0)-Math.round(d[`Required HC||${lob}`]||0))}</td>`); html += `</tr>`;
                html += `<tr><td>Staffing %</td>`; structuredData.forEach(d => {
                    const req = Number(d[`Required HC||${lob}`]||0);
                    const ava = Number(d[`Available HC||${lob}`]||0);
                    const pct = req===0?0:((ava/req)*100).toFixed(2);
                    let color='bg-success'; if(pct<80) color='bg-danger'; else if(pct<100) color='bg-warning';
                    html+=`<td class="${color}" style="color:white;text-align:center;">${pct}%</td>`;
                }); html += `</tr>`;
            });
            html += `</tbody></table>`;
            $analyticsSummary.html(html);

            $('#lobStaffingTable th, #lobStaffingTable td').css({'text-align':'center'});
            $('#lobStaffingTable th:nth-child(1), #lobStaffingTable td:nth-child(1), #lobStaffingTable th:nth-child(2), #lobStaffingTable td:nth-child(2)').css({
                'position':'sticky','left':'0','background-color':'#fff','z-index':'2'
            });
            $('#lobStaffingTable thead').css({'position':'sticky','top':'0','background-color':'#fff','z-index':'3'});
        };

        // Charts rendering
        const renderCharts = () => {
            $chartsContainer.empty();
            const { filteredData, selectedLOBs } = getFilteredData();
            if(!filteredData.length) { $chartsContainer.html('<p>No data for selected weeks/LOBs.</p>'); return; }

            const labels = filteredData.map(d=>d.Week);

            const metricColors = {
                "Required HC":"#007bff","Available HC":"#28a745","Actual Hours":"#17a2b8","Forecasted Hours":"#ffc107",
                "Planned Shrinkage":"#6f42c1","Actual Shrinkage":"#fd7e14","Planned Attrition":"#e83e8c","Actual Attrition":"#20c997",
                "Planned AHT":"#6610f2","Actual AHT":"#fd3955"
            };

            selectedLOBs.forEach(lob=>{
                // Required vs Available HC + Staffing %
                createChart('line','Required vs Available HC + Staffing %',['Required HC','Available HC','Staffing %'],[lob],true);
                // Actual vs Forecasted Hours
                createChart('line','Actual vs Forecasted Hours',['Actual Hours','Forecasted Hours'],[lob]);
                // Shrinkage %
                createChart('area','Planned vs Actual Shrinkage (%)',['Planned Shrinkage','Actual Shrinkage'],[lob],true);
                // Attrition %
                createChart('area','Planned vs Actual Attrition (%)',['Planned Attrition','Actual Attrition'],[lob],true);
                // Planned vs Actual AHT
                createChart('bar','Planned vs Actual AHT',['Planned AHT','Actual AHT'],[lob]);
            });

            function createChart(type,title,metrics,lobs,showPercent=false){
                $chartsContainer.append(`<div class="card mb-4 shadow-sm border rounded bg-light" style="width:100%; max-width:900px;"><div class="card-body text-center"><h6 class="card-title fw-bold">${title}</h6><canvas></canvas></div></div>`);
                const ctx=$chartsContainer.find('canvas').last()[0].getContext('2d');
                const datasets=[];
                metrics.forEach(metric=>{
                    lobs.forEach(lob=>{
                        let data=[];
                        filteredData.forEach(d=>{
                            if(metric==='Staffing %') data.push(((d['Available HC||'+lob]||0)/(d['Required HC||'+lob]||1)*100).toFixed(2));
                            else if(showPercent&&(metric.toLowerCase().includes('shrinkage')||metric.toLowerCase().includes('attrition')))
                                data.push(((d[`${metric}||${lob}`]||0)*100).toFixed(2));
                            else data.push(d[`${metric}||${lob}`]||0);
                        });
                        datasets.push({
                            label:metric==='Staffing %'?'Staffing %':`${lob} - ${metric}`,
                            data:data,
                            borderColor:metric==='Staffing %'?'#000000':metricColors[metric],
                            backgroundColor:metric==='Staffing %'?'rgba(0,0,0,0.1)':metricColors[metric]+'55',
                            fill:type==='area'?true:false,
                            borderDash:metric==='Staffing %'?[5,5]:[],
                            yAxisID:metric==='Staffing %'?'y1':'y'
                        });
                    });
                });
                new Chart(ctx,{
                    type:type==='area'?'line':type,
                    data:{labels,datasets},
                    options:{
                        responsive:true,
                        maintainAspectRatio:false,
                        plugins:{
                            legend:{position:'bottom'},
                            tooltip:{
                                mode:'index',
                                intersect:false,
                                callbacks:{
                                    label:function(context){
                                        let val=context.raw;
                                        if(context.dataset.label.includes('Staffing %')||context.dataset.label.toLowerCase().includes('shrinkage')||context.dataset.label.toLowerCase().includes('attrition')) return context.dataset.label+': '+Number(val).toFixed(2)+'%';
                                        return context.dataset.label+': '+Number(val).toLocaleString();
                                    }
                                }
                            }
                        },
                        scales:{
                            y:{beginAtZero:true,title:{display:true,text:'Value'}},
                            y1:{position:'right',beginAtZero:true,title:{display:true,text:'Staffing %'},grid:{drawOnChartArea:false}}
                        }
                    }
                });
            }
        };

        const getFilteredData = () => {
            const fromWeek = $('#fromWeek').val();
            const toWeek = $('#toWeek').val();
            const selectedLOBs = getSelectedLOBs();
            const filteredData = structuredData.filter(d=>parseWeek(d.Week)>=parseWeek(fromWeek)&&parseWeek(d.Week)<=parseWeek(toWeek));
            return { filteredData, selectedLOBs };
        };

        $('#applyFilter').on('click',function(){ generateSummary(); renderCharts(); });
        $('#analyticsModal').modal('show');
        if(settings.defaultMode==='staffing') generateSummary(); else renderCharts();

        return this;
    };
})(jQuery);
