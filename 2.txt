async function tryLockDocument() {
    try {
        const canEdit = await connection.invoke("TryLockDocument", documentId, userId);
        hasEditLock = canEdit;
        updateUI();

        // Get lock owner info
        const owner = await connection.invoke("GetLockOwner", documentId);
        displayLockOwner(owner);

        if (canEdit && !keepAliveInterval) {
            keepAliveInterval = setInterval(() => {
                connection.invoke("RefreshLock", documentId, userId);
            }, 30000);
        } else if (!canEdit && keepAliveInterval) {
            clearInterval(keepAliveInterval);
            keepAliveInterval = null;
        }
    } catch (err) {
        console.error("Lock request failed:", err);
    }
}

function displayLockOwner(owner) {
    if (owner) {
        if (owner === userId) {
            $("#lockInfo").text("You have edit access.");
        } else {
            $("#lockInfo").text(`Locked by ${owner}`);
        }
    } else {
        $("#lockInfo").text("No one has locked this document.");
    }
}



using Microsoft.AspNetCore.SignalR;
using System;
using System.Collections.Concurrent;
using System.Linq;
using System.Threading.Tasks;

public class DocumentHub : Hub
{
    // Store document locks: documentId â†’ (userId, lockTime)
    private static readonly ConcurrentDictionary<string, (string UserId, DateTime LockTime)> _locks
        = new ConcurrentDictionary<string, (string, DateTime)>();

    // Try to lock document
    public Task<bool> TryLockDocument(string documentId, string userId)
    {
        if (_locks.TryGetValue(documentId, out var lockInfo))
        {
            if (lockInfo.UserId == userId)
            {
                _locks[documentId] = (userId, DateTime.UtcNow);
                return Task.FromResult(true);
            }
            return Task.FromResult(false);
        }

        _locks[documentId] = (userId, DateTime.UtcNow);
        return Task.FromResult(true);
    }

    // Unlock explicitly
    public Task UnlockDocument(string documentId, string userId)
    {
        if (_locks.TryGetValue(documentId, out var lockInfo) && lockInfo.UserId == userId)
        {
            _locks.TryRemove(documentId, out _);
        }
        return Task.CompletedTask;
    }

    // Keep-alive
    public Task RefreshLock(string documentId, string userId)
    {
        if (_locks.TryGetValue(documentId, out var lockInfo) && lockInfo.UserId == userId)
        {
            _locks[documentId] = (userId, DateTime.UtcNow);
        }
        return Task.CompletedTask;
    }

    // ðŸ”¥ NEW: Get lock owner for a document
    public Task<string> GetLockOwner(string documentId)
    {
        if (_locks.TryGetValue(documentId, out var lockInfo))
        {
            return Task.FromResult(lockInfo.UserId);
        }
        return Task.FromResult<string>(null);
    }

    // Cleanup locks if user disconnects
    public override Task OnDisconnectedAsync(Exception exception)
    {
        var locksToRemove = _locks.Where(kv => kv.Value.UserId == Context.ConnectionId).Select(kv => kv.Key).ToList();
        foreach (var key in locksToRemove)
        {
            _locks.TryRemove(key, out _);
        }
        return base.OnDisconnectedAsync(exception);
    }
}

