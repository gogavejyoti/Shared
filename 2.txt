function On(e, n, t, l) {
    l = l || h.currentSheetIndex;

    if ((e == "row" && !It(l, "deleteRows")) || (e == "column" && !It(l, "deleteColumns"))) return;

    let a = K(l),
        o = h.luckysheetfile[a],
        s = $.extend(true, [], o.data);

    if (n < 0) n = 0;
    if (t < 0) t = 0;

    if (e == "row") {
        n = Math.min(n, s.length - 1);
        t = Math.min(t, s.length - 1);
    } else {
        n = Math.min(n, s[0].length - 1);
        t = Math.min(t, s[0].length - 1);
    }

    if (n > t) return;

    let u = t - n + 1;
    let d = $.extend(true, {}, o.config);
    d.merge = d.merge || {};

    // --- Merge handling ---
    let f = {};
    for (let F in d.merge) {
        let N = d.merge[F],
            D = N.r,
            E = N.c,
            P = N.rs,
            z = N.cs;

        if (e == "row") {
            if (D < n) {
                if (D + P - 1 < n) f[D + "_" + E] = { r: D, c: E, rs: P, cs: z };
                else if (D + P - 1 >= n && D + P - 1 < t) f[D + "_" + E] = { r: D, c: E, rs: n - D, cs: z };
                else f[D + "_" + E] = { r: D, c: E, rs: P - u, cs: z };
            } else if (D >= n && D <= t) {
                if (D + P - 1 > t) f[n + "_" + E] = { r: n, c: E, rs: D + P - 1 - t, cs: z };
            } else if (D > t) f[D - u + "_" + E] = { r: D - u, c: E, rs: P, cs: z };
        } else {
            // column
            if (E < n) {
                if (E + z - 1 < n) f[D + "_" + E] = { r: D, c: E, rs: P, cs: z };
                else if (E + z - 1 >= n && E + z - 1 < t) f[D + "_" + E] = { r: D, c: E, rs: P, cs: n - E };
                else f[D + "_" + E] = { r: D, c: E, rs: P, cs: z - u };
            } else if (E >= n && E <= t) {
                if (E + z - 1 > t) f[D + "_" + n] = { r: D, c: n, rs: P, cs: E + z - 1 - t };
            } else if (E > t) f[D + "_" + (E - u)] = { r: D, c: E - u, rs: P, cs: z };
        }
    }
    d.merge = f;

    // --- CalcChain handling with defensive fix ---
    let m = o.calcChain,
        g = [];

    function _normalizeFormula(f) {
        if (!f) return f;
        return (f[0] === '=' ? f.slice(1) : f).trim();
    }

    if (m != null && m.length > 0) {
        for (let F = 0; F < m.length; F++) {
            let N = $.extend(true, {}, m[F]),
                D = N.r,
                E = N.c,
                P = N.index,
                z = zl(D, E, P);

            if (!z) continue;

            if (e == "row") {
                if (D < n || D > t) {
                    let cellF = s[D] && s[D][E] && s[D][E].f ? s[D][E].f : z;
                    let baseFormula = _normalizeFormula(cellF || z);

                    let O = "=" + p.functionStrChange(baseFormula, "del", "row", null, n, u);

                    if (s[D] && s[D][E]) s[D][E].f = O;

                    if (D > t) N.r = D - u;

                    g.push(N);
                }
            } else if (e == "column") {
                if (E < n || E > t) {
                    let cellF = s[D] && s[D][E] && s[D][E].f ? s[D][E].f : z;
                    let baseFormula = _normalizeFormula(cellF || z);

                    let O = "=" + p.functionStrChange(baseFormula, "del", "col", null, n, u);

                    if (s[D] && s[D][E]) s[D][E].f = O;

                    if (E > t) N.c = E - u;

                    g.push(N);
                }
            }
        }
    }

    // --- Filter adjustments ---
    let y = o.filter_select,
        v = o.filter,
        k = null;

    if (y != null && JSON.stringify(y) !== "{}") {
        k = { filter_select: null, filter: null };
        let F = y.row[0], N = y.row[1], D = y.column[0], E = y.column[1];

        if (e == "row") {
            if (F > t) { F -= u; N -= u; k.filter_select = { row: [F, N], column: [D, E] }; }
            else if (F < n) { if (N <= t) N = n - 1; else N -= u; k.filter_select = { row: [F, N], column: [D, E] }; }

            if (k.filter_select && v) {
                for (let P in v) {
                    let z = v[P].rowhidden, O = {};
                    for (let V in z) V < n ? O[V] = 0 : V > t && (O[V - u] = 0);
                    if (JSON.stringify(O) !== "{}") { k.filter = k.filter || {}; k.filter[P] = $.extend(true, {}, v[P]); k.filter[P].rowhidden = O; k.filter[P].str = F; k.filter[P].edr = N; }
                }
            }
        } else {
            // column
            if (D > t) { D -= u; E -= u; k.filter_select = { row: [F, N], column: [D, E] }; }
            else if (D < n) { if (E <= t) E = n - 1; else E -= u; k.filter_select = { row: [F, N], column: [D, E] }; }
            else if (E > t) { D = n; E -= u; k.filter_select = { row: [F, N], column: [D, E] }; }

            if (k.filter_select && v) {
                for (let P in v) {
                    let z = v[P].cindex;
                    if (z < n) { k.filter = k.filter || {}; k.filter[z - D] = $.extend(true, {}, v[P]); k.filter[z - D].edc = E; }
                    else if (z > t) { z -= u; k.filter = k.filter || {}; k.filter[z - D] = $.extend(true, {}, v[P]); k.filter[z - D].cindex = z; k.filter[z - D].stc = D; k.filter[z - D].edc = E; }
                }
            }
        }
    }

    if (k && k.filter) {
        d.rowhidden = d.rowhidden || {};
        for (let F in k.filter) {
            let N = k.filter[F].rowhidden;
            for (let D in N) d.rowhidden[D] = 0;
        }
    }

    // --- Conditional formatting and alternate formatting ---
    let b = o.luckysheet_conditionformat_save, w = [];
    if (b) {
        for (let F = 0; F < b.length; F++) {
            let N = b[F].cellrange, D = [];
            for (let E = 0; E < N.length; E++) {
                let P = N[E].row[0], z = N[E].row[1], O = N[E].column[0], V = N[E].column[1];
                if (e == "row") {
                    if (!(P >= n && z <= t)) {
                        if (P > t) { P -= u; z -= u; }
                        else if (P < n) { if (z <= t) z = n - 1; else z -= u; } 
                        else if (z > t) { P = n; z -= u; }
                        D.push({ row: [P, z], column: [O, V] });
                    }
                } else if (e == "column") {
                    if (!(O >= n && V <= t)) {
                        if (O > t) { O -= u; V -= u; }
                        else if (O < n) { if (V <= t) V = n - 1; else V -= u; } 
                        else if (V > t) { O = n; V -= u; }
                        D.push({ row: [P, z], column: [O, V] });
                    }
                }
            }
            if (D.length) { let E = $.extend(true, {}, b[F]); E.cellrange = D; w.push(E); }
        }
    }

    let x = o.luckysheet_alternateformat_save, C = [];
    if (x) {
        for (let F = 0; F < x.length; F++) {
            let N = x[F].cellrange.row[0], D = x[F].cellrange.row[1], E = x[F].cellrange.column[0], P = x[F].cellrange.column[1];
            if (e == "row") {
                if (!(N >= n && D <= t)) {
                    let z = $.extend(true, {}, x[F]);
                    if (N > t) { N -= u; D -= u; }
                    else if (N < n) { if (D <= t) D = n - 1; else D -= u; }
                    else if (D > t) { N = n; D -= u; }
                    z.cellrange.row = [N, D]; C.push(z);
                }
            } else if (e == "column") {
                if (!(E >= n && P <= t)) {
                    let z = $.extend(true, {}, x[F]);
                    if (E > t) { E -= u; P -= u; }
                    else if (E < n) { if (P <= t) P = n - 1; else P -= u; }
                    else if (P > t) { E = n; P -= u; }
                    z.cellrange.column = [E, P]; C.push(z);
                }
            }
        }
    }

    // --- Save back ---
    o.data = s;
    o.calcChain = g;
    o.config = d;
    o.luckysheet_conditionformat_save = w;
    o.luckysheet_alternateformat_save = C;
}
