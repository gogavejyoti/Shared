getAllDependentSheetsFromSheet: function (sheetIndex, formulaOrValue) {
    // --- Step 1: Initialize global cache if missing ---
    if (!window.luckysheet_dependentsheets_cache) {
        window.luckysheet_dependentsheets_cache = {};
    }

    const allSheets = Ft() || [];
    const validSheetIndexes = new Set(allSheets.map(s => s.index));

    // --- Step 2: Ensure cache entry exists for this sheet ---
    if (!window.luckysheet_dependentsheets_cache[sheetIndex]) {
        window.luckysheet_dependentsheets_cache[sheetIndex] = [];
    }

    // --- Step 3: If formula contains cross-sheet refs, update dependency cache ---
    if (formulaOrValue && typeof formulaOrValue === "string" && formulaOrValue.includes("!")) {
        const matches = formulaOrValue.matchAll(/(?:'([^']+)'|([A-Za-z0-9_]+))!/g);
        for (const match of matches) {
            const refSheetName = match[1] || match[2];
            const refSheet = allSheets.find(s => s.name === refSheetName);
            if (refSheet && refSheet.index !== sheetIndex) {
                // refSheet is referenced by current sheet → add current sheet to refSheet’s dependents
                if (!window.luckysheet_dependentsheets_cache[refSheet.index]) {
                    window.luckysheet_dependentsheets_cache[refSheet.index] = [];
                }
                const depSet = new Set(window.luckysheet_dependentsheets_cache[refSheet.index]);
                depSet.add(sheetIndex);
                window.luckysheet_dependentsheets_cache[refSheet.index] = Array.from(depSet);
            }
        }
    }

    // --- Step 4: Clean up invalid sheet indexes in the entire cache ---
    for (const [idx, deps] of Object.entries(window.luckysheet_dependentsheets_cache)) {
        const filtered = deps.filter(d => validSheetIndexes.has(d));
        if (filtered.length > 0) {
            window.luckysheet_dependentsheets_cache[idx] = filtered;
        } else {
            delete window.luckysheet_dependentsheets_cache[idx];
        }
    }

    // --- Step 5: Build direct dependency map ---
    const directDeps = new Map();
    for (const [idx, deps] of Object.entries(window.luckysheet_dependentsheets_cache)) {
        directDeps.set(parseInt(idx), new Set(deps));
    }

    // --- Step 6: Recursively gather all indirect dependents ---
    const visited = new Set();
    const traverse = (idx) => {
        if (visited.has(idx)) return;
        visited.add(idx);
        const direct = directDeps.get(idx);
        if (direct) {
            for (const d of direct) traverse(d);
        }
    };
    traverse(sheetIndex);

    // --- Step 7: Include the current sheet itself ---
    visited.add(sheetIndex);

    // --- Step 8: Prepare result and update cache ---
    const result = Array.from(visited).filter(idx => validSheetIndexes.has(idx));
    window.luckysheet_dependentsheets_cache[sheetIndex] = result;

    return result;
},
