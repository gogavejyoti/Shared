function findRowForMetric(sheetObj, lob, metricName) {
    if (!sheetObj || !window.sheetConfigs || !window.sheetConfigs[lob]) return null;

    const cfg = window.sheetConfigs[lob];
    const headerMappings = cfg.headerMappings || {};
    const sheetData = sheetObj.data || [];

    // Identify planned key for simulated metrics
    let plannedKey = metricName;
    if (metricName.toLowerCase().includes("simulated shrinkage")) {
        plannedKey = "Planned Shrinkage";
    } else if (metricName.toLowerCase().includes("simulated attrition")) {
        plannedKey = "Planned Attrition";
    }

    // If mapping exists for plannedKey, use it
    const targetHeaderLabel =
        headerMappings[plannedKey] ||
        headerMappings[metricName] || // direct match (for non-simulated metrics)
        null;

    if (!targetHeaderLabel) {
        console.warn(`No header mapping found for ${metricName} in ${lob}`);
        return null;
    }

    // Determine column index for header search
    let headerColIndex = 0;
    if (cfg.headerCol) {
        if (isNaN(cfg.headerCol))
            headerColIndex = cfg.headerCol.toUpperCase().charCodeAt(0) - 65; // A→0, B→1
        else headerColIndex = parseInt(cfg.headerCol) - 1;
    }

    // Search the specified column for targetHeaderLabel
    for (let r = 0; r < sheetData.length; r++) {
        const cell = sheetData[r] && sheetData[r][headerColIndex];
        const cellText = cell ? (cell.m || cell.v || "").toString().trim() : "";
        if (!cellText) continue;
        if (
            cellText.toLowerCase() === targetHeaderLabel.toLowerCase() ||
            cellText.toLowerCase().includes(targetHeaderLabel.toLowerCase())
        ) {
            return r; // found row
        }
    }

    console.warn(`Row not found for ${metricName} → ${targetHeaderLabel} in ${lob}`);
    return null;
}
