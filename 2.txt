function calcSimulated(d) {
    if (!d) return {};
    const key = `${d.lob}_${d.week}`;
    const orig = originalMetrics[key];
    const shrink = simulatedValues[`${key}_shrink`] ?? 0;
    const attr = simulatedValues[`${key}_attr`] ?? 0;

    // If simulation matches planned, just return original metrics
    if (shrink === orig.plannedShrinkage && attr === (orig.plannedAttrition ?? 0)) {
        return {
            'FTE Required': orig.fteRequired,
            'FTE Available': orig.fteAvailable,
            'Delta': orig.delta,
            'Staffing %': orig.staffingPct,
            'Simulated Shrinkage %': shrink,
            'Simulated Attrition %': attr
        };
    }

    let simFTEReq = Math.round(orig.fteRequired * (1 + (shrink - orig.plannedShrinkage) / 100));
    let simFTEAvail = Math.round(orig.fteAvailable * (1 + (orig.plannedAttrition - attr) / 100));
    let simDelta = Math.round(simFTEAvail - simFTEReq);
    let simStaffing = simFTEReq !== 0 ? Math.round((simFTEAvail / simFTEReq) * 100) : 'NA';

    return {
        'FTE Required': simFTEReq,
        'FTE Available': simFTEAvail,
        'Delta': simDelta,
        'Staffing %': simStaffing,
        'Simulated Shrinkage %': shrink,
        'Simulated Attrition %': attr
    };
}
