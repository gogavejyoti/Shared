(function ($) {
    $.fn.weekAnalyticsPopup = function (options) {
        const settings = $.extend({
            data: [],
            weekStartDay: 'sunday' // or 'monday'
        }, options);

        $('#analyticsModal').remove();

        // Inject necessary styles
        const styles = `
        <style>
            #chartsContainer {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 20px;
            }
            #chartsContainer canvas {
                width: 100% !important;
                max-width: 800px;
                height: 400px !important;
            }
        </style>`;
        $('head').append(styles);

        const modalHTML = `
        <div class="modal fade" id="analyticsModal" tabindex="-1">
          <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
              <div class="modal-header bg-gradient-primary text-white">
                <h5 class="modal-title">Workforce Analytics Dashboard</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <div class="filters mb-3 p-3 border rounded bg-light">
                  <label>From Week: 
                    <select id="fromWeek" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label class="ms-3">To Week: 
                    <select id="toWeek" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label class="ms-3">LOB: 
                    <select id="lobSelect" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label class="ms-3">
                    <input type="checkbox" id="comparisonMode"> Comparison Mode
                  </label>
                  <button id="applyFilter" class="btn btn-primary btn-sm ms-3">Apply Filter</button>
                  <button id="exportCsv" class="btn btn-secondary btn-sm ms-2">Export CSV</button>
                </div>
                <div id="chartsContainer" class="mt-3"></div>
                <div id="analyticsSummary" class="mt-4"></div>
              </div>
            </div>
          </div>
        </div>`;

        $('body').append(modalHTML);

        const $chartsContainer = $('#chartsContainer');
        const $analyticsSummary = $('#analyticsSummary');

        const parseWeek = (weekStr) => {
            const [dd, mmm, yy] = weekStr.split('-');
            return new Date(`${mmm} ${dd}, 20${yy}`);
        };

        const formatWeek = (date) => {
            const dd = String(date.getDate()).padStart(2, '0');
            const mmm = date.toLocaleString('default', { month: 'short' });
            const yy = String(date.getFullYear()).slice(-2);
            return `${dd}-${mmm}-${yy}`;
        };

        const getCurrentWeek = () => {
            const today = new Date();
            const dayOfWeek = today.getDay();
            const diff = settings.weekStartDay === 'sunday' ? dayOfWeek : (dayOfWeek + 6) % 7;
            const lastWeekDate = new Date(today);
            lastWeekDate.setDate(today.getDate() - diff);
            return formatWeek(lastWeekDate);
        };

        const structuredData = (() => {
            const grouped = {};
            settings.data.forEach(item => {
                if (!grouped[item.week]) grouped[item.week] = { Week: item.week };
                grouped[item.week][`${item.header}||${item.sheetName}`] = item.value;
            });
            return Object.values(grouped).sort((a, b) => parseWeek(a.Week) - parseWeek(b.Week));
        })();

        const uniqueLOBs = [...new Set(settings.data.map(d => d.sheetName))].sort();
        const uniqueHeaders = [...new Set(settings.data.map(d => d.header))].sort();
        const uniqueWeeks = [...new Set(settings.data.map(d => d.week))]
            .sort((a, b) => parseWeek(a) - parseWeek(b));

        uniqueLOBs.forEach(lob => $('#lobSelect').append(`<option value="${lob}">${lob}</option>`));
        uniqueHeaders.forEach(header => $('#headerSelect').append(`<option value="${header}">${header}</option>`));
        uniqueWeeks.forEach(week => {
            $('#fromWeek').append(`<option value="${week}">${week}</option>`);
            $('#toWeek').append(`<option value="${week}">${week}</option>`);
        });

        const currentWeek = getCurrentWeek();
        const currentIndex = uniqueWeeks.indexOf(currentWeek);
        const fallbackIndex = currentIndex >= 0 ? currentIndex : uniqueWeeks.length - 1;

        const fromIndex = Math.max(0, fallbackIndex - 6);
        const toIndex = Math.min(uniqueWeeks.length - 1, fallbackIndex + 6);

        $('#fromWeek').val(uniqueWeeks[fromIndex]);
        $('#toWeek').val(uniqueWeeks[toIndex]);
        $('#lobSelect').val(uniqueLOBs[0]);

        const metricColors = {
            "Required HC": "#007bff",
            "Available HC": "#28a745",
            "Actual Hours": "#17a2b8",
            "Forecasted Hours": "#ffc107",
            "Planned Shrinkage": "#6f42c1",
            "Actual Shrinkage": "#fd7e14",
            "Planned Attrition": "#e83e8c",
            "Actual Attrition": "#20c997",
            "Planned AHT": "#6610f2",
            "Actual AHT": "#fd3955"
        };

        const filterData = () => {
            const fromWeek = $('#fromWeek').val();
            const toWeek = $('#toWeek').val();
            const selectedLOB = $('#lobSelect').val() || uniqueLOBs[0];
            const isComparison = $('#comparisonMode').is(':checked');

            const filtered = structuredData.filter(d =>
                parseWeek(d.Week) >= parseWeek(fromWeek) &&
                parseWeek(d.Week) <= parseWeek(toWeek)
            ).slice(-12);

            return { filtered, selectedLOB, isComparison };
        };

        const generateSummary = (filtered, selectedLOB, isComparison) => {
            let summaryHTML = '<h5>Summary Analytics</h5><ul>';
            const lobsToSummarize = isComparison ? uniqueLOBs : [selectedLOB];
            uniqueHeaders.forEach(header => {
                lobsToSummarize.forEach(lob => {
                    let total = filtered.reduce((sum, d) => sum + Number(d[`${header}||${lob}`] || 0), 0);
                    if (header.toLowerCase().includes('shrinkage') || header.toLowerCase().includes('attrition')) {
                        total = (total * 100).toFixed(2) + '%';
                    }
                    summaryHTML += `<li><strong>${lob}</strong> - <em>${header}</em>: ${total}</li>`;
                });
            });
            summaryHTML += '</ul>';
            $analyticsSummary.html(summaryHTML);
        };

        const exportCSV = (filtered, selectedLOB, isComparison) => {
            const headers = ['Week', 'LOB', 'Metric', 'Value'];
            let csvContent = headers.join(',') + '\n';
            if (isComparison) {
                filtered.forEach(row => {
                    uniqueLOBs.forEach(lob => {
                        uniqueHeaders.forEach(header => {
                            let value = Number(row[`${header}||${lob}`] || 0);
                            csvContent += `${row.Week},${lob},${header},${value}\n`;
                        });
                    });
                });
            } else {
                filtered.forEach(row => {
                    uniqueHeaders.forEach(header => {
                        let value = Number(row[`${header}||${selectedLOB}`] || 0);
                        csvContent += `${row.Week},${selectedLOB},${header},${value}\n`;
                    });
                });
            }
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'analytics.csv';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        };

        const renderCharts = (filtered, selectedLOB, isComparison) => {
            $chartsContainer.empty();
            const labels = filtered.map(d => d.Week);

            // Line Chart: Actual vs Forecasted Hours
            $chartsContainer.append(`
                <div class="card mb-4 shadow-sm border rounded bg-light" style="width: 100%; max-width: 900px;">
                    <div class="card-body text-center">
                        <h6 class="card-title fw-bold">Actual vs Forecasted Hours</h6>
                        <canvas></canvas>
                    </div>
                </div>`);
            new Chart($chartsContainer.find('canvas').last()[0].getContext('2d'), {
                type: 'line',
                data: {
                    labels,
                    datasets: ['Actual Hours', 'Forecasted Hours'].map(metric => ({
                        label: metric,
                        data: filtered.map(d => d[`${metric}||${selectedLOB}`] || 0),
                        borderColor: metricColors[metric],
                        backgroundColor: metricColors[metric] + '55',
                        fill: false
                    }))
                },
                options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom' }, tooltip: { mode: 'index', intersect: false } } }
            });

            // Bar Chart: Required vs Available HC
            $chartsContainer.append(`
                <div class="card mb-4 shadow-sm border rounded bg-light" style="width: 100%; max-width: 900px;">
                    <div class="card-body text-center">
                        <h6 class="card-title fw-bold">Required HC vs Available HC</h6>
                        <canvas></canvas>
                    </div>
                </div>`);
            new Chart($chartsContainer.find('canvas').last()[0].getContext('2d'), {
                type: 'bar',
                data: {
                    labels,
                    datasets: ['Required HC', 'Available HC'].map(metric => ({
                        label: metric,
                        data: filtered.map(d => d[`${metric}||${selectedLOB}`] || 0),
                        backgroundColor: metricColors[metric]
                    }))
                },
                options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom' }, tooltip: { mode: 'index', intersect: false } } }
            });

            // Area Chart: Shrinkage (%)
            $chartsContainer.append(`
                <div class="card mb-4 shadow-sm border rounded bg-light" style="width: 100%; max-width: 900px;">
                    <div class="card-body text-center">
                        <h6 class="card-title fw-bold">Planned vs Actual Shrinkage (%)</h6>
                        <canvas></canvas>
                    </div>
                </div>`);
            new Chart($chartsContainer.find('canvas').last()[0].getContext('2d'), {
                type: 'line',
                data: {
                    labels,
                    datasets: ['Planned Shrinkage', 'Actual Shrinkage'].map(metric => ({
                        label: metric,
                        data: filtered.map(d => ((d[`${metric}||${selectedLOB}`] || 0) * 100).toFixed(2)),
                        borderColor: metricColors[metric],
                        backgroundColor: metricColors[metric] + '55',
                        fill: true
                    }))
                },
                options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom' }, tooltip: { mode: 'index', intersect: false } } }
            });

            // Area Chart: Attrition (%)
            $chartsContainer.append(`
                <div class="card mb-4 shadow-sm border rounded bg-light" style="width: 100%; max-width: 900px;">
                    <div class="card-body text-center">
                        <h6 class="card-title fw-bold">Planned vs Actual Attrition (%)</h6>
                        <canvas></canvas>
                    </div>
                </div>`);
            new Chart($chartsContainer.find('canvas').last()[0].getContext('2d'), {
                type: 'line',
                data: {
                    labels,
                    datasets: ['Planned Attrition', 'Actual Attrition'].map(metric => ({
                        label: metric,
                        data: filtered.map(d => ((d[`${metric}||${selectedLOB}`] || 0) * 100).toFixed(2)),
                        borderColor: metricColors[metric],
                        backgroundColor: metricColors[metric] + '55',
                        fill: true
                    }))
                },
                options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom' }, tooltip: { mode: 'index', intersect: false } } }
            });

            // Heatmap: Example Metric Distribution (can customize as needed)
            $chartsContainer.append(`
                <div class="card mb-4 shadow-sm border rounded bg-light" style="width: 100%; max-width: 900px;">
                    <div class="card-body text-center">
                        <h6 class="card-title fw-bold">Metric Heatmap</h6>
                        <canvas></canvas>
                    </div>
                </div>`);
            new Chart($chartsContainer.find('canvas').last()[0].getContext('2d'), {
                type: 'bar',
                data: {
                    labels,
                    datasets: uniqueHeaders.map((header, i) => ({
                        label: header,
                        data: filtered.map(d => d[`${header}||${selectedLOB}`] || 0),
                        backgroundColor: metricColors[header] || `hsl(${(i * 30) % 360}, 70%, 50%)`
                    }))
                },
                options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom' }, tooltip: { mode: 'index', intersect: false } } }
            });
        };

        const applyFilters = () => {
            const { filtered, selectedLOB, isComparison } = filterData();
            renderCharts(filtered, selectedLOB, isComparison);
            generateSummary(filtered, selectedLOB, isComparison);
        };

        $('#applyFilter').off('click').on('click', applyFilters);
        $('#exportCsv').off('click').on('click', () => {
            const { filtered, selectedLOB, isComparison } = filterData();
            exportCSV(filtered, selectedLOB, isComparison);
        });

        applyFilters();
        $('#analyticsModal').modal('show');

        return this;
    };
})(jQuery);
