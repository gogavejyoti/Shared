<!-- Container -->
<div id="geoShrinkageDonut" style="max-width: 600px; margin: auto;"></div>

<!-- ApexCharts CDN -->
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

<script>
function renderGeoWiseShrinkageDonut(containerId, rawData) {
  // Step 1: Aggregate Actual Shrinkage Geo-wise
  const geoData = {};

  rawData.forEach(item => {
    if (!geoData[item.geo]) {
      geoData[item.geo] = { totalHC: 0, weightedShrink: 0 };
    }
    geoData[item.geo].totalHC += item.availableHC || 0;
    geoData[item.geo].weightedShrink += (item.availableHC || 0) * (item.actualShrinkage || 0);
  });

  const labels = [];
  const values = [];

  Object.keys(geoData).forEach(geo => {
    const { totalHC, weightedShrink } = geoData[geo];
    const avgShrink = totalHC === 0 ? 0 : (weightedShrink / totalHC) * 100; // %
    labels.push(geo);
    values.push(parseFloat(avgShrink.toFixed(2)));
  });

  // Step 2: Render Donut with ApexCharts
  const options = {
    chart: {
      type: 'donut',
      height: 400
    },
    labels: labels,
    series: values,
    title: {
      text: 'Geo-wise Actual Shrinkage',
      align: 'center',
      style: {
        fontSize: '18px',
        fontWeight: 'bold'
      }
    },
    dataLabels: {
      enabled: true,
      formatter: function (val) {
        return val.toFixed(1) + "%";
      }
    },
    tooltip: {
      y: {
        formatter: function (val) {
          return val.toFixed(2) + "%";
        }
      }
    },
    legend: {
      position: 'bottom'
    },
    plotOptions: {
      pie: {
        donut: {
          size: '60%'
        }
      }
    }
  };

  const chart = new ApexCharts(document.querySelector(`#${containerId}`), options);
  chart.render();
}
</script>
