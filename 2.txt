<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>jQuery Dashboard Plugin</title>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; background:#f5f6fa; }
    .dashboard-container { background: #fff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); padding: 20px; }
    .dashboard-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }
    .dashboard-logo { font-weight: bold; font-size: 18px; color:#3f51b5; }
    .filters { display: flex; gap: 10px; }
    .filters select, .filters button { padding: 6px 10px; border:1px solid #ccc; border-radius: 6px; }
    .tiles { display: flex; gap: 15px; margin-bottom: 20px; flex-wrap: wrap; }
    .tile { flex: 1; min-width: 150px; background: #fafafa; border-radius: 10px; padding: 15px; box-shadow: 0 2px 6px rgba(0,0,0,0.05); text-align:center; }
    .tile-value { font-size: 20px; font-weight: bold; color:#3f51b5; }
    .tile-label { font-size: 12px; color:#666; }
    .charts-grid { display: grid; grid-template-columns: 1fr 1fr; grid-gap: 20px; }
    .chart-card { background: #fff; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.05); padding: 10px; }
    .chart-card canvas { width:100% !important; height:220px !important; }
    .mode-toggle { margin-left: 15px; cursor: pointer; padding:6px 12px; border-radius:6px; background:#e0e7ff; border:1px solid #c7d2fe; }
  </style>
</head>
<body>
  <div id="myDashboard"></div>

  <script>
  (function($){
    $.fn.dashboardPlugin = function(options){
      let settings = $.extend({ data: [] }, options);
      let container = $(this);
      let charts = [];
      let comparisonMode = false;

      // Helpers
      function getUniqueValues(field){
        return [...new Set(settings.data.map(d => d[field]))].filter(v=>v);
      }
      function getWeeksSorted(){
        return [...new Set(settings.data.map(d=>d.Week))].sort((a,b)=> new Date(a)-new Date(b));
      }
      function buildFilters(){
        let html = `
          <div class="dashboard-header">
            <div class="dashboard-logo">ðŸ“Š My Dashboard</div>
            <div class="filters">
              <select id="filter-geo"><option value="">Geo</option></select>
              <select id="filter-site"><option value="">Site</option></select>
              <select id="filter-lob" multiple><option value="">LOB</option></select>
              <select id="filter-fromweek"><option value="">From Week</option></select>
              <select id="filter-toweek"><option value="">To Week</option></select>
              <button id="btn-refresh">ðŸ”„ Refresh</button>
              <button id="btn-mode" class="mode-toggle">Comparison: Off</button>
            </div>
          </div>`;
        container.append(html);
        // populate dropdowns
        getUniqueValues("Geo").forEach(v=>$("#filter-geo").append(`<option>${v}</option>`));
        getUniqueValues("Site").forEach(v=>$("#filter-site").append(`<option>${v}</option>`));
        getUniqueValues("LOB").forEach(v=>$("#filter-lob").append(`<option>${v}</option>`));
        getWeeksSorted().forEach(v=>{
          $("#filter-fromweek").append(`<option>${v}</option>`);
          $("#filter-toweek").append(`<option>${v}</option>`);
        });
      }
      function buildTiles(metrics){
        let html = `<div class="tiles">`;
        Object.keys(metrics).forEach(k=>{
          html += `<div class="tile"><div class="tile-value">${metrics[k]}</div><div class="tile-label">${k}</div></div>`;
        });
        html += `</div>`;
        container.append(html);
      }
      function buildCharts(filtered){
        let headers = Object.keys(filtered[0]||{}).filter(k=>!["Geo","Site","LOB","Week","Month"].includes(k));
        let chartContainer = $('<div class="charts-grid"></div>');
        headers.slice(0,6).forEach((metric,i)=>{
          let card = $('<div class="chart-card"><canvas id="chart'+i+'"></canvas></div>');
          chartContainer.append(card);
          setTimeout(()=> renderChart("chart"+i, filtered, metric), 100);
        });
        container.append(chartContainer);
      }
      function renderChart(id, data, metric){
        let ctx = document.getElementById(id).getContext('2d');
        if(charts[id]) charts[id].destroy();
        let weeks = [...new Set(data.map(d=>d.Week))];
        let datasets = [];
        if(comparisonMode){
          let lobs = getUniqueValues("LOB");
          lobs.forEach(lob=>{
            let lobData = data.filter(d=>d.LOB==lob);
            datasets.push({
              label: lob,
              data: weeks.map(w=> (lobData.find(d=>d.Week==w)||{})[metric] || 0),
              borderWidth:2, fill:false
            });
          });
        } else {
          datasets.push({
            label: metric,
            data: weeks.map(w=> (data.find(d=>d.Week==w)||{})[metric] || 0),
            borderWidth:2, backgroundColor:'rgba(63,81,181,0.4)', borderColor:'#3f51b5', fill:true
          });
        }
        charts[id] = new Chart(ctx, {
          type: comparisonMode ? 'line':'bar',
          data: { labels: weeks, datasets: datasets },
          options: { responsive:true, plugins:{ legend:{ position:'top' }}, scales:{ y:{ beginAtZero:true } } }
        });
      }
      function refresh(){
        container.find(".tiles, .charts-grid").remove();
        let geo=$("#filter-geo").val(), site=$("#filter-site").val(), lobs=$("#filter-lob").val()||[], from=$("#filter-fromweek").val(), to=$("#filter-toweek").val();
        let filtered = settings.data.filter(d=>{
          return (!geo||d.Geo==geo) && (!site||d.Site==site) && (!lobs.length||lobs.includes(d.LOB));
        });
        if(from && to){
          let weeks=getWeeksSorted();
          let fromIdx=weeks.indexOf(from), toIdx=weeks.indexOf(to);
          let allowed=weeks.slice(Math.min(fromIdx,toIdx), Math.max(fromIdx,toIdx)+1);
          filtered=filtered.filter(d=>allowed.includes(d.Week));
        }
        // aggregate metrics for tiles
        let sample=filtered[0]||{};
        let metrics={};
        Object.keys(sample).forEach(k=>{
          if(!["Geo","Site","LOB","Week","Month"].includes(k)){
            metrics[k]= filtered.reduce((a,b)=>a+(+b[k]||0),0);
          }
        });
        buildTiles(metrics);
        buildCharts(filtered);
      }
      // init
      container.addClass("dashboard-container");
      buildFilters();
      refresh();
      // events
      $("#btn-refresh").on("click", refresh);
      $("#btn-mode").on("click", function(){
        comparisonMode=!comparisonMode;
        $(this).text("Comparison: " + (comparisonMode?"On":"Off"));
        refresh();
      });
    };
  })(jQuery);

  // ===== Sample Data =====
  const sampleData = [
    {Geo:"US",Site:"NY",LOB:"Sales",Week:"01-Sep-25",ForecastedHours:1200,ActualHours:1100,Attrition:5,Shrinkage:8},
    {Geo:"US",Site:"NY",LOB:"Sales",Week:"08-Sep-25",ForecastedHours:1300,ActualHours:1250,Attrition:6,Shrinkage:9},
    {Geo:"US",Site:"NY",LOB:"Support",Week:"01-Sep-25",ForecastedHours:800,ActualHours:750,Attrition:4,Shrinkage:7},
    {Geo:"US",Site:"NY",LOB:"Support",Week:"08-Sep-25",ForecastedHours:850,ActualHours:820,Attrition:5,Shrinkage:6},
    {Geo:"India",Site:"Mumbai",LOB:"Sales",Week:"01-Sep-25",ForecastedHours:900,ActualHours:880,Attrition:7,Shrinkage:10},
    {Geo:"India",Site:"Mumbai",LOB:"Sales",Week:"08-Sep-25",ForecastedHours:950,ActualHours:920,Attrition:6,Shrinkage:9}
  ];

  // Init plugin
  $(function(){
    $("#myDashboard").dashboardPlugin({ data: sampleData });
  });
  </script>
</body>
</html>
