(function ($) {
    $.fn.trendAnalytics = function (options) {
        const settings = $.extend({
            data: [], // JSON array
        }, options);

        let filteredTransformedData = settings.data;
        $('#trendAnalyticModal').remove();

        if ($('#trendAnalyticModalStyles').length === 0) {
            $('head').append(`
            <style id="trendAnalyticModalStyles">
                /* Modal Content Styling */
                #trendAnalyticModal .modal-content { border-radius: 12px; box-shadow: 0 8px 20px rgba(0,0,0,0.12); font-family: 'Inter', sans-serif; background: #fafafa; }
                #trendAnalyticModal .modal-header { border-bottom: 1px solid #e0e0e0; background-color: #D7C4F0; color: #2c2c2c; }
                #trendAnalyticModal .modal-title { font-weight: 600; color: #2c2c2c; }
                #trendAnalyticModal .btn-close { filter: invert(30%); }

                /* Table Wrapper */
                #trendAnalyticModal .table-wrapper { overflow-x: auto; overflow-y: auto; max-height: calc(100vh - 120px); position: relative; border: 1px solid #dcdcdc; background: #fff; border-radius: 8px; margin: 10px; }
                #trendAnalyticModal table { border-collapse: collapse; width: max-content; table-layout: auto; }
                #trendAnalyticModal th, #trendAnalyticModal td { padding: 8px; text-align: center; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; border-top: 1px solid #eaeaea; background: #fff; }


                #trendAnalyticModal .simTable thead th { position: sticky;top: 0;background: #fff;z-index: 3;border-top: 2px solid #dee2e6;color: #000;}
                #trendAnalyticModal .simTable th:first-child,.simTable td:first-child {position: sticky;left: 0;background-color: #f8f9fa; z-index: 2;
                #trendAnalyticModal .simTable thead th box-shadow: 2px 0 0 rgba(0,0,0,0.04);color:#000;}
                #trendAnalyticModal .sim-toolbar{padding: 5px;text-align: center; background: #00dae3;color: #000;}
                #trendAnalyticModal .cell-manual-sim {background: #DDF4E7 !important;}
                #trendAnalyticModal .week-cell {background: blueviolet !important; color: #fff !important;}

                /* Sticky Headers */
                #trendAnalyticModal thead th { position: sticky; top: 0; background: #f5f5f5; z-index: 6; }
                #trendAnalyticModal thead th.sticky-left { position: sticky; top: 0; left: 0; background: #f5f5f5; z-index: 9; min-width: 140px; }
                #trendAnalyticModal thead th.sticky-left-2 { position: sticky; top: 0; left: 140px; background: #f5f5f5; z-index: 9; min-width: 150px; }

                #trendAnalyticModal tbody td.sticky-left { position: sticky; left: 0; background: #f0f0f0; z-index: 7; min-width: 140px; }
                #trendAnalyticModal tbody td.sticky-left-2 { position: sticky; left: 140px; background: #f0f0f0; z-index: 7; min-width: 150px; }

                /* Conditional Coloring */
                #trendAnalyticModal .rag-red { color: #e74c3c; font-weight: bold; }
                #trendAnalyticModal .rag-amber { color: #f39c12; font-weight: bold; }
                #trendAnalyticModal .rag-green { color: #27ae60; font-weight: bold; }

                /* Filter Container */
                #trendAnalyticModal .sticky-col{ background: gray !important; color: #fff !important;border-right: 1px solid #fff !important;}
                #trendAnalyticModal .filter-container { margin: 10px; font-size: 0.875rem; }
                #trendAnalyticModal .dropdown-checkbox { max-height: 250px; overflow-y: auto; padding: 10px; }

                /* Buttons */
                #trendAnalyticModal .btn-sm { border-radius: 6px; font-size: 0.875rem; }
                #applyFilterBtn { background: #9b59b6; border-color: #9b59b6; }
                #applyFilterBtn:hover { background: #8e44ad; border-color: #8e44ad; }
            </style>
            `);
        }


        const modalHTML = `
        <div class="modal fade" id="trendAnalyticModal" tabindex="-1" style="z-index:9999;zoom:85%">
          <div class="modal-dialog" style="width: 100%;margin: 0;height: 100%;max-width: none;">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Assumption Simulator</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body p-0">
                <div class="filter-container">
                    <div class="row g-2 align-items-center">
                        <div class="col-auto">
                            <label><b>LOB:</b></label><br/>
                            <div class="dropdown">
                                <button class="btn btn-sm dropdown-toggle" type="button" id="lobDropdownBtn" data-bs-toggle="dropdown" style="border: 1px solid;border-radius: 5px;">Select LOBs</button>
                                <div class="dropdown-menu dropdown-checkbox" aria-labelledby="lobDropdownBtn" id="lobDropdown"></div>
                            </div>
                        </div>
                        <div class="col-auto">
                            <label><b>Week From:</b></label><br/>
                            <div class="dropdown">
                                <button class="btn btn-sm dropdown-toggle" type="button" id="weekFromDropdownBtn" data-bs-toggle="dropdown" style="border: 1px solid;border-radius: 5px;">Select From Week</button>
                                <div class="dropdown-menu dropdown-checkbox" aria-labelledby="weekFromDropdownBtn" id="weekFromDropdown"></div>
                            </div>
                        </div>

                        <div class="col-auto">
                            <label><b>Week To:</b></label><br/>
                            <div class="dropdown">
                                <button class="btn btn-sm dropdown-toggle" type="button" id="weekToDropdownBtn" data-bs-toggle="dropdown" style="border: 1px solid;border-radius: 5px;">Select To Week</button>
                                <div class="dropdown-menu dropdown-checkbox" aria-labelledby="weekToDropdownBtn" id="weekToDropdown"></div>
                            </div>
                        </div>

                      

                        <div class="col-auto">
                            <button id="applyFilterBtn" class="btn btn-primary btn-sm mt-3">Apply Filter</button>
                        </div>
                    </div>
                </div>
                <div class="table-wrapper" id="trendAnalyticContainer"></div>
              </div>
            </div>
          </div>
        </div>`;

        $('body').append(modalHTML);
        const $container = $('#trendAnalyticContainer');
        $container.empty().addClass('assumption-simulator');

        let weeks = [...new Set(settings.data.map(d => d.week))].sort((a, b) => new Date(a) - new Date(b));
        let lobs = [...new Set(settings.data.map(d => d.lob))];
        function populateFilters() {
            // LOB
            const lobContainer = document.createDocumentFragment();
            lobContainer.appendChild(document.createElement('label')).innerHTML = `<label><input type="checkbox" class="lobSelectAll" checked> <b>Select All</b></label><br/>`;
            lobs.forEach(lob => { const label = document.createElement('label'); label.innerHTML = `<input type="checkbox" class="lobCheckbox" value="${lob}" checked> ${lob}`; lobContainer.appendChild(label); lobContainer.appendChild(document.createElement('br')); });
            $('#lobDropdown').append(lobContainer);


            // Weeks
            const weekFrom = weeks[0];
            weeks.forEach(week => {
                $('#weekFromDropdown').append(`<label><input type="radio" name="weekFrom" value="${week}" ${week === weekFrom ? 'checked' : ''}> ${week}</label><br/>`);
                $('#weekToDropdown').append(`<label><input type="radio" name="weekTo" value="${week}" ${week === weeks[weeks.length - 1] ? 'checked' : ''}> ${week}</label><br/>`);
            });

            updateDropdownLabel('lobDropdown', lobs, 'Select LOBs');
            updateRadioDropdownLabel('weekFromDropdownBtn', weekFrom, 'From');
            updateRadioDropdownLabel('weekToDropdownBtn', weeks[weeks.length - 1], 'To');


        }

        function updateDropdownLabel(dropdownId, selectedItems, placeholder) {
            const btn = $(`#${dropdownId}Btn`);
            btn.text(selectedItems.length === 0 ? placeholder : `${placeholder.split(' ')[0]} (${selectedItems.length}) selected`);
        }
        function updateRadioDropdownLabel(dropdownBtnId, selectedValue, prefix) {
            $(`#${dropdownBtnId}`).text(`${prefix}: ${selectedValue}`);
        }



        // Store simulated values (manual or ML)
        const simulatedValues = {};

        // Store original metrics
        const originalMetrics = {};
        lobs.forEach(lob => {
            weeks.forEach(week => {
                const d = settings.data.find(x => x.lob === lob && x.week === week);
                if (d) {
                    originalMetrics[`${lob}_${week}`] = {
                        fteRequired: d.fteRequired,
                        fteAvailable: d.fteAvailable,
                        delta: d.delta,
                        staffingPct: d.staffingPct,
                        shrinkage: d.plannedShrinkage,
                        attrition: d.plannedAttrition ?? 0
                    };
                }
            });
        });

        // Toolbar
        const $toolbar = $(`
            <div class="sim-toolbar mb-2 flex gap-2 items-center">
                <label>Simulation Shrinkage %: <input type="number" step="0.1" min="0" class="sim-input-global-shrink w-20 p-0.5 border rounded"></label>
                <label>Simulation Attrition %: <input type="number" step="0.1" min="0" class="sim-input-global-attr w-20 p-0.5 border rounded"></label>
                <button class="btn-apply px-3 py-1 bg-blue-500 rounded">Apply</button>
                <button class="btn-reset px-3 py-1 rounded">Reset</button>
                <button class="btn-ml-trend px-3 py-1 bg-green-500 rounded">🧠 ML Trend</button>
            </div>
        `);
        $container.append($toolbar);





        // Table
        const $tableWrapper = $('<div class="sim-table-wrapper overflow-x-auto"></div>');
     

        const fmt = (val, metric) => (val !== null && val !== undefined && !isNaN(val)) ?
            (metric?.includes("Shrinkage") || metric?.includes("Attrition")) ? parseFloat(val).toFixed(1) : parseFloat(val).toFixed(0)
            : 'NA';

        function getData(lob, week) {
            return filteredTransformedData.find(d => d.lob === lob && d.week === week);
        }


        $('#trendAnalyticModal').on('hidden.bs.modal', function () {
            $('#trendAnalyticModal').remove();
            $('#trendAnalyticModalStyles').remove();
        });

        // Initialize simulated values from planned
        function initSimulated() {
            lobs.forEach(lob => {
                weeks.forEach(week => {
                    const d = getData(lob, week);
                    simulatedValues[`${lob}_${week}_shrink`] = d?.plannedShrinkage ?? 0;
                    simulatedValues[`${lob}_${week}_attr`] = d?.plannedAttrition ?? 0;
                });
            });
        }
        initSimulated();

        // Calculate simulated metrics (FTE / Delta / Staffing) based on simulatedValues
        function calcSimulated(d) {
            if (!d) return {};

            const shrinkInput = $toolbar.find('.sim-input-global-shrink').val();
            const attrInput = $toolbar.find('.sim-input-global-attr').val();

            const shrink = simulatedValues[`${d.lob}_${d.week}_shrink`] ?? 0;
            const attr = simulatedValues[`${d.lob}_${d.week}_attr`] ?? 0;

            let fteReq = null, fteAvail = null, delta = null, staffing = null;

            const orig = originalMetrics[`${d.lob}_${d.week}`];

            if (shrink === d.plannedShrinkage && attr === (d.plannedAttrition ?? 0)) {
                fteReq = orig?.fteRequired ?? null;
                fteAvail = orig?.fteAvailable ?? null;
                delta = orig?.delta ?? null;
                staffing = orig?.staffingPct ?? null;
            } else {

                if (shrinkInput)
                    fteReq = d.fteRequired != null ? d.fteRequired * (1 - d.plannedShrinkage / 100) / (1 - shrink / 100) : null;
                else
                    fteReq = d.fteRequired;

                if (attrInput)
                    fteAvail = d.fteAvailable != null ? d.fteAvailable * (1 - attr / 100) : null;
                else
                    fteAvail = d.fteAvailable;

                delta = fteReq != null && fteAvail != null ? fteAvail - fteReq : null;
                staffing = fteReq ? (fteAvail / fteReq * 100) : null;
            }

            return {
                'FTE Required': fteReq,
                'FTE Available': fteAvail,
                'Delta': delta,
                'Staffing %': staffing,
                'Simulated Shrinkage %': shrink,
                'Simulated Attrition %': attr
            };
        }

        function getArrow(sim, orig) {
            if (sim === 'NA' || orig === 'NA') return '';
            sim = parseFloat(sim);
            orig = parseFloat(orig);
            if (sim > orig) return '🡅';
            if (sim < orig) return '🡇';
            return '';
        }

        function renderTable() {

            $tableWrapper.empty();
            const $table = $('<table class="table sim-table min-w-max border-collapse border border-gray-200"></table>');
            $tableWrapper.append($table);
            $container.append($tableWrapper);

            // Table header
            let headerHtml = `<thead><tr>
            <th class="sticky-col border" nowrap>LOB / Overall</th>
            <th class="sticky-col border" nowrap>Metric</th>`;
            weeks.forEach(w => headerHtml += `<th class="border text-center week-cell" colspan="2" nowrap>${w}</th>`);
            headerHtml += `</tr><tr><th></th><th></th>`;
            weeks.forEach(_ => headerHtml += `<th nowrap>Original</th><th class="cell-manual-sim" style="min-width:55px;" nowrap>Simulated</th>`);
            headerHtml += `</tr></thead>`;
            $table.append(headerHtml);
            const $tbody = $('<tbody></tbody>');
            $table.append($tbody);

            const metrics = ['FTE Required', 'FTE Available', 'Delta', 'Staffing %', 'Planned Shrinkage %', 'Simulated Shrinkage %', 'Planned Attrition %', 'Simulated Attrition %'];
            const simulatedOnlyMetrics = ['Simulated Shrinkage %', 'Simulated Attrition %'];
            const percentMetrics = ['Staffing %', 'Planned Shrinkage %', 'Simulated Shrinkage %', 'Planned Attrition %', 'Simulated Attrition %'];

            // Overall row
            metrics.forEach(metric => {
                const $tr = $('<tr></tr>');
                if (metric === 'FTE Required') $tr.append(`<td class="sticky-col font-bold" rowspan="${metrics.length}" nowrap>Overall</td>`);
                $tr.append(`<td class="sticky-col" nowrap>${metric}</td>`);

                weeks.forEach(week => {
                    const weekData = lobs.map(lob => getData(lob, week)).filter(d => d);
                    let original = 'NA', simulated = 'NA';
                    if (weekData.length) {
                        if (simulatedOnlyMetrics.includes(metric)) {
                            original = 'NA';
                            const vals = weekData.map(d => calcSimulated(d)[metric]).filter(v => v != null && !isNaN(v));
                            if (vals.length) simulated = fmt(vals.reduce((a, b) => a + b, 0) / vals.length, metric);
                        } else {
                            const origVals = weekData.map(d => {
                                switch (metric) {
                                    case 'FTE Required': return d.fteRequired;
                                    case 'FTE Available': return d.fteAvailable;
                                    case 'Delta': return d.delta;
                                    case 'Staffing %': return d.staffingPct;
                                    case 'Planned Shrinkage %': return d.plannedShrinkage;
                                    case 'Planned Attrition %': return d.plannedAttrition ?? 0;
                                    default: return null;
                                }
                            }).filter(v => v != null && !isNaN(v));
                            if (origVals.length) original = percentMetrics.includes(metric) ? fmt(origVals.reduce((a, b) => a + b, 0) / origVals.length, metric) : fmt(origVals.reduce((a, b) => a + b, 0), metric);
                            const simVals = weekData.map(d => calcSimulated(d)[metric]).filter(v => v != null && !isNaN(v));
                            if (simVals.length) simulated = percentMetrics.includes(metric) ? fmt(simVals.reduce((a, b) => a + b, 0) / simVals.length, metric) : fmt(simVals.reduce((a, b) => a + b, 0), metric);
                        }
                    }

                    const isNeg = !isNaN(simulated) && parseFloat(simulated) < 0;
                    const arrow = !simulatedOnlyMetrics.includes(metric) && original !== 'NA' ? getArrow(simulated, original) : '';
                    const valDisplay = simulated + (percentMetrics.includes(metric) && simulated !== 'NA' ? '%' : '');
                    $tr.append(`<td class="text-right" nowrap>${original}${percentMetrics.includes(metric) && original !== 'NA' ? '%' : ''}</td>
                               <td class="text-right cell-manual-sim ${isNeg ? 'text-red' : ''}" nowrap>${valDisplay}<span style="float:right;color:${arrow === '🡅' ? 'green' : arrow === '🡇' ? 'red' : ''}">${arrow}</span></td>`);
                });
                $tbody.append($tr);
            });

            // LOB rows
            lobs.forEach(lob => {
                metrics.forEach(metric => {
                    const $tr = $('<tr></tr>');
                    if (metric === 'FTE Required') $tr.append(`<td class="sticky-col font-semibold" rowspan="${metrics.length}" nowrap>${lob}</td>`);
                    $tr.append(`<td class="sticky-col" nowrap>${metric}</td>`);

                    weeks.forEach(week => {
                        const d = getData(lob, week);
                        let original = 'NA', simulated = 'NA';
                        if (d) {
                            if (simulatedOnlyMetrics.includes(metric)) original = 'NA';
                            else switch (metric) {
                                case 'FTE Required': original = fmt(d.fteRequired); break;
                                case 'FTE Available': original = fmt(d.fteAvailable); break;
                                case 'Delta': original = fmt(d.delta); break;
                                case 'Staffing %': original = fmt(d.staffingPct); break;
                                case 'Planned Shrinkage %': original = fmt(d.plannedShrinkage, metric); break;
                                case 'Planned Attrition %': original = fmt(d.plannedAttrition ?? 0, metric); break;
                            }

                            simulated = fmt(calcSimulated(d)[metric], metric);
                            const isNeg = !isNaN(simulated) && parseFloat(simulated) < 0;
                            const arrow = !simulatedOnlyMetrics.includes(metric) && original !== 'NA' ? getArrow(simulated, original) : '';
                            const valDisplay = simulated + (percentMetrics.includes(metric) && simulated !== 'NA' ? '%' : '');
                            $tr.append(`<td class="text-right" nowrap>${original}${percentMetrics.includes(metric) && original !== 'NA' ? '%' : ''}</td>
                                       <td class="text-right cell-manual-sim ${isNeg ? 'text-red' : ''}" nowrap>${valDisplay}<span style="float:right;color:${arrow === '🡅' ? 'green' : arrow === '🡇' ? 'red' : ''}">${arrow}</span></td>`);
                        } else $tr.append(`<td class="text-right" colspan="2" nowrap>NA</td>`);
                    });
                    $tbody.append($tr);
                });
            });
        }



        // --- Manual Simulation Apply ---
        $toolbar.find('.btn-apply').on('click', function () {
            const shrinkInput = $toolbar.find('.sim-input-global-shrink').val();
            const attrInput = $toolbar.find('.sim-input-global-attr').val();
            const shrinkVal = shrinkInput !== '' ? parseFloat(shrinkInput) : null;
            const attrVal = attrInput !== '' ? parseFloat(attrInput) : null;

            lobs.forEach(lob => weeks.forEach(week => {
                if (shrinkVal !== null) simulatedValues[`${lob}_${week}_shrink`] = shrinkVal;
                if (attrVal !== null) simulatedValues[`${lob}_${week}_attr`] = attrVal;
            }));

            renderTable();
            $container.find('.cell-manual-sim').addClass('bg-blue-100'); // manual simulation highlight
        });

        // --- Reset ---
        $toolbar.find('.btn-reset').on('click', function () {
            $toolbar.find('.sim-input-global-shrink').val(null);
            $toolbar.find('.sim-input-global-attr').val(null);
            initSimulated();
            renderTable();
        });

        // --- ML Trend ---
        $toolbar.find('.btn-ml-trend').on('click', function () {
            $toolbar.find('.sim-input-global-shrink').val(null);
            $toolbar.find('.sim-input-global-attr').val(null);
            getMLTrend();
        });

        function getMLTrend() {
            let fromWeek = $('#WeekFrom').val();
            let toWeek = $('#WeekTo').val();
            var data = {
                'vertical': $("#txtVertical").val(),
                'locationFilter': $('#cmbLocation')[0].getSelectedValues(),
                'siteFilter': $('#cmbSite')[0].getSelectedValues(),
                'accountFilter': [$('#txtAccount').val()],
                'lobFilter': $('#cmbLOB')[0].getSelectedValues(),
                'projectIdFilter': $('#cmbProjectId')[0].getSelectedValues(),
                'weekFrom': fromWeek,
                'WeekTo': toWeek,
            };

            $.ajax({
                url: '/resourceplanner/GetMLTrend',
                type: "POST",
                async: true,
                cache: false,
                data: JSON.stringify(data),
                contentType: "application/json",
                dataType: "json",
                success: function (response) {
                    if (response?.data?.length) {
                        // Replace simulated values completely with ML
                        Object.keys(simulatedValues).forEach(k => simulatedValues[k] = 0);
                        response.data.forEach(item => {
                            const lob = item.lob || item.LOB;
                            const weekDate = new Date(item.weekDate || item.WeekDate);
                            const weekStr = weeks.find(w => new Date(w).getTime() === weekDate.getTime());
                            if (!weekStr) return;

                            simulatedValues[`${lob}_${weekStr}_shrink`] = parseFloat(item.predictedShrinkage ?? item.PredictedShrinkage ?? 0);
                            simulatedValues[`${lob}_${weekStr}_attr`] = parseFloat(item.predictedAttrition ?? item.PredictedAttrition ?? 0);
                        });

                        renderTable();
                        $container.find('.cell-manual-sim').addClass('bg-green-100'); // ML highlight
                        toastr.success("ML Trend applied successfully.", "Simulation Updated");
                    } else {
                        toastr.warning("No ML prediction data available for selected filters.");
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error("Error fetching ML trend:", errorThrown);
                    toastr.error("Error fetching ML trend. Please try again.");
                }
            });
        }
        populateFilters();

        // Select All / Unselect All Logic
        $('#lobDropdown').on('change', '.lobSelectAll', function () {
            const checked = $(this).is(':checked');
            $('.lobCheckbox').prop('checked', checked);
            updateDropdownLabel('lobDropdown', checked ? uniqueLOBs.slice() : [], 'Select LOBs');
        });
        $('#weekFromDropdown').on('change', 'input[type=radio]', function () {
            const selectedWeek = $('#weekFromDropdown input[type=radio]:checked').val();
            updateRadioDropdownLabel('weekFromDropdownBtn', selectedWeek, 'From');
        });
        $('#weekToDropdown').on('change', 'input[type=radio]', function () {
            const selectedWeek = $('#weekToDropdown input[type=radio]:checked').val();
            updateRadioDropdownLabel('weekToDropdownBtn', selectedWeek, 'To');
        });

        $('#applyFilterBtn').on('click', function () {
            const selectedLOBs = $('.lobCheckbox:checked').map(function () { return this.value; }).get();
            const weekFrom = $('#weekFromDropdown input[type=radio]:checked').val();
            const weekTo = $('#weekToDropdown input[type=radio]:checked').val();
            buildTrendTable(selectedLOBs, weekFrom, weekTo);


        });

        function buildTrendTable(selectedLOBs, weekFrom, weekTo) {
             filteredTransformedData = settings.data.filter(item => {
                const weekDate = parseTrendWeekDate(item.week); // convert to Date object

                const fromDate = parseTrendWeekDate(weekFrom);
                const toDate = parseTrendWeekDate(weekTo);

                const isLOBMatch = selectedLOBs.length === 0 || selectedLOBs.includes(item.lob);
                const isWeekInRange = weekDate >= fromDate && weekDate <= toDate;

                return isLOBMatch && isWeekInRange;
             });

             weeks = [...new Set(filteredTransformedData.map(d => d.week))].sort((a, b) => new Date(a) - new Date(b));
             lobs = [...new Set(filteredTransformedData.map(d => d.lob))];

            renderTable();
        }

        function parseTrendWeekDate(weekStr) {
            const [day, month, year] = weekStr.split('-');
            return new Date(`${day} ${month} 20${year}`);
        }


        buildTrendTable(lobs, weeks[0], weeks[weeks.length - 1]);

        // Show Modal
        const trendAnalyticModal = new bootstrap.Modal(document.getElementById('trendAnalyticModal'));
        trendAnalyticModal.show();

    };
}(jQuery));

