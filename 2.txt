string GenerateAiPrompt(
    List<WfmMetricException> lobExceptions,
    List<WfmAggregateException> aggregateExceptions,
    string vertical,
    string planPeriod,
    string userSummary,
    Dictionary<string, string> monthMapping)
{
    var sb = new StringBuilder();

    sb.AppendLine($"Vertical: {vertical}");
    sb.AppendLine($"Plan Period: {planPeriod}");
    sb.AppendLine();

    sb.AppendLine("User Summary:");
    sb.AppendLine(userSummary);
    sb.AppendLine();

    sb.AppendLine("Aggregated Exceptions:");
    if (aggregateExceptions.Count == 0)
    {
        sb.AppendLine("No significant account- or geo-level exceptions found.");
    }
    else
    {
        foreach (var agg in aggregateExceptions.OrderBy(x => x.Level).ThenBy(x => x.Entity))
        {
            var context = agg.Level == "Geo" ? $"Geo {agg.Entity} under Account {agg.Parent}" : $"Account {agg.Entity}";
            sb.AppendLine($"- {context} has high {agg.Metric} at {agg.Actual}% (Target: {agg.Target}%)");
        }
    }

    sb.AppendLine();
    sb.AppendLine("LOB-Level Exceptions:");
    if (lobExceptions.Count == 0)
    {
        sb.AppendLine("No LOB-level metric exceptions found.");
    }
    else
    {
        var grouped = lobExceptions
            .GroupBy(e => e.Account)
            .OrderBy(g => g.Key);

        foreach (var accGroup in grouped)
        {
            sb.AppendLine($"Account: {accGroup.Key}");

            var geoGroups = accGroup
                .GroupBy(e => e.Geo)
                .OrderBy(g => g.Key);

            foreach (var geoGroup in geoGroups)
            {
                sb.AppendLine($"\tGeo: {geoGroup.Key}");

                var lobGroups = geoGroup
                    .GroupBy(e => e.LOB)
                    .OrderBy(g => g.Key);

                foreach (var lobGroup in lobGroups)
                {
                    sb.AppendLine($"\t\tLOB: {lobGroup.Key}");

                    foreach (var ex in lobGroup.OrderBy(e => e.Metric))
                    {
                        string metric = ex.Metric;

                        // Replace M1, M2, etc. with month name if possible
                        foreach (var kvp in monthMapping)
                        {
                            if (metric.StartsWith(kvp.Key + "_"))
                            {
                                metric = metric.Replace(kvp.Key + "_", kvp.Value + " ");
                            }
                        }

                        sb.AppendLine($"\t\t\t- {metric} = {ex.Actual}% (Target: {ex.Target}%)");
                    }
                }
            }
        }
    }

    return sb.ToString();
}
