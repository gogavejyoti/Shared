(function ($) {
    $.fn.assumptionSimulator = function (options) {
        const settings = $.extend({
            data: [], // JSON array
        }, options);

        const $container = $(this);
        $container.empty().addClass('assumption-simulator');

        const weeks = [...new Set(settings.data.map(d => d.week))].sort((a, b) => new Date(a) - new Date(b));
        const lobs = [...new Set(settings.data.map(d => d.lob))];

        // Store simulated shrinkage and attrition
        const simulatedValues = {};

        // Store original metrics for FTE Available, Delta, Staffing %
        const originalMetrics = {};
        lobs.forEach(lob => {
            weeks.forEach(week => {
                const d = settings.data.find(x => x.lob === lob && x.week === week);
                if (d) {
                    originalMetrics[`${lob}_${week}`] = {
                        fteAvailable: d.fteAvailable,
                        delta: d.delta,
                        staffingPct: d.staffingPct
                    };
                }
            });
        });

        // Toolbar
        const $toolbar = $(`
            <div class="sim-toolbar mb-2 flex gap-2 items-center">
                <label>Simulation Shrinkage %: <input type="number" step="0.1" min="0" class="sim-input-global-shrink w-20 p-0.5 border rounded"></label>
                <label>Simulation Attrition %: <input type="number" step="0.1" min="0" class="sim-input-global-attr w-20 p-0.5 border rounded"></label>
                <button class="btn-apply px-3 py-1 bg-blue-500 text-white rounded">Apply</button>
            </div>
        `);
        $container.append($toolbar);

        // Table wrapper
        const $tableWrapper = $('<div class="sim-table-wrapper overflow-x-auto"></div>');
        const $table = $('<table class="table sim-table min-w-max border-collapse border border-gray-200"></table>');
        $tableWrapper.append($table);
        $container.append($tableWrapper);

        // Table header
        let headerHtml = `<thead><tr>
            <th class="sticky-col bg-white border">LOB / Overall</th>
            <th class="sticky-col bg-white border">Metric</th>`;
        weeks.forEach(w => headerHtml += `<th class="border text-center" colspan="2">${w}</th>`);
        headerHtml += `</tr><tr><th></th><th></th>`;
        weeks.forEach(_ => headerHtml += `<th>Original</th><th>Simulated</th>`);
        headerHtml += `</tr></thead>`;
        $table.append(headerHtml);

        const $tbody = $('<tbody></tbody>');
        $table.append($tbody);

        const fmt = (val) => (val !== null && val !== undefined && !isNaN(val)) ? parseFloat(val).toFixed(2) : 'NA';

        function getData(lob, week) {
            return settings.data.find(d => d.lob === lob && d.week === week);
        }

        // Initialize simulated values from planned
        lobs.forEach(lob => {
            weeks.forEach(week => {
                const d = getData(lob, week);
                simulatedValues[`${lob}_${week}_shrink`] = d?.plannedShrinkage ?? null;
                simulatedValues[`${lob}_${week}_attr`] = d?.plannedAttrition ?? null;
            });
        });

        // Calculate simulated metrics considering both shrinkage & attrition
        function calcSimulated(d) {
            if (!d) return {};

            const shrink = simulatedValues[`${d.lob}_${d.week}_shrink`] ?? 0;
            const attr = simulatedValues[`${d.lob}_${d.week}_attr`] ?? 0;

            let fteAvail, delta, staffing;

            // If simulated matches planned, keep original values
            if (shrink === d.plannedShrinkage && attr === d.plannedAttrition) {
                const orig = originalMetrics[`${d.lob}_${d.week}`];
                fteAvail = orig?.fteAvailable ?? null;
                delta = orig?.delta ?? null;
                staffing = orig?.staffingPct ?? null;
            } else {
                if (d.fteRequired != null) {
                    fteAvail = d.fteRequired * (1 - shrink / 100) * (1 - attr / 100);
                    delta = fteAvail - d.fteRequired;
                    staffing = (d.fteRequired !== 0) ? fteAvail / d.fteRequired * 100 : null;
                } else fteAvail = delta = staffing = null;
            }

            return {
                'FTE Available': fteAvail,
                'Delta': delta,
                'Staffing %': staffing,
                'Simulated Shrinkage %': shrink,
                'Simulated Attrition %': attr
            };
        }

        function renderTable() {
            $tbody.empty();
            const metrics = ['FTE Required', 'FTE Available', 'Delta', 'Staffing %', 'Planned Shrinkage %', 'Simulated Shrinkage %', 'Planned Attrition %', 'Simulated Attrition %'];
            const simulatedOnlyMetrics = ['Simulated Shrinkage %', 'Simulated Attrition %'];

            // Overall row
            metrics.forEach(metric => {
                const $tr = $('<tr></tr>');
                if (metric === 'FTE Required') $tr.append(`<td class="sticky-col bg-gray-100 font-bold" rowspan="${metrics.length}">Overall</td>`);
                $tr.append(`<td class="sticky-col bg-gray-50">${metric}</td>`);

                weeks.forEach(week => {
                    const weekData = lobs.map(lob => getData(lob, week)).filter(d => d);
                    let original = 'NA', simulated = 'NA';
                    if (weekData.length) {
                        if (simulatedOnlyMetrics.includes(metric)) {
                            original = 'NA';
                            const vals = weekData.map(d => calcSimulated(d)[metric]).filter(v => v != null && !isNaN(v));
                            if (vals.length) simulated = fmt(vals.reduce((a, b) => a + b, 0) / vals.length);
                        } else {
                            // Original
                            const origVals = weekData.map(d => {
                                switch (metric) {
                                    case 'FTE Required': return d.fteRequired;
                                    case 'FTE Available': return d.fteAvailable;
                                    case 'Delta': return d.delta;
                                    case 'Staffing %': return d.staffingPct;
                                    case 'Planned Shrinkage %': return d.plannedShrinkage;
                                    case 'Planned Attrition %': return d.plannedAttrition;
                                    default: return null;
                                }
                            }).filter(v => v != null && !isNaN(v));
                            if (origVals.length) original = ['Staffing %', 'Planned Shrinkage %', 'Planned Attrition %'].includes(metric) ? fmt(origVals.reduce((a, b) => a + b, 0) / origVals.length) : fmt(origVals.reduce((a, b) => a + b, 0));

                            // Simulated
                            const simVals = weekData.map(d => calcSimulated(d)[metric]).filter(v => v != null && !isNaN(v));
                            if (simVals.length) simulated = ['Staffing %', 'Planned Shrinkage %', 'Planned Attrition %'].includes(metric) ? fmt(simVals.reduce((a, b) => a + b, 0) / simVals.length) : fmt(simVals.reduce((a, b) => a + b, 0));
                        }
                    }

                    if (simulatedOnlyMetrics.includes(metric) || ['FTE Available', 'Delta', 'Staffing %'].includes(metric))
                        $tr.append(`<td class="text-right">${original}</td><td class="text-right"><input type="text" readonly class="sim-input-cell w-16 p-0.5 border rounded text-right" value="${simulated}"></td>`);
                    else $tr.append(`<td class="text-right" colspan="2">${original}</td>`);
                });
                $tbody.append($tr);
            });

            // LOB rows
            lobs.forEach(lob => {
                metrics.forEach(metric => {
                    const $tr = $('<tr></tr>');
                    if (metric === 'FTE Required') $tr.append(`<td class="sticky-col bg-gray-100 font-semibold" rowspan="${metrics.length}">${lob}</td>`);
                    $tr.append(`<td class="sticky-col bg-gray-50">${metric}</td>`);

                    weeks.forEach(week => {
                        const d = getData(lob, week);
                        let original = 'NA', simulated = 'NA';
                        if (d) {
                            if (simulatedOnlyMetrics.includes(metric)) original = 'NA';
                            else switch (metric) {
                                case 'FTE Required': original = fmt(d.fteRequired); break;
                                case 'FTE Available': original = fmt(d.fteAvailable); break;
                                case 'Delta': original = fmt(d.delta); break;
                                case 'Staffing %': original = fmt(d.staffingPct); break;
                                case 'Planned Shrinkage %': original = fmt(d.plannedShrinkage); break;
                                case 'Planned Attrition %': original = fmt(d.plannedAttrition); break;
                            }

                            if (simulatedOnlyMetrics.includes(metric) || ['FTE Available', 'Delta', 'Staffing %'].includes(metric))
                                simulated = fmt(calcSimulated(d)[metric]);
                        }

                        if (simulatedOnlyMetrics.includes(metric) || ['FTE Available', 'Delta', 'Staffing %'].includes(metric))
                            $tr.append(`<td class="text-right">${original}</td><td class="text-right"><input type="text" readonly class="sim-input-cell w-16 p-0.5 border rounded text-right" value="${simulated}"></td>`);
                        else $tr.append(`<td class="text-right" colspan="2">${original}</td>`);
                    });

                    $tbody.append($tr);
                });
            });
        }

        renderTable();

        // Apply global simulation
        $toolbar.find('.btn-apply').on('click', function () {
            const shrinkInput = $toolbar.find('.sim-input-global-shrink').val();
            const attrInput = $toolbar.find('.sim-input-global-attr').val();

            const shrinkVal = shrinkInput !== '' ? parseFloat(shrinkInput) : null;
            const attrVal = attrInput !== '' ? parseFloat(attrInput) : null;

            lobs.forEach(lob => weeks.forEach(week => {
                if (shrinkVal !== null) simulatedValues[`${lob}_${week}_shrink`] = shrinkVal;
                if (attrVal !== null) simulatedValues[`${lob}_${week}_attr`] = attrVal;
            }));

            renderTable();
        });
    };
}(jQuery));
