(function ($) {
    $.fn.assumptionSimulator = function (options) {
        const settings = $.extend({
            data: [], // JSON array
        }, options);

        const $container = $(this);
        $container.empty().addClass('assumption-simulator');

        // Extract weeks sorted
        const weeks = [...new Set(settings.data.map(d => d.week))].sort((a, b) => new Date(a) - new Date(b));

        // Extract LOBs
        const lobs = [...new Set(settings.data.map(d => d.lob))];

        // Store simulated shrinkage
        const simulatedShrinkage = {};

        // Toolbar for input + apply
        const $toolbar = $(`
            <div class="sim-toolbar mb-2 flex gap-2 items-center">
                <label>Simulation Shrinkage %: <input type="number" step="0.1" min="0" class="sim-input-global w-20 p-0.5 border rounded"></label>
                <button class="btn-apply px-3 py-1 bg-blue-500 text-white rounded">Apply</button>
            </div>
        `);
        $container.append($toolbar);

        // Table wrapper
        const $tableWrapper = $('<div class="sim-table-wrapper overflow-x-auto"></div>');
        const $table = $('<table class="sim-table min-w-max border-collapse border border-gray-200"></table>');
        $tableWrapper.append($table);
        $container.append($tableWrapper);

        // Table header
        let headerHtml = `<thead><tr>
            <th class="sticky-col bg-white border">LOB / Overall</th>
            <th class="sticky-col bg-white border">Metric</th>`;
        weeks.forEach(w => headerHtml += `<th class="border">${w}</th>`);
        headerHtml += `</tr></thead>`;
        $table.append(headerHtml);

        const $tbody = $('<tbody></tbody>');
        $table.append($tbody);

        const fmt = (val) => (val !== null && val !== undefined) ? parseFloat(val).toFixed(2) : '';

        // Helper to get data
        const getData = (lob, week) => settings.data.find(d => d.lob === lob && d.week === week);

        // Initialize simulatedShrinkage with planned values
        lobs.forEach(lob => {
            weeks.forEach(week => {
                const d = getData(lob, week);
                if (d) simulatedShrinkage[`${lob}_${week}`] = d.plannedShrinkage;
            });
        });

        // Function to render table
        function renderTable() {
            $tbody.empty();

            // Overall row
            const overallMetrics = ['FTE Required', 'FTE Available', 'Delta', 'Staffing %', 'Planned Shrinkage %', 'Simulated Shrinkage %'];
            overallMetrics.forEach(metric => {
                const $tr = $('<tr></tr>');
                if (metric === 'FTE Required') $tr.append(`<td class="sticky-col bg-gray-100 font-bold" rowspan="${overallMetrics.length}">Overall</td>`);
                $tr.append(`<td class="sticky-col bg-gray-50">${metric}</td>`);

                weeks.forEach(week => {
                    let val = '';
                    const weekData = settings.data.filter(d => d.week === week);
                    switch (metric) {
                        case 'FTE Required': val = fmt(weekData.reduce((s,d)=>s+d.fteRequired,0)); break;
                        case 'FTE Available': val = fmt(weekData.reduce((s,d)=>s+d.fteAvailable,0)); break;
                        case 'Delta': val = fmt(weekData.reduce((s,d)=>s+d.delta,0)); break;
                        case 'Staffing %': val = fmt(weekData.reduce((s,d)=>s+d.staffingPct,0)/weekData.length); break;
                        case 'Planned Shrinkage %': val = fmt(weekData.reduce((s,d)=>s+d.plannedShrinkage,0)/weekData.length); break;
                        case 'Simulated Shrinkage %':
                            val = fmt(weekData.reduce((s,d)=>s+simulatedShrinkage[`${d.lob}_${week}`],0)/weekData.length);
                            break;
                    }
                    if (metric === 'Simulated Shrinkage %') {
                        $tr.append(`<td class="text-right"><input type="number" step="0.1" min="0" class="sim-input-cell w-16 p-0.5 border rounded text-right" value="${val}"></td>`);
                    } else {
                        $tr.append(`<td class="text-right">${val}</td>`);
                    }
                });

                $tbody.append($tr);
            });

            // LOB rows
            lobs.forEach(lob => {
                overallMetrics.forEach(metric => {
                    const $tr = $('<tr></tr>');
                    if (metric === 'FTE Required') $tr.append(`<td class="sticky-col bg-gray-100 font-semibold" rowspan="${overallMetrics.length}">${lob}</td>`);
                    $tr.append(`<td class="sticky-col bg-gray-50">${metric}</td>`);

                    weeks.forEach(week => {
                        const rowData = getData(lob, week);
                        let val = '';
                        if (!rowData) val = '';
                        else switch (metric) {
                            case 'FTE Required': val = fmt(rowData.fteRequired); break;
                            case 'FTE Available': val = fmt(rowData.fteAvailable); break;
                            case 'Delta': val = fmt(rowData.delta); break;
                            case 'Staffing %': val = fmt(rowData.staffingPct); break;
                            case 'Planned Shrinkage %': val = fmt(rowData.plannedShrinkage); break;
                            case 'Simulated Shrinkage %': val = fmt(simulatedShrinkage[`${lob}_${week}`]); break;
                        }

                        if (metric === 'Simulated Shrinkage %') {
                            $tr.append(`<td class="text-right"><input type="number" step="0.1" min="0" class="sim-input-cell w-16 p-0.5 border rounded text-right" data-lob="${lob}" data-week="${week}" value="${val}"></td>`);
                        } else {
                            $tr.append(`<td class="text-right">${val}</td>`);
                        }
                    });
                    $tbody.append($tr);
                });
            });
        }

        renderTable();

        // Event: individual input change
        $tbody.on('input', '.sim-input-cell', function(){
            const lob = $(this).data('lob');
            const week = $(this).data('week');
            const val = parseFloat($(this).val()) || 0;
            simulatedShrinkage[`${lob}_${week}`] = val;

            // Recalculate dependent fields
            const d = getData(lob, week);
            if(d){
                const fteAvail = d.fteRequired * (1 - val/100);
                d.fteAvailable = fteAvail;
                d.delta = fteAvail - d.fteRequired;
                d.staffingPct = (fteAvail / d.fteRequired)*100;
            }

            renderTable();
        });

        // Event: Apply global simulation
        $toolbar.find('.btn-apply').on('click', function(){
            const val = parseFloat($toolbar.find('.sim-input-global').val()) || 0;
            lobs.forEach(lob => weeks.forEach(week => simulatedShrinkage[`${lob}_${week}`]=val));
            settings.data.forEach(d=>{
                if(weeks.includes(d.week)){
                    const fteAvail = d.fteRequired*(1-val/100);
                    d.fteAvailable = fteAvail;
                    d.delta = fteAvail - d.fteRequired;
                    d.staffingPct = (fteAvail/d.fteRequired)*100;
                }
            });
            renderTable();
        });

    };
}(jQuery));


<div id="simulator"></div>

<script>
const sampleData = [
    { geo: 'India', vertical: 'Retail', account: 'Amazon', lob: 'Customer Service', week: '01-Sep-25', fteRequired: 120, fteAvailable: 110, delta: -10, staffingPct: 91.7, plannedShrinkage: 10 },
    { geo: 'India', vertical: 'Retail', account: 'Amazon', lob: 'Customer Service', week: '08-Sep-25', fteRequired: 122, fteAvailable: 115, delta: -7, staffingPct: 94.3, plannedShrinkage: 10 },
    { geo: 'India', vertical: 'Retail', account: 'Amazon', lob: 'Tech Support', week: '01-Sep-25', fteRequired: 80, fteAvailable: 78, delta: -2, staffingPct: 97.5, plannedShrinkage: 9 },
    { geo: 'India', vertical: 'Retail', account: 'Amazon', lob: 'Tech Support', week: '08-Sep-25', fteRequired: 82, fteAvailable: 79, delta: -3, staffingPct: 96.3, plannedShrinkage: 9 }
];

$('#simulator').assumptionSimulator({ data: sampleData });
</script>

