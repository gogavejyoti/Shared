getSelectedCellsData: function () {
    const cellSelections = this._pivotCells?._selectedCells;
    const rowSelections = this._pivotRows?._selectedItems;
    const data = [];

    // --- CASE 1: CELL SELECTION ---
    if (cellSelections && Object.keys(cellSelections).length > 0) {
        const cellMap = {};

        Object.keys(cellSelections).forEach(key => {
            const cleanedKey = key.replace(':', '');
            const [colStr, rowStr] = cleanedKey.split('_');
            const rowIdx = parseInt(rowStr, 10);
            const colIdx = parseInt(colStr, 10);
            const cell = cellSelections[key];

            const valObj = this.source.getCellValue(
                cell.pivotRow.adapterItem,
                cell.pivotColumn.adapterItem
            );
            const value = valObj?.formattedValue ?? '';

            if (!cellMap[rowIdx]) cellMap[rowIdx] = {};
            cellMap[rowIdx][colIdx] = value;
        });

        const sortedRowIndices = Object.keys(cellMap).map(Number).sort((a, b) => a - b);
        const allColIndices = new Set();

        sortedRowIndices.forEach(rowIdx => {
            Object.keys(cellMap[rowIdx]).forEach(c => allColIndices.add(parseInt(c)));
        });

        const sortedColIndices = [...allColIndices].sort((a, b) => a - b);

        return sortedRowIndices.map(rowIdx => {
            return sortedColIndices.map(colIdx => {
                return cellMap[rowIdx][colIdx] ?? "";
            });
        });
    }

    // --- CASE 2: ROW SELECTION ---
    if (rowSelections && Object.keys(rowSelections).length > 0) {
        const allPivotColumns = this._pivotColumns.items || [];

        Object.keys(rowSelections).forEach(key => {
            const row = rowSelections[key];
            const rowData = allPivotColumns.map(col => {
                const valObj = this.source.getCellValue(
                    row.adapterItem,
                    col.adapterItem
                );
                return valObj?.formattedValue ?? '';
            });
            data.push(rowData);
        });
        return data;
    }

    return []; // No selection
}
