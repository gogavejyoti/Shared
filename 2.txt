using Microsoft.AspNetCore.SignalR;
using System;
using System.Collections.Concurrent;
using System.Threading.Tasks;

public class DocumentLockHub : Hub
{
    // Store document locks: documentId â†’ (userId, lockTime)
    private static ConcurrentDictionary<string, (string UserId, DateTime LockTime)> _locks 
        = new ConcurrentDictionary<string, (string, DateTime)>();

    // Try to lock document
    public async Task<bool> TryLockDocument(string documentId, string userId)
    {
        if (_locks.TryGetValue(documentId, out var lockInfo))
        {
            if (lockInfo.UserId == userId)
            {
                // Already locked by same user
                _locks[documentId] = (userId, DateTime.UtcNow);
                return true;
            }
            return false; // Locked by someone else
        }

        // Lock document
        _locks[documentId] = (userId, DateTime.UtcNow);
        return true;
    }

    // Unlock document explicitly
    public async Task UnlockDocument(string documentId, string userId)
    {
        if (_locks.TryGetValue(documentId, out var lockInfo) && lockInfo.UserId == userId)
        {
            _locks.TryRemove(documentId, out _);
        }
    }

    // Refresh lock timestamp (keep-alive)
    public async Task RefreshLock(string documentId, string userId)
    {
        if (_locks.TryGetValue(documentId, out var lockInfo) && lockInfo.UserId == userId)
        {
            _locks[documentId] = (userId, DateTime.UtcNow);
        }
    }

    // Cleanup locks when user disconnects
    public override async Task OnDisconnectedAsync(Exception exception)
    {
        string connectionId = Context.ConnectionId;
        foreach (var doc in _locks)
        {
            if (doc.Value.UserId == Context.UserIdentifier)
                _locks.TryRemove(doc.Key, out _);
        }
        await base.OnDisconnectedAsync(exception);
    }
}
