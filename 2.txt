function saveExtractedData(planId, savedConfigs, getSheetDataFn) {
    const data = extractAllData(planId, savedConfigs, getSheetDataFn);
    if (!data.length) {
        console.warn("No extracted data to save.");
        return;
    }
    return $.ajax({
        url: "/SheetConfig/SaveExtractedValues",
        type: "POST",
        contentType: "application/json",
        data: JSON.stringify(data)
    }).done(res => {
        console.log("Extracted values saved:", res);
    }).fail(err => {
        console.error("Save failed:", err);
    });
}



[HttpPost]
public async Task<IActionResult> SaveExtractedValues([FromBody] List<SheetValueDto> values)
{
    if (values == null || values.Count == 0)
        return BadRequest("No data received.");
    await _sheetConfigRepository.SaveExtractedValues(values);
    return Ok(new { saved = values.Count });
}


public async Task<bool> SaveExtractedValues(List<SheetValueDto> values)
{
    if (_connection.State != ConnectionState.Open)
        await ((SqlConnection)_connection).OpenAsync();

    // Use table-valued parameter for bulk merge
    var dt = new DataTable();
    dt.Columns.Add("PlanId", typeof(int));
    dt.Columns.Add("SheetName", typeof(string));
    dt.Columns.Add("Week", typeof(DateTime));
    dt.Columns.Add("Header", typeof(string));
    dt.Columns.Add("Value", typeof(decimal)); // adjust type

    foreach (var v in values)
    {
        dt.Rows.Add(v.PlanId, v.SheetName, DateTime.Parse(v.Week), v.Header, (object?)v.Value ?? DBNull.Value);
    }
    await _connection.ExecuteAsync(
        "dbo.MergeSheetValues",
        new { Values = dt.AsTableValuedParameter("dbo.SheetValueType") },
        commandType: CommandType.StoredProcedure
    );

    return true;
}
