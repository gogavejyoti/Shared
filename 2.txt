using Microsoft.AspNetCore.Mvc;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Data;

[ApiController]
[Route("api/analytics")]
public class AnalyticsController : ControllerBase
{
    private readonly string _connectionString = "Your_Connection_String"; // Replace with your actual connection string

    [HttpGet]
    public IActionResult GetAnalytics(int questionId)
    {
        var response = new AnalyticsResponse();

        switch (questionId)
        {
            case 1:
                response.Text = GetVolumeFluctuations(); // Example: "Offered vs Handled Volume Fluctuations"
                break;

            case 2:
                response.Text = GetShrinkageTrends(); // Example: "Shrinkage Trends"
                break;

            case 3:
                response.Text = GetAttritionAnalysis(); // Example: "Attrition Analysis"
                break;

            case 4:
                response.Text = GetFTEAvailability(); // Example: "FTE Availability Trends"
                break;

            case 5:
                response.Text = GetStaffingOptimization(); // Example: "Staffing Optimization"
                break;

            case 6:
                response.Text = GetAttritionForecast(); // Example: "Attrition Forecast"
                break;

            case 7:
                response.Text = GetOverstaffingIssues(); // Example: "Overstaffing Trends"
                break;

            case 8:
                response.Text = GetUnderstaffingIssues(); // Example: "Understaffing Trends"
                break;

            case 9:
                response.Text = GetHistoricalTrends(); // Example: "Historical Trends"
                break;

            case 10:
                response.Text = GetLOBComparison(); // Example: "LOB Comparison"
                break;

            default:
                return BadRequest("Invalid question ID.");
        }

        return Ok(response);
    }

    // Example implementations for each question (SQL queries and dynamic text generation):

    private string GetVolumeFluctuations()
    {
        var query = @"
            SELECT LOB, AVG(OfferedVolume) AS AvgOffered, AVG(HandledVolume) AS AvgHandled
            FROM CallVolumeData
            GROUP BY LOB";

        var results = ExecuteQuery(query);
        var responseText = "Offered vs Handled Volume Fluctuations:\n";

        foreach (var row in results)
        {
            var LOB = row["LOB"];
            var avgOffered = row["AvgOffered"];
            var avgHandled = row["AvgHandled"];
            var fluctuation = Math.Abs(Convert.ToDecimal(avgOffered) - Convert.ToDecimal(avgHandled));
            
            responseText += $"In {LOB}, the fluctuation between Offered and Handled volumes is {fluctuation:N2}. ";

            if (fluctuation > 10)
                responseText += "This indicates a significant imbalance and needs attention.\n";
            else
                responseText += "This fluctuation is within acceptable limits.\n";
        }

        return responseText;
    }

    private string GetShrinkageTrends()
    {
        var query = @"
            SELECT Month, AVG(ShrinkagePercentage) AS AvgShrinkage
            FROM StaffingData
            GROUP BY Month
            ORDER BY Month";

        var results = ExecuteQuery(query);
        var responseText = "Shrinkage Trends:\n";
        decimal previousShrinkage = 0;

        foreach (var row in results)
        {
            var month = row["Month"];
            var avgShrinkage = row["AvgShrinkage"];

            if (previousShrinkage > 0)
            {
                var change = Convert.ToDecimal(avgShrinkage) - previousShrinkage;
                var changeText = change > 0 ? "increase" : "decrease";
                responseText += $"In {month}, the shrinkage percentage saw a {changeText} of {Math.Abs(change):N2}%.\n";
            }

            previousShrinkage = Convert.ToDecimal(avgShrinkage);
        }

        return responseText;
    }

    private string GetAttritionAnalysis()
    {
        var query = @"
            SELECT LOB, AVG(AttritionRate) AS AvgAttrition
            FROM EmployeeData
            GROUP BY LOB";

        var results = ExecuteQuery(query);
        var responseText = "Attrition Analysis:\n";

        foreach (var row in results)
        {
            var LOB = row["LOB"];
            var avgAttrition = row["AvgAttrition"];

            if (Convert.ToDecimal(avgAttrition) > 10)
                responseText += $"In {LOB}, the attrition rate is high at {avgAttrition:N2}%. Consider reviewing employee retention strategies.\n";
            else
                responseText += $"In {LOB}, the attrition rate is stable at {avgAttrition:N2}%.\n";
        }

        return responseText;
    }

    private string GetFTEAvailability()
    {
        var query = @"
            SELECT Month, SUM(FTEAvailable) AS TotalFTE
            FROM StaffingData
            GROUP BY Month
            ORDER BY Month";

        var results = ExecuteQuery(query);
        var responseText = "FTE Availability Trends:\n";

        foreach (var row in results)
        {
            var month = row["Month"];
            var totalFTE = row["TotalFTE"];
            responseText += $"In {month}, the total available FTE was {totalFTE:N0}.\n";
        }

        return responseText;
    }

    private string GetStaffingOptimization()
    {
        var query = @"
            SELECT LOB, SUM(FTERequired) AS RequiredFTE, SUM(FTEAvailable) AS AvailableFTE
            FROM StaffingData
            GROUP BY LOB";

        var results = ExecuteQuery(query);
        var responseText = "Staffing Optimization:\n";

        foreach (var row in results)
        {
            var LOB = row["LOB"];
            var requiredFTE = row["RequiredFTE"];
            var availableFTE = row["AvailableFTE"];

            var discrepancy = Convert.ToDecimal(requiredFTE) - Convert.ToDecimal(availableFTE);
            responseText += $"In {LOB}, there is a discrepancy of {discrepancy:N2} FTE. Consider optimizing staffing levels.\n";
        }

        return responseText;
    }

    private string GetAttritionForecast()
    {
        var query = @"
            SELECT LOB, AVG(AttritionRate) AS AvgAttrition
            FROM EmployeeData
            WHERE ForecastMonth BETWEEN GETDATE() AND DATEADD(MONTH, 2, GETDATE())
            GROUP BY LOB";

        var results = ExecuteQuery(query);
        var responseText = "Attrition Forecast:\n";

        foreach (var row in results)
        {
            var LOB = row["LOB"];
            var avgAttrition = row["AvgAttrition"];

            responseText += $"For {LOB}, the predicted attrition rate for the next 2 months is {avgAttrition:N2}%. Consider preparing retention strategies.\n";
        }

        return responseText;
    }

    private string GetOverstaffingIssues()
    {
        var query = @"
            SELECT LOB, SUM(FTEAvailable) AS AvailableFTE, SUM(FTERequired) AS RequiredFTE
            FROM StaffingData
            WHERE AvailableFTE > RequiredFTE
            GROUP BY LOB";

        var results = ExecuteQuery(query);
        var responseText = "Overstaffing Issues:\n";

        foreach (var row in results)
        {
            var LOB = row["LOB"];
            var availableFTE = row["AvailableFTE"];
            var requiredFTE = row["RequiredFTE"];

            var overstaffed = Convert.ToDecimal(availableFTE) - Convert.ToDecimal(requiredFTE);
            responseText += $"In {LOB}, there are {overstaffed:N2} overstaffed FTEs.\n";
        }

        return responseText;
    }

    private string GetUnderstaffingIssues()
    {
        var query = @"
            SELECT LOB, SUM(FTERequired) AS RequiredFTE, SUM(FTEAvailable) AS AvailableFTE
            FROM StaffingData
            WHERE FTEAvailable < FTERequired
            GROUP BY LOB";

        var results = ExecuteQuery(query);
        var responseText = "Understaffing Issues:\n";

        foreach (var row in results)
        {
            var LOB = row["LOB"];
            var requiredFTE = row["RequiredFTE"];
            var availableFTE = row["AvailableFTE"];

            var understaffed = Convert.ToDecimal(requiredFTE) - Convert.ToDecimal(availableFTE);
            responseText += $"In {LOB}, there are {understaffed:N2} understaffed FTEs.\n";
        }

        return responseText;
    }

    private string GetHistoricalTrends()
    {
        var query = @"
            SELECT Year, SUM(ScheduledHours) AS TotalScheduled, SUM(WorkedHours) AS TotalWorked
            FROM HistoricalData
            GROUP BY Year
            ORDER BY Year";

        var results = ExecuteQuery(query);
        var responseText = "Historical Trends:\n";

        foreach (var row in results)
        {
            var year = row["Year"];
            var totalScheduled = row["TotalScheduled"];
            var totalWorked = row["TotalWorked"];

            responseText += $"In {year}, the scheduled hours were {totalScheduled:N0}, and the worked hours were {totalWorked:N0}.\n";
        }

        return responseText;
    }

    private string GetLOBComparison()
    {
        var query = @"
            SELECT LOB, AVG(OfferedVolume) AS AvgOffered, AVG(HandledVolume) AS AvgHandled
            FROM CallVolumeData
            GROUP BY LOB";

        var results = ExecuteQuery(query);
        var responseText = "LOB Comparison:\n";

        foreach (var row in results)
        {
            var LOB = row["LOB"];
            var avgOffered = row["AvgOffered"];
            var avgHandled = row["AvgHandled"];

            var comparison = Math.Abs(Convert.ToDecimal(avgOffered) - Convert.ToDecimal(avgHandled));
            responseText += $"In {LOB}, the comparison of offered to handled volume shows a discrepancy of {comparison:N2}.\n";
        }

        return responseText;
    }

    // Helper method to execute SQL query and return results
    private List<Dictionary<string, object>> ExecuteQuery(string query)
    {
        var results = new List<Dictionary<string, object>>();

        using (var connection = new SqlConnection(_connectionString))
        {
            connection.Open();
            using (var command = new SqlCommand(query, connection))
            {
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var row = new Dictionary<string, object>();
                        for (int i = 0; i < reader.FieldCount; i++)
                        {
                            row[reader.GetName(i)] = reader[i];
                        }
                        results.Add(row);
                    }
                }
            }
        }

        return results;
    }
}

public class AnalyticsResponse
{
    public string Text { get; set; }
}
