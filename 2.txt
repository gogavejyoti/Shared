getSelectedCellsData: function () {
  const sel = this._pivotCells?._selectedCells || {};
  const rows = {};

  Object.keys(sel).forEach(rawKey => {
    // rawKey looks like "7_0:" or "7_1:" etc.
    // Step-1: strip trailing colon, split on underscore
    const key = rawKey.endsWith(':') ? rawKey.slice(0, -1) : rawKey;
    const parts = key.split('_');
    if (parts.length !== 2) return;              // guard
    const rowIdx = parseInt(parts[0], 10);
    const colIdx = parseInt(parts[1], 10);

    // Fetch the cell entry and its formatted value
    const entry = sel[rawKey];
    const valObj = this.source.getCellValue(
      entry.pivotRow.adapterItem,
      entry.pivotColumn.adapterItem
    );
    const value = valObj?.formattedValue ?? '';

    // Accumulate into rows[rowIdx]
    if (!rows[rowIdx]) rows[rowIdx] = [];
    rows[rowIdx].push({ colIdx, value });
  });

  // Now build the 2D array
  const result = [];
  Object.keys(rows)
    .map(n => parseInt(n, 10))
    .sort((a, b) => a - b)           // row order
    .forEach(rowIdx => {
      const cells = rows[rowIdx]
        .sort((a, b) => a.colIdx - b.colIdx)  // column order
        .map(c => c.value);                   // extract just the values
      result.push(cells);
    });

  return result;
}
