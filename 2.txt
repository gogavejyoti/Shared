function buildStaffingTableDrillDown(data, containerId, drillMode = "GeoToLob") {
    const container = document.querySelector("#" + containerId);
    container.innerHTML = '';

    // Dropdown for drill mode
    const drillSelector = document.createElement("select");
    drillSelector.className = "form-select mb-2";
    drillSelector.style.width = "200px";
    ["GeoToLob", "LobToGeo"].forEach(mode => {
        const opt = document.createElement("option");
        opt.value = mode;
        opt.innerText = mode === "GeoToLob" ? "Geo â†’ LOB" : "LOB â†’ Geo";
        if (mode === drillMode) opt.selected = true;
        drillSelector.appendChild(opt);
    });
    drillSelector.addEventListener("change", () => {
        buildStaffingTableDrillDown(data, containerId, drillSelector.value);
    });
    container.appendChild(drillSelector);

    // Collect groups
    const groups = drillMode === "GeoToLob"
        ? [...new Set(data.map(d => d.geo))]
        : [...new Set(data.map(d => d.lob))];

    const months = [...new Set(data.map(d => d.monthFormat))]
        .sort((a, b) => new Date(a) - new Date(b));

    const table = document.createElement('table');
    table.className = 'table table-bordered table-striped';
    table.style.minWidth = (months.length * 120 + 100) + 'px';

    // ---------- Header ----------
    const thead = document.createElement('thead');
    const tr1 = document.createElement('tr');
    const thGroup = document.createElement('th');
    thGroup.rowSpan = 2;
    thGroup.innerText = drillMode === "GeoToLob" ? "Geo" : "LOB";
    tr1.appendChild(thGroup);

    months.forEach(m => {
        const th = document.createElement('th');
        th.colSpan = 4;
        th.innerText = m;
        tr1.appendChild(th);
    });
    thead.appendChild(tr1);

    const tr2 = document.createElement('tr');
    months.forEach(() => {
        ['FTE Req', 'FTE Available', 'Delta', 'Staffing %'].forEach(h => {
            const th = document.createElement('th');
            th.innerText = h;
            th.setAttribute('nowrap', '');
            tr2.appendChild(th);
        });
    });
    thead.appendChild(tr2);
    table.appendChild(thead);

    // ---------- Body ----------
    const tbody = document.createElement('tbody');

    // âœ… Overall summary row
    const trSummary = document.createElement("tr");
    trSummary.className = "table-primary fw-bold";
    const tdSummary = document.createElement("td");
    tdSummary.innerText = "Overall Summary";
    trSummary.appendChild(tdSummary);

    months.forEach(month => {
        const recs = data.filter(d => d.monthFormat === month);
        let required = Math.round(recs.reduce((s, r) => s + (r.requiredHC || 0), 0));
        let available = Math.round(recs.reduce((s, r) => s + (r.availableHC || 0), 0));
        let delta = available - required;
        let staffing = required > 0 ? Math.round((available / required) * 100) : 0;

        [required, available, delta, staffing].forEach((val, i) => {
            const td = document.createElement("td");
            td.innerText = (i < 3) ? val : staffing + "%";
            if (i === 2) td.style.color = (delta < 0) ? "red" : "green";
            trSummary.appendChild(td);
        });
    });
    tbody.appendChild(trSummary);

    // âœ… Drilldown rows
    groups.forEach(group => {
        const tr = document.createElement('tr');
        tr.className = 'groupRow';
        tr.style.cursor = 'pointer';
        const tdGroup = document.createElement('td');
        tdGroup.innerText = group;
        tr.appendChild(tdGroup);

        months.forEach(month => {
            const recs = data.filter(d =>
                (drillMode === "GeoToLob" ? d.geo === group : d.lob === group) &&
                d.monthFormat === month
            );
            let required = Math.round(recs.reduce((s, r) => s + (r.requiredHC || 0), 0));
            let available = Math.round(recs.reduce((s, r) => s + (r.availableHC || 0), 0));
            let delta = available - required;
            let staffing = required > 0 ? Math.round((available / required) * 100) : 0;

            [required, available, delta, staffing].forEach((val, i) => {
                const td = document.createElement('td');
                td.innerText = (i < 3) ? val : staffing + "%";
                if (i === 2) td.style.color = (delta < 0) ? "red" : "green";
                tr.appendChild(td);
            });
        });
        tbody.appendChild(tr);

        // ðŸ”½ Child rows
        const children = drillMode === "GeoToLob"
            ? [...new Set(data.filter(d => d.geo === group).map(d => d.lob))]
            : [...new Set(data.filter(d => d.lob === group).map(d => d.geo))];

        children.forEach(child => {
            const trChild = document.createElement("tr");
            trChild.className = "childRow";
            trChild.style.display = "none";
            const tdChild = document.createElement("td");
            tdChild.innerText = "   â”” " + child;
            tdChild.style.fontStyle = "italic";
            tdChild.style.fontSize = "0.85em";
            trChild.appendChild(tdChild);

            months.forEach(month => {
                const recs = data.filter(d =>
                    (drillMode === "GeoToLob"
                        ? d.geo === group && d.lob === child
                        : d.lob === group && d.geo === child) &&
                    d.monthFormat === month
                );
                let required = Math.round(recs.reduce((s, r) => s + (r.requiredHC || 0), 0));
                let available = Math.round(recs.reduce((s, r) => s + (r.availableHC || 0), 0));
                let delta = available - required;
                let staffing = required > 0 ? Math.round((available / required) * 100) : 0;

                [required, available, delta, staffing].forEach((val, i) => {
                    const td = document.createElement('td');
                    td.innerText = (i < 3) ? val : staffing + "%";
                    if (i === 2) td.style.color = (delta < 0) ? "red" : "green";
                    trChild.appendChild(td);
                });
            });
            tbody.appendChild(trChild);
        });

        // Toggle children
        tr.addEventListener("click", () => {
            let next = tr.nextElementSibling;
            while (next && next.classList.contains("childRow")) {
                next.style.display = (next.style.display === "none") ? "table-row" : "none";
                next = next.nextElementSibling;
            }
        });
    });

    table.appendChild(tbody);
    container.appendChild(table);
}
