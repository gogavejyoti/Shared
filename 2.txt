<!-- Dependencies -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/datatables.net-dt@1.14.0/css/jquery.dataTables.min.css">
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.3.0/dist/chart.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/datatables.net@1.14.0/js/jquery.dataTables.min.js"></script>

<style>
.dashboard-container { font-family:'Segoe UI',sans-serif; background:#f9fafb; padding:15px; }
.filters-bar { display:flex; flex-wrap:wrap; gap:10px; margin-bottom:15px; align-items:flex-end; }
.filters-bar .filter { display:flex; flex-direction:column; font-size:12px; min-width:150px; position:relative; }
.filters-bar .filter .dropdown-btn { background:#fff; border:1px solid #ccc; border-radius:5px; padding:5px 10px; cursor:pointer; text-align:left; }
.filters-bar .filter .dropdown-list { display:none; position:absolute; top:35px; left:0; background:#fff; border:1px solid #ccc; border-radius:5px; z-index:1000; max-height:150px; overflow-y:auto; width:100%; box-shadow:0 2px 6px rgba(0,0,0,0.15);}
.filters-bar .filter .dropdown-list label { display:flex; align-items:center; padding:2px 5px; cursor:pointer; }
.filters-bar .filter .dropdown-list input { margin-right:5px; }
.filters-bar button { height:35px; margin-top:18px; }
.kpi-container { display:flex; flex-wrap:wrap; gap:15px; margin-bottom:15px; }
.kpi-tile { flex:1; min-width:150px; background:#fff; border-radius:8px; padding:15px; box-shadow:0 2px 6px rgba(0,0,0,0.1); position:relative; text-align:center; }
.kpi-tile .kpi-label { font-size:13px; color:#555; }
.kpi-tile .kpi-value { font-size:24px; font-weight:bold; margin-top:5px; }
.charts-container { display:grid; grid-template-columns:repeat(auto-fit,minmax(300px,1fr)); gap:15px; margin-bottom:15px; }
.chart-card { background:#fff; border-radius:8px; padding:10px; box-shadow:0 2px 6px rgba(0,0,0,0.1); }
.table-container { background:#fff; border-radius:8px; padding:10px; box-shadow:0 2px 6px rgba(0,0,0,0.1); margin-top:15px; }
.breadcrumb { font-size:13px; margin-bottom:10px; }
</style>

<script>
(function ($) {
    $.fn.resourcePlanningDashboard = function (options) {
        const settings = $.extend({ data: [], containerId: '' }, options);
        const container = $('#' + settings.containerId);
        container.empty().addClass('dashboard-container');

        // ---------------------------
        // Pivot long-format to wide
        // ---------------------------
        const headerMap = {
            'Required HC': 'requiredHC',
            'Available HC': 'availableHC',
            'Actual Attrition': 'actualAttrition',
            'Planned Attrition': 'plannedAttrition',
            'Actual Shrinkage': 'actualShrinkage',
            'Planned Shrinkage': 'plannedShrinkage',
            'Forecasted Hours': 'forecastedHours',
            'Actual Hours': 'actualHours'
        };

        const pivotData = (data) => {
            const grouped = {};
            data.forEach(d => {
                const key = `${d.geo}|${d.site}|${d.projectId}|${d.lob}|${d.week}|${d.month}`;
                if (!grouped[key]) grouped[key] = { geo: d.geo, site: d.site, projectId: d.projectId, lob: d.lob, week: d.week, month: d.month };
                const internalKey = headerMap[d.header];
                if (internalKey) grouped[key][internalKey] = d.value;
            });
            return Object.values(grouped);
        };
        let wideData = pivotData(settings.data);

        // ---------------------------
        // Breadcrumb
        // ---------------------------
        let breadcrumb = [];
        const updateBreadcrumb = () => {
            container.find('.breadcrumb').remove();
            if (breadcrumb.length > 0) {
                const bc = $('<nav class="breadcrumb mb-3"></nav>');
                breadcrumb.forEach((b, i) => {
                    if (i === breadcrumb.length - 1) bc.append(`<span>${b}</span>`);
                    else bc.append(`<a href="#" class="breadcrumb-link" data-index="${i}">${b}</a> &gt; `);
                });
                container.prepend(bc);
                bc.find('.breadcrumb-link').on('click', function (e) {
                    e.preventDefault();
                    breadcrumb = breadcrumb.slice(0, parseInt($(this).data('index')) + 1);
                    renderDashboard();
                });
            }
        };

        // ---------------------------
        // Filters
        // ---------------------------
        const uniqueValues = field => Array.from(new Set(wideData.map(d => d[field]))).sort();
        const geoList = uniqueValues('geo'), siteList = uniqueValues('site'), projectList = uniqueValues('projectId'), lobList = uniqueValues('lob');
        const weekList = Array.from(new Set(wideData.map(d => d.week))).sort((a,b)=>new Date(a)-new Date(b));

        const filterBar = $('<div class="filters-bar"></div>');

        const createMultiSelect = (label, values) => {
            const filter = $('<div class="filter"></div>');
            filter.append(`<label>${label}</label>`);
            const btn = $(`<div class="dropdown-btn">Select ${label}</div>`);
            const list = $('<div class="dropdown-list"></div>');
            values.forEach(v => list.append(`<label><input type="checkbox" value="${v}" checked> ${v}</label>`));
            btn.on('click',()=>{ list.toggle(); });
            filter.append(btn).append(list);

            const updateBtnText = () => { 
                const selectedText = list.find('input:checked').map((i,e)=>$(e).val()).get().join(', ') || `Select ${label}`;
                btn.text(selectedText);
            };
            list.find('input[type=checkbox]').on('change', updateBtnText);
            updateBtnText();
            return filter;
        };

        const geoFilter = createMultiSelect('Geo', geoList);
        const siteFilter = createMultiSelect('Site', siteList);
        const projectFilter = createMultiSelect('Project', projectList);
        const lobFilter = createMultiSelect('LOB', lobList);

        // Close dropdowns on outside click
        $(document).on('click', function(e){
            $('.dropdown-list').each(function(){
                if(!$(this).is(e.target) && $(this).has(e.target).length === 0 && !$(this).prev('.dropdown-btn').is(e.target)){
                    $(this).hide();
                }
            });
        });

        // Week From / To dropdown
        const createWeekSelect = (label, values, defaultValue) => {
            const filter = $('<div class="filter"></div>');
            filter.append(`<label>${label}</label>`);
            const select = $('<select class="form-select form-select-sm"></select>');
            values.forEach(v=>select.append(`<option value="${v}">${v}</option>`));
            select.val(defaultValue);
            filter.append(select);
            return filter;
        };
        const currentWeekIndex = weekList.findIndex(w => new Date(w) >= new Date());
        const weekFromFilter = createWeekSelect('Week From', weekList, weekList[Math.max(0,currentWeekIndex-6)]);
        const weekToFilter = createWeekSelect('Week To', weekList, weekList[Math.min(weekList.length-1,currentWeekIndex+6)]);

        // Report Type
        const reportTypeFilter = $('<div class="filter"><label>Report Type</label><select class="form-select form-select-sm"><option value="weekly" selected>Weekly</option><option value="monthly">Monthly</option></select></div>');

        const applyBtn = $('<button class="btn btn-primary btn-sm">Apply Filters</button>');
        filterBar.append(geoFilter, siteFilter, projectFilter, lobFilter, weekFromFilter, weekToFilter, reportTypeFilter, applyBtn);
        container.append(filterBar);

        // KPI Tiles
        const kpiContainer = $('<div class="kpi-container"></div>');
        const kpiMetrics = ['Staffing %','Delta','Forecast Accuracy','Attrition %','Shrinkage %'];
        kpiMetrics.forEach(kpi=>{ kpiContainer.append(`<div class="kpi-tile"><div class="kpi-label">${kpi}</div><div class="kpi-value">0</div></div>`); });
        container.append(kpiContainer);

        // Charts
        const chartsContainer = $('<div class="charts-container"></div>');
        const chartIds = ['hcTrendChart','deltaChart','attritionChart','hoursChart','shareChart'];
        chartIds.forEach(id=>chartsContainer.append(`<div class="chart-card"><canvas id="${id}" height="220"></canvas></div>`));
        container.append(chartsContainer);

        // Table
        const tableContainer = $('<div class="table-container"><table id="resourceTable" class="display nowrap" width="100%"></table></div>');
        container.append(tableContainer);

        // Render Dashboard
        const renderDashboard = () => {
            updateBreadcrumb();

            const selectedGeo = geoFilter.find('input:checked').map((i,e)=>$(e).val()).get();
            const selectedSite = siteFilter.find('input:checked').map((i,e)=>$(e).val()).get();
            const selectedProject = projectFilter.find('input:checked').map((i,e)=>$(e).val()).get();
            const selectedLOB = lobFilter.find('input:checked').map((i,e)=>$(e).val()).get();
            const weekFrom = weekFromFilter.find('select').val();
            const weekTo = weekToFilter.find('select').val();
            const reportType = reportTypeFilter.find('select').val();

            let filtered = wideData.filter(d=>selectedGeo.includes(d.geo) && selectedSite.includes(d.site) && selectedProject.includes(d.projectId) && selectedLOB.includes(d.lob));
            filtered = filtered.filter(d=>d.week>=weekFrom && d.week<=weekTo);

            if(reportType==='monthly'){
                const grouped = {};
                filtered.forEach(d=>{
                    const key = `${d.geo}|${d.site}|${d.projectId}|${d.lob}|${d.month}`;
                    if(!grouped[key]) grouped[key]={...d, week:d.month};
                    else {
                        ['requiredHC','availableHC','forecastedHours','actualHours','plannedAttrition','actualAttrition','plannedShrinkage','actualShrinkage'].forEach(f=>{ grouped[key][f]=(grouped[key][f]||0)+(d[f]||0); });
                    }
                });
                filtered = Object.values(grouped);
            }

            // KPI Tiles
            const currentPeriod = filtered[filtered.length-1];
            if(currentPeriod){
                const delta=currentPeriod.availableHC-currentPeriod.requiredHC;
                const staffingPct=currentPeriod.requiredHC>0?((currentPeriod.availableHC/currentPeriod.requiredHC)*100).toFixed(1)+'%':'0%';
                const forecastPct=currentPeriod.forecastedHours>0?((currentPeriod.actualHours/currentPeriod.forecastedHours)*100).toFixed(1)+'%':'0%';
                const attrPct=currentPeriod.plannedAttrition>0?((currentPeriod.actualAttrition/currentPeriod.plannedAttrition)*100).toFixed(1)+'%':'0%';
                const shrinkPct=currentPeriod.plannedShrinkage>0?((currentPeriod.actualShrinkage/currentPeriod.plannedShrinkage)*100).toFixed(1)+'%':'0%';

                const tiles = kpiContainer.find('.kpi-value');
                tiles.eq(0).text(staffingPct);
                tiles.eq(1).text(delta);
                tiles.eq(2).text(forecastPct);
                tiles.eq(3).text(attrPct);
                tiles.eq(4).text(shrinkPct);
            }

            // ---------------------------
            // Charts
            // ---------------------------
            const weeksSorted = [...new Set(filtered.map(d=>d.week))].sort((a,b)=>new Date(a)-new Date(b));
            const sumByWeek = field => weeksSorted.map(w=>filtered.filter(d=>d.week===w).reduce((a,b)=>a+(b[field]||0),0));
            const hcRequired=sumByWeek('requiredHC'), hcAvailable=sumByWeek('availableHC'), hcDelta=hcAvailable.map((v,i)=>v-hcRequired[i]);
            const forecasted=sumByWeek('forecastedHours'), actualH=sumByWeek('actualHours');
            const attrPlanned=sumByWeek('plannedAttrition'), attrActual=sumByWeek('actualAttrition');
            const shrinkPlanned=sumByWeek('plannedShrinkage'), shrinkActual=sumByWeek('actualShrinkage');
            const geoShare=[...new Set(filtered.map(d=>d.geo))].map(g=>({geo:g,value:filtered.filter(d=>d.geo===g).reduce((a,b)=>a+(b['availableHC']||0),0)}));

            const destroyChart=id=>{ const c=Chart.getChart(id); if(c) c.destroy(); };
            chartIds.forEach(destroyChart);

            new Chart(document.getElementById('hcTrendChart'),{type:'line',data:{labels:weeksSorted,datasets:[{label:'Required HC',data:hcRequired,borderColor:'#3b82f6',backgroundColor:'#3b82f622',fill:true},{label:'Available HC',data:hcAvailable,borderColor:'#10b981',backgroundColor:'#10b98122',fill:true}]},options:{responsive:true,plugins:{legend:{position:'top'}}}});
            new Chart(document.getElementById('deltaChart'),{type:'bar',data:{labels:weeksSorted,datasets:[{label:'Delta HC',data:hcDelta,backgroundColor:hcDelta.map(v=>v<0?'#ef4444':'#10b981')}]} ,options:{responsive:true,plugins:{legend:{display:false}}}});
            new Chart(document.getElementById('attritionChart'),{type:'line',data:{labels:weeksSorted,datasets:[{label:'Planned Attrition',data:attrPlanned,borderColor:'#f97316',fill:false},{label:'Actual Attrition',data:attrActual,borderColor:'#ef4444',fill:false}]},options:{responsive:true,plugins:{legend:{position:'top'}}}});
            new Chart(document.getElementById('hoursChart'),{type:'line',data:{labels:weeksSorted,datasets:[{label:'Forecasted Hours',data:forecasted,borderColor:'#3b82f6',fill:true,backgroundColor:'#3b82f622'},{label:'Actual Hours',data:actualH,borderColor:'#10b981',fill:true,backgroundColor:'#10b98122'}]},options:{responsive:true,plugins:{legend:{position:'top'}}}});
            const shareData={labels:geoShare.map(d=>d.geo),datasets:[{data:geoShare.map(d=>d.value),backgroundColor:['#3b82f6','#10b981','#f97316','#ef4444','#8b5cf6']}]};
            new Chart(document.getElementById('shareChart'),{type:'doughnut',data:shareData,options:{responsive:true,plugins:{legend:{position:'top'}}}});

            // ---------------------------
            // Table
            // ---------------------------
            const columns=[{title:reportType==='weekly'?'Week':'Month',data:'week'},{title:'Required HC',data:'requiredHC'},{title:'Available HC',data:'availableHC'},{title:'Delta',data:d=>d.availableHC-d.requiredHC},{title:'Staffing %',data:d=>d.requiredHC>0?((d.availableHC/d.requiredHC)*100).toFixed(1)+'%':'0%'},{title:'Forecasted Hours',data:'forecastedHours'},{title:'Actual Hours',data:'actualHours'},{title:'Planned Attrition',data:'plannedAttrition'},{title:'Actual Attrition',data:'actualAttrition'},{title:'Planned Shrinkage',data:'plannedShrinkage'},{title:'Actual Shrinkage',data:'actualShrinkage'}];

            if($.fn.DataTable.isDataTable('#resourceTable')) $('#resourceTable').DataTable().destroy();
            $('#resourceTable').DataTable({data:filtered,columns:columns,scrollX:true,scrollY:'300px',scrollCollapse:true,paging:false,fixedHeader:true});
        };

        renderDashboard();
        applyBtn.on('click',renderDashboard);
    };
}(jQuery));
</script>
