(function ($) {
    $.fn.weekAnalyticsPopup = function (options) {
        const settings = $.extend({
            data: [],
            weekStartDay: 'sunday'
        }, options);

        $('#analyticsModal').remove();

        // Styles
        const styles = `
        <style>
            #chartsContainer { display:grid; grid-template-columns:repeat(2,1fr); gap:20px; justify-items:center; }
            #chartsContainer canvas { width:100% !important; max-width:450px; height:220px !important; }
            .custom-multiselect { position: relative; display: inline-block; width: 200px; }
            .custom-multiselect button { width: 100%; text-align: left; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; }
            .custom-multiselect .multiselect-options { 
                display: none; max-height:200px; overflow-y:auto; position:absolute; z-index:1000; background:white; border:1px solid #ced4da; border-radius:4px; padding:5px 0; width: 100%;
                box-shadow:0 2px 5px rgba(0,0,0,0.15);
            }
            .custom-multiselect .multiselect-options label { display:block; padding:5px 10px; cursor:pointer; }
            .custom-multiselect .multiselect-options label:hover { background-color:#f1f1f1; }
            .modal-header { background: linear-gradient(90deg,#007bff,#28a745); color: #fff; }

            /* Staffing Summary Table */
            .table-summary { max-height:400px; overflow:auto; display:block; }
            .table-summary table { border-collapse: separate; border-spacing: 0; min-width: 100%; }
            .table-summary th, .table-summary td { white-space: nowrap; text-align:center; border:1px solid #dee2e6; }
            .table-summary thead th { position: sticky; top:0; background:#007bff; color:#fff; z-index:5; }
            .table-summary th:first-child, .table-summary td:first-child,
            .table-summary th:nth-child(2), .table-summary td:nth-child(2) {
                position: sticky;
                left:0;
                background:#f8f9fa;
                z-index:4;
            }
            .table-summary th:nth-child(2), .table-summary td:nth-child(2) { left: 120px; } 
        </style>`;
        $('head').append(styles);

        // Modal HTML with tabs
        const modalHTML = `
        <div class="modal fade" id="analyticsModal" tabindex="-1">
          <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Workforce Analytics Dashboard</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <ul class="nav nav-tabs mb-3" id="analyticsTabs" role="tablist">
                  <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="summary-tab" data-bs-toggle="tab" data-bs-target="#summaryTab" type="button" role="tab">Staffing Summary</button>
                  </li>
                  <li class="nav-item" role="presentation">
                    <button class="nav-link" id="charts-tab" data-bs-toggle="tab" data-bs-target="#chartsTab" type="button" role="tab">Charts</button>
                  </li>
                </ul>
                <div class="tab-content">
                  <div class="tab-pane fade show active" id="summaryTab" role="tabpanel">
                    <div id="analyticsSummary" class="table-summary"></div>
                  </div>
                  <div class="tab-pane fade" id="chartsTab" role="tabpanel">
                    <div class="filters mb-3 p-3 border rounded bg-light d-flex flex-wrap align-items-center gap-2">
                      <label>From Week: 
                        <select id="fromWeek" class="form-select d-inline-block w-auto"></select>
                      </label>
                      <label>To Week: 
                        <select id="toWeek" class="form-select d-inline-block w-auto"></select>
                      </label>
                      <label>LOB: 
                        <div class="custom-multiselect" id="lobSelectContainer">
                            <button type="button" class="btn btn-light dropdown-toggle" id="lobSelectBtn">Select LOBs</button>
                            <div class="multiselect-options"></div>
                        </div>
                      </label>
                      <label class="ms-2"><input type="checkbox" id="comparisonMode"> Comparison Mode</label>
                      <button id="applyFilter" class="btn btn-primary btn-sm">Apply Filter</button>
                      <button id="exportCsv" class="btn btn-secondary btn-sm">Export CSV</button>
                    </div>
                    <div id="chartsContainer" class="mt-3"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>`;
        $('body').append(modalHTML);

        const $chartsContainer = $('#chartsContainer');
        const $analyticsSummary = $('#analyticsSummary');

        const parseWeek = (weekStr) => {
            const [dd, mmm, yy] = weekStr.split('-');
            return new Date(`${mmm} ${dd}, 20${yy}`);
        };
        const formatWeek = (date) => {
            const dd = String(date.getDate()).padStart(2, '0');
            const mmm = date.toLocaleString('default', { month: 'short' });
            const yy = String(date.getFullYear()).slice(-2);
            return `${dd}-${mmm}-${yy}`;
        };
        const getCurrentWeek = () => {
            const today = new Date();
            const dayOfWeek = today.getDay();
            const diff = settings.weekStartDay === 'sunday' ? dayOfWeek : (dayOfWeek + 6) % 7;
            const lastWeekDate = new Date(today);
            lastWeekDate.setDate(today.getDate() - diff);
            return formatWeek(lastWeekDate);
        };

        const structuredData = (() => {
            const grouped = {};
            settings.data.forEach(item => {
                if (!grouped[item.week]) grouped[item.week] = { Week: item.week };
                grouped[item.week][`${item.header}||${item.sheetName}`] = item.value;
            });
            return Object.values(grouped).sort((a, b) => parseWeek(a.Week) - parseWeek(b.Week));
        })();

        const uniqueLOBs = [...new Set(settings.data.map(d => d.sheetName))].sort();
        const uniqueWeeks = [...new Set(settings.data.map(d => d.week))].sort((a, b) => parseWeek(a) - parseWeek(b));

        // Populate week filters
        uniqueWeeks.forEach(week => {
            $('#fromWeek').append(`<option value="${week}">${week}</option>`);
            $('#toWeek').append(`<option value="${week}">${week}</option>`);
        });
        const currentWeek = getCurrentWeek();
        const currentIndex = uniqueWeeks.indexOf(currentWeek);
        const fallbackIndex = currentIndex >= 0 ? currentIndex : uniqueWeeks.length - 1;
        const fromIndex = Math.max(0, fallbackIndex - 6);
        const toIndex = Math.min(uniqueWeeks.length - 1, fallbackIndex + 6);
        $('#fromWeek').val(uniqueWeeks[fromIndex]);
        $('#toWeek').val(uniqueWeeks[toIndex]);

        // Multi-select LOBs
        const $lobContainer = $('#lobSelectContainer');
        const $lobBtn = $('#lobSelectBtn');
        const $optionsDiv = $lobContainer.find('.multiselect-options');
        uniqueLOBs.forEach(lob => $optionsDiv.append(`<label><input type="checkbox" value="${lob}"> ${lob}</label>`));
        $lobBtn.on('click', e => { e.stopPropagation(); $optionsDiv.toggle(); });
        $(document).on('click', () => $optionsDiv.hide());
        const getSelectedLOBs = () => {
            const selected = [];
            $optionsDiv.find('input:checked').each(function () { selected.push($(this).val()); });
            return selected.length ? selected : [uniqueLOBs[0]];
        };
        $optionsDiv.find('input').first().prop('checked', true).trigger('change');
        $optionsDiv.find('input').on('change', function () { $lobBtn.text(getSelectedLOBs().join(', ')); });

        // RAG color logic
        const getRAGColor = (header, value) => {
            if (header === 'Staffing %') {
                if (value >= 100) return '#28a745';
                else if (value >= 90) return '#ffc107';
                else return '#dc3545';
            }
            if (header === 'Delta') {
                if (value >= 0) return '#28a745';
                else return '#dc3545';
            }
            return '';
        };

        // Generate Staffing Summary (FTE metrics only)
        const generateSummary = () => {
            const metrics = ['Required HC', 'Available HC', 'Delta', 'Staffing %'];
            let html = `<table class="table table-striped table-hover"><thead><tr><th rowspan="2">LOB</th><th rowspan="2">Metric</th>`;
            uniqueWeeks.forEach(week => html += `<th>${week}</th>`);
            html += `</tr></thead><tbody>`;
            uniqueLOBs.forEach(lob => {
                metrics.forEach(header => {
                    html += `<tr><td>${lob}</td><td>${header}</td>`;
                    uniqueWeeks.forEach(week => {
                        let val = structuredData.find(d => d.Week === week)?.[`${header}||${lob}`] || 0;
                        if (header === 'Staffing %') val = ((structuredData.find(d => d.Week === week)?.[`Available HC||${lob}`] || 0) / (structuredData.find(d => d.Week === week)?.[`Required HC||${lob}`] || 1) * 100).toFixed(2);
                        const color = getRAGColor(header, val);
                        html += `<td style="background:${color};">${val}${header === 'Staffing %' ? '%' : ''}</td>`;
                    });
                    html += `</tr>`;
                });
            });
            html += `</tbody></table>`;
            $analyticsSummary.html(html);
        };

        // Filtered data for charts
        const filterData = () => {
            const fromWeek = $('#fromWeek').val();
            const toWeek = $('#toWeek').val();
            const selectedLOBs = getSelectedLOBs();
            const isComparison = $('#comparisonMode').is(':checked');
            const filtered = structuredData.filter(d => parseWeek(d.Week) >= parseWeek(fromWeek) && parseWeek(d.Week) <= parseWeek(toWeek));
            return { filtered, selectedLOBs, isComparison };
        };

        const renderCharts = (filtered, selectedLOBs, isComparison) => {
            $chartsContainer.empty();
            /* Keep your existing chart rendering logic intact here */
        };

        // Render charts on tab shown
        $('a[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
            if ($(e.target).attr('id') === 'charts-tab') {
                const { filtered, selectedLOBs, isComparison } = filterData();
                renderCharts(filtered, selectedLOBs, isComparison);
            }
        });

        $('#applyFilter').off('click').on('click', () => {
            generateSummary(); // Staffing summary shows all LOBs
            const { filtered, selectedLOBs, isComparison } = filterData();
            renderCharts(filtered, selectedLOBs, isComparison);
        });

        $('#exportCsv').off('click').on('click', () => { const { filtered, selectedLOBs } = filterData(); exportCSV(filtered, selectedLOBs); });

        generateSummary();
        $('#analyticsModal').modal('show');

        return this;
    };
})(jQuery);
