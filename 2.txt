(function ($) {
    var originalAjax = $.ajax;
    $.ajax = function (options) {
        var originalSuccess = options.success;
        options.success = function (data, textStatus, jqXHR) {
            data = sanitizeJson(data); // Clean response globally
            if (originalSuccess) originalSuccess(data, textStatus, jqXHR);
        };
        return originalAjax.call(this, options);
    };

    function sanitizeJson(obj) {
        if (obj && typeof obj === 'object') {
            ['__proto__', 'constructor', 'prototype'].forEach(key => {
                if (key in obj) delete obj[key];
            });
        }
        return obj;
    }
})(jQuery);


using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using System.Text.Json;
using System.Text.Json.Nodes;

public class SanitizeJsonAttribute : ActionFilterAttribute
{
    public override void OnActionExecuting(ActionExecutingContext context)
    {
        if (context.ActionArguments != null)
        {
            foreach (var key in context.ActionArguments.Keys)
            {
                if (context.ActionArguments[key] is string jsonString)
                {
                    context.ActionArguments[key] = SanitizeJson(jsonString);
                }
            }
        }
        base.OnActionExecuting(context);
    }

    private string SanitizeJson(string jsonString)
    {
        try
        {
            JsonNode? jsonNode = JsonNode.Parse(jsonString);
            if (jsonNode is JsonObject jsonObject)
            {
                RemoveUnsafeKeys(jsonObject);
            }
            return jsonNode?.ToJsonString() ?? jsonString;
        }
        catch
        {
            return jsonString; // Return original if parsing fails
        }
    }

    private void RemoveUnsafeKeys(JsonObject obj)
    {
        string[] unsafeKeys = { "__proto__", "constructor", "prototype" };
        
        foreach (var key in unsafeKeys)
        {
            obj.Remove(key);
        }

        // Recursively clean nested objects
        foreach (var prop in obj.ToList())  // Convert to list to avoid modifying collection during iteration
        {
            if (prop.Value is JsonObject nestedObj)
            {
                RemoveUnsafeKeys(nestedObj);
            }
        }
    }
}



var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers(options => options.Filters.Add<SanitizeJsonAttribute>());
var app = builder.Build();
app.UseAuthorization();
app.MapControllers();
app.Run();



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ApexChart in Card</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <style>
        .card {
            width: 400px;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
    </style>
</head>
<body>

    <div class="card">
        <h3>Sales Overview</h3>
        <div id="chart"></div>
    </div>

    <script>
        $(document).ready(function () {
            var options = {
                series: [{
                    name: "Sales",
                    data: [10, 20, 15, 30, 25, 40, 35]
                }],
                chart: {
                    type: "line",
                    height: 250
                },
                xaxis: {
                    categories: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
                }
            };

            var chart = new ApexCharts($("#chart")[0], options);
            chart.render();
        });
    </script>

</body>
</html>



 var options = {
          series: [
          {
            name: "High - 2013",
            data: [28, 29, 33, 36, 32, 32, 33]
          },
          {
            name: "Low - 2013",
            data: [12, 11, 14, 18, 17, 13, 13]
          }
        ],
          chart: {
          height: 350,
          type: 'line',
          dropShadow: {
            enabled: true,
            color: '#000',
            top: 18,
            left: 7,
            blur: 10,
            opacity: 0.5
          },
          zoom: {
            enabled: false
          },
          toolbar: {
            show: false
          }
        },
        colors: ['#77B6EA', '#545454'],
        dataLabels: {
          enabled: true,
        },
        stroke: {
          curve: 'smooth'
        },
        title: {
          text: 'Average High & Low Temperature',
          align: 'left'
        },
        grid: {
          borderColor: '#e7e7e7',
          row: {
            colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns
            opacity: 0.5
          },
        },
        markers: {
          size: 1
        },
        xaxis: {
          categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
          title: {
            text: 'Month'
          }
        },
        yaxis: {
          title: {
            text: 'Temperature'
          },
          min: 5,
          max: 40
        },
        legend: {
          position: 'top',
          horizontalAlign: 'right',
          floating: true,
          offsetY: -25,
          offsetX: -5
        }
        };


  var options = {
          series: [{
          name: 'Inflation',
          data: [2.3, 3.1, 4.0, 10.1, 4.0, 3.6, 3.2, 2.3, 1.4, 0.8, 0.5, 0.2]
        }],
          chart: {
          height: 350,
          type: 'bar',
        },
        plotOptions: {
          bar: {
            borderRadius: 10,
            dataLabels: {
              position: 'top', // top, center, bottom
            },
          }
        },
        dataLabels: {
          enabled: true,
          formatter: function (val) {
            return val + "%";
          },
          offsetY: -20,
          style: {
            fontSize: '12px',
            colors: ["#304758"]
          }
        },
        
        xaxis: {
          categories: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
          position: 'top',
          axisBorder: {
            show: false
          },
          axisTicks: {
            show: false
          },
          crosshairs: {
            fill: {
              type: 'gradient',
              gradient: {
                colorFrom: '#D8E3F0',
                colorTo: '#BED1E6',
                stops: [0, 100],
                opacityFrom: 0.4,
                opacityTo: 0.5,
              }
            }
          },
          tooltip: {
            enabled: true,
          }
        },
        yaxis: {
          axisBorder: {
            show: false
          },
          axisTicks: {
            show: false,
          },
          labels: {
            show: false,
            formatter: function (val) {
              return val + "%";
            }
          }
        
        },
        title: {
          text: 'Monthly Inflation in Argentina, 2002',
          floating: true,
          offsetY: 330,
          align: 'center',
          style: {
            color: '#444'
          }
        }
        };

        var chart = new ApexCharts(document.querySelector("#chart"), options);
        chart.render();

        var chart = new ApexCharts(document.querySelector("#chart"), options);
        chart.render();

