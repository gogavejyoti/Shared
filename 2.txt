(function ($) {
    $.fn.staffingSummaryPopup = function (options) {
        const settings = $.extend({
            data: [],
            weekStartDay: 'sunday'
        }, options);

        $('#analyticsModal').remove();

        if ($('#weekAnalyticsPopupStyles').length === 0) {
            $('head').append(`
            <style id="weekAnalyticsPopupStyles">
                #analyticsModal .table-wrapper {
                    overflow-x: auto;
                    overflow-y: auto;
                    max-height: 500px;
                    position: relative;
                    border: 1px solid #ccc;
                    background: #fff;
                }
                #analyticsModal table {
                    border-collapse: collapse;
                    width: max-content;
                    table-layout: auto;
                }
                #analyticsModal th,
                #analyticsModal td {
                    border-top: 1px solid #ddd;
                    padding: 8px;
                    text-align: center;
                    white-space: nowrap;
                    background: #fff;
                    overflow: hidden;
                    text-overflow: ellipsis;
                }
                #analyticsModal thead th {
                    position: sticky;
                    top: 0;
                    background: #f1f1f1;
                    z-index: 6;
                }
                #analyticsModal thead th.sticky-left {
                    position: sticky;
                    top: 0;
                    left: 0;
                    background: #f1f1f1;
                    z-index: 7;
                    min-width: 120px;
                }
                #analyticsModal thead th.sticky-left-2 {
                    position: sticky;
                    top: 0;
                    left: 120px;
                    background: #f1f1f1;
                    z-index: 7;
                    min-width: 150px;
                }
                #analyticsModal tbody td.sticky-left {
                    position: sticky;
                    left: 0;
                    background: #f1f1f1;
                    z-index: 5;
                    min-width: 120px;
                }
                #analyticsModal tbody td.sticky-left-2 {
                    position: sticky;
                    left: 120px;
                    background: #f1f1f1;
                    z-index: 5;
                    min-width: 150px;
                }
                #analyticsModal .rag-red { color: red; font-weight: bold; }
                #analyticsModal .rag-amber { color: orange; font-weight: bold; }
                #analyticsModal .rag-green { color: green; font-weight: bold; }
                #analyticsModal .filter-container {
                    margin: 10px;
                }
                .dropdown-checkbox {
                    max-height: 250px;
                    overflow-y: auto;
                    padding: 10px;
                }
            </style>
            `);
        }

        const modalHTML = `
        <div class="modal fade" id="analyticsModal" tabindex="-1" style="z-index:9999;zoom:85%">
          <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Staffing Summary</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body p-0">
                <div class="filter-container">
                    <div class="row g-2 align-items-center">
                        <div class="col-auto">
                            <label><b>LOB:</b></label><br/>
                            <div class="dropdown">
                                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="lobDropdownBtn" data-bs-toggle="dropdown">
                                    Select LOBs
                                </button>
                                <div class="dropdown-menu dropdown-checkbox" aria-labelledby="lobDropdownBtn" id="lobDropdown">
                                    <!-- Checkboxes inserted dynamically -->
                                </div>
                            </div>
                        </div>

                        <div class="col-auto">
                            <label><b>Metrics:</b></label><br/>
                            <div class="dropdown">
                                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="metricDropdownBtn" data-bs-toggle="dropdown">
                                    Select Metrics
                                </button>
                                <div class="dropdown-menu dropdown-checkbox" aria-labelledby="metricDropdownBtn" id="metricDropdown">
                                    <label><input type="checkbox" value="Required HC" checked> Required HC</label><br/>
                                    <label><input type="checkbox" value="Available HC" checked> Available HC</label><br/>
                                    <label><input type="checkbox" value="Delta" checked> Delta</label><br/>
                                    <label><input type="checkbox" value="Staffing %" checked> Staffing %</label><br/>
                                </div>
                            </div>
                        </div>

                        <div class="col-auto">
                            <label><b>Week From:</b></label><br/>
                            <div class="dropdown">
                                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="weekFromDropdownBtn" data-bs-toggle="dropdown">
                                    Select From Week
                                </button>
                                <div class="dropdown-menu dropdown-checkbox" aria-labelledby="weekFromDropdownBtn" id="weekFromDropdown">
                                    <!-- Weeks inserted dynamically -->
                                </div>
                            </div>
                        </div>

                        <div class="col-auto">
                            <label><b>Week To:</b></label><br/>
                            <div class="dropdown">
                                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="weekToDropdownBtn" data-bs-toggle="dropdown">
                                    Select To Week
                                </button>
                                <div class="dropdown-menu dropdown-checkbox" aria-labelledby="weekToDropdownBtn" id="weekToDropdown">
                                    <!-- Weeks inserted dynamically -->
                                </div>
                            </div>
                        </div>

                        <div class="col-auto">
                            <button id="applyFilterBtn" class="btn btn-primary btn-sm mt-3">Apply Filter</button>
                        </div>
                    </div>
                </div>
                <div class="table-wrapper" id="staffingContainer"></div>
              </div>
            </div>
          </div>
        </div>`;
        $('body').append(modalHTML);

        const $container = $('#staffingContainer');
        const parseWeek = w => {
            const [dd, mmm, yy] = w.split('-');
            const fullYear = yy.length === 2 ? (parseInt(yy, 10) < 50 ? '20' + yy : '19' + yy) : yy;
            return new Date(`${mmm} ${dd}, ${fullYear}`);
        };

        const uniqueWeeks = [...new Set(settings.data.map(d => d.week))]
            .sort((a, b) => parseWeek(a) - parseWeek(b));
        const uniqueLOBs = [...new Set(settings.data.map(d => d.sheetName))].sort();
        const metrics = ['Required HC', 'Available HC', 'Delta', 'Staffing %'];

        const groupedData = {};
        settings.data.forEach(d => {
            if (!groupedData[d.sheetName]) groupedData[d.sheetName] = {};
            if (!groupedData[d.sheetName][d.week]) groupedData[d.sheetName][d.week] = {};
            groupedData[d.sheetName][d.week][d.header] = Number(d.value);
        });

        uniqueLOBs.forEach(lob => {
            uniqueWeeks.forEach(week => {
                const req = groupedData[lob][week]?.['Required HC'] || 0;
                const avail = groupedData[lob][week]?.['Available HC'] || 0;
                groupedData[lob][week]['Delta'] = avail - req;
                groupedData[lob][week]['Staffing %'] = req === 0 ? 0 : Math.round((avail / req) * 100);
            });
        });

        const lobColors = ['#2c3e50', '#34495e', '#16a085', '#8e44ad', '#d35400', '#7f8c8d', '#27ae60', '#c0392b'];

        function populateFilters() {
            uniqueLOBs.forEach(lob => {
                $('#lobDropdown').append(`<label><input type="checkbox" class="lobCheckbox" value="${lob}" checked> ${lob}</label><br/>`);
            });

            uniqueWeeks.forEach(week => {
                $('#weekFromDropdown').append(`<label><input type="radio" name="weekFrom" value="${week}" checked> ${week}</label><br/>`);
                $('#weekToDropdown').append(`<label><input type="radio" name="weekTo" value="${week}" checked> ${week}</label><br/>`);
            });
        }

        function buildTable(selectedLOBs, selectedMetrics, weekFrom, weekTo) {
            const fromIndex = uniqueWeeks.indexOf(weekFrom);
            const toIndex = uniqueWeeks.indexOf(weekTo);
            const weeksInRange = uniqueWeeks.slice(
                Math.min(fromIndex, toIndex),
                Math.max(fromIndex, toIndex) + 1
            );

            let html = '<table><thead><tr>';
            html += `<th class="sticky-left">LOB</th>`;
            html += `<th class="sticky-left-2">Metric</th>`;
            weeksInRange.forEach(week => html += `<th>${week}</th>`);
            html += '</tr></thead><tbody>';

            selectedLOBs.forEach((lob, lobIndex) => {
                const lobColor = lobColors[lobIndex % lobColors.length];
                selectedMetrics.forEach((metric, i) => {
                    html += '<tr>';

                    if (i === 0) {
                        html += `<td class="sticky-left" rowspan="${selectedMetrics.length}" style="background:${lobColor}; color:#fff;">${lob}</td>`;
                    }

                    html += `<td class="sticky-left-2">${metric}</td>`;

                    weeksInRange.forEach(week => {
                        let val = (groupedData[lob][week] && groupedData[lob][week][metric]) || 0;
                        val = Math.round(val);

                        let cls = '';
                        if (metric === 'Delta' && val < 0) cls = 'rag-red';
                        if (metric === 'Staffing %') {
                            if (val < 80) cls = 'rag-red';
                            else if (val < 100) cls = 'rag-amber';
                            else cls = 'rag-green';
                            val = `${val}%`;
                        } else {
                            val = new Intl.NumberFormat().format(val);
                        }

                        html += `<td class="${cls}" title="${val}">${val}</td>`;
                    });

                    html += '</tr>';
                });
            });

            html += '</tbody></table>';
            $container.html(html);
        }

        populateFilters();

        $('#applyFilterBtn').on('click', function () {
            const selectedLOBs = $('.lobCheckbox:checked').map(function () { return this.value; }).get();
            const selectedMetrics = $('#metricDropdown input[type=checkbox]:checked').map(function () { return this.value; }).get();
            const weekFrom = $('#weekFromDropdown input[type=radio]:checked').val();
            const weekTo = $('#weekToDropdown input[type=radio]:checked').val();

            buildTable(selectedLOBs, selectedMetrics, weekFrom, weekTo);
        });

        buildTable(uniqueLOBs, metrics, uniqueWeeks[0], uniqueWeeks[uniqueWeeks.length - 1]);

        const modalEl = document.getElementById('analyticsModal');
        const modal = new bootstrap.Modal(modalEl);
        modal.show();

        return this;
    };
})(jQuery);
