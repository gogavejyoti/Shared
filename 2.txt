getSelectedCellsData: function () {
    const selDict = this._pivotCells?._selectedCells || {};
    const cellMap = {};

    // Parse each selection key: "row_col:"
    Object.keys(selDict).forEach(key => {
        const cleanedKey = key.replace(':', '');
        const [rowStr, colStr] = cleanedKey.split('_');
        const rowIdx = parseInt(rowStr, 10);
        const colIdx = parseInt(colStr, 10);
        const cell = selDict[key];

        const valObj = this.source.getCellValue(
            cell.pivotRow.adapterItem,
            cell.pivotColumn.adapterItem
        );
        const value = valObj?.formattedValue ?? '';

        if (!cellMap[rowIdx]) cellMap[rowIdx] = {};
        cellMap[rowIdx][colIdx] = value;
    });

    // Build a clean 2D array based on sorted row and col indices
    const sortedRowIndices = Object.keys(cellMap).map(Number).sort((a, b) => a - b);
    const allColIndices = new Set();

    sortedRowIndices.forEach(rowIdx => {
        Object.keys(cellMap[rowIdx]).forEach(c => allColIndices.add(parseInt(c)));
    });

    const sortedColIndices = [...allColIndices].sort((a, b) => a - b);

    const result = sortedRowIndices.map(rowIdx => {
        return sortedColIndices.map(colIdx => {
            return cellMap[rowIdx][colIdx] ?? ""; // fill empty cells with blanks
        });
    });

    return result;
}
