public class WfmAggregateException
{
    public string Level { get; set; } // "Account" or "Geo"
    public string Entity { get; set; }
    public string Parent { get; set; }
    public string Metric { get; set; }
    public double Actual { get; set; }
    public double Target { get; set; }
}

public List<WfmAggregateException> GetAggregateExceptions(Dictionary<string, DrilldownNode> report)
{
    var result = new List<WfmAggregateException>();
    var lowerIsBetterMetrics = new HashSet<string> { "Shri%", "Attr%" };
    var fteDeltaMetrics = new[] { "M1_Delta", "M2_Delta", "M3_Delta", "M4_Delta", "MO_Delta" };

    foreach (var (account, accNode) in report)
    {
        var accTotals = new Dictionary<string, List<double>>();

        foreach (var (geo, geoNode) in accNode.Children)
        {
            var geoTotals = new Dictionary<string, List<double>>();

            foreach (var (lob, lobNode) in geoNode.Children)
            {
                foreach (var kv in lobNode.Data)
                {
                    string metric = kv.Key;
                    string valStr = kv.Value;

                    if (string.IsNullOrWhiteSpace(valStr) || valStr.ToLower() == "undefined" || valStr == "0")
                        continue;

                    if (!double.TryParse(valStr, out double val))
                        continue;

                    if (lowerIsBetterMetrics.Contains(metric) || fteDeltaMetrics.Contains(metric))
                    {
                        geoTotals.TryAdd(metric, new());
                        geoTotals[metric].Add(val);

                        accTotals.TryAdd(metric, new());
                        accTotals[metric].Add(val);
                    }
                }
            }

            // Add Geo-level exceptions
            foreach (var (metric, values) in geoTotals)
            {
                if (fteDeltaMetrics.Contains(metric))
                {
                    double maxAbs = values.Max(v => Math.Abs(v));
                    if (maxAbs > 20)
                    {
                        result.Add(new WfmAggregateException
                        {
                            Level = "Geo",
                            Entity = geo,
                            Parent = account,
                            Metric = metric,
                            Actual = Math.Round(maxAbs, 2),
                            Target = 20
                        });
                    }
                }
                else if (lowerIsBetterMetrics.Contains(metric))
                {
                    double avg = values.Average();
                    if (avg > 5)
                    {
                        result.Add(new WfmAggregateException
                        {
                            Level = "Geo",
                            Entity = geo,
                            Parent = account,
                            Metric = metric,
                            Actual = Math.Round(avg, 2),
                            Target = 5
                        });
                    }
                }
            }
        }

        // Add Account-level exceptions
        foreach (var (metric, values) in accTotals)
        {
            if (fteDeltaMetrics.Contains(metric))
            {
                double maxAbs = values.Max(v => Math.Abs(v));
                if (maxAbs > 20)
                {
                    result.Add(new WfmAggregateException
                    {
                        Level = "Account",
                        Entity = account,
                        Parent = null,
                        Metric = metric,
                        Actual = Math.Round(maxAbs, 2),
                        Target = 20
                    });
                }
            }
            else if (lowerIsBetterMetrics.Contains(metric))
            {
                double avg = values.Average();
                if (avg > 5)
                {
                    result.Add(new WfmAggregateException
                    {
                        Level = "Account",
                        Entity = account,
                        Parent = null,
                        Metric = metric,
                        Actual = Math.Round(avg, 2),
                        Target = 5
                    });
                }
            }
        }
    }

    return result;
}
