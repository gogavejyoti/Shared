using Microsoft.AspNetCore.SignalR;
using System;
using System.Collections.Concurrent;
using System.Linq;
using System.Threading.Tasks;

public class DocumentHub : Hub
{
    // Key: documentId, Value: Lock info
    private static ConcurrentDictionary<string, DocumentLock> DocumentLocks = new();

    // Keep track of user connections
    private static ConcurrentDictionary<string, string> ConnectionToUser = new();

    public override Task OnConnectedAsync()
    {
        var userId = Context.GetHttpContext()?.Request.Query["userId"];
        if (!string.IsNullOrEmpty(userId))
        {
            ConnectionToUser[Context.ConnectionId] = userId!;
        }
        return base.OnConnectedAsync();
    }

    public override Task OnDisconnectedAsync(Exception? exception)
    {
        if (ConnectionToUser.TryRemove(Context.ConnectionId, out var userId))
        {
            // Remove this connectionId from all locks
            foreach (var lockEntry in DocumentLocks.Values)
            {
                lockEntry.ActiveConnections.Remove(Context.ConnectionId);
            }

            // Remove locks where no active connections remain
            var docsToUnlock = DocumentLocks
                .Where(d => d.Value.ActiveConnections.Count == 0)
                .Select(d => d.Key)
                .ToList();

            foreach (var docId in docsToUnlock)
            {
                DocumentLocks.TryRemove(docId, out _);
                Clients.All.SendAsync("DocumentUnlocked", docId);
            }
        }
        return base.OnDisconnectedAsync(exception);
    }

    public async Task<bool> TryLockDocument(string documentId, string userId)
    {
        var docLock = DocumentLocks.GetOrAdd(documentId, _ => new DocumentLock(userId));

        lock (docLock)
        {
            if (docLock.UserId == userId)
            {
                // Same user, allow edit
                docLock.LastHeartbeat = DateTime.UtcNow;
                docLock.ActiveConnections.Add(Context.ConnectionId);
                return true;
            }
            else if (DateTime.UtcNow - docLock.LastHeartbeat > TimeSpan.FromMinutes(2))
            {
                // Lock timed out
                docLock.UserId = userId;
                docLock.LastHeartbeat = DateTime.UtcNow;
                docLock.ActiveConnections.Clear();
                docLock.ActiveConnections.Add(Context.ConnectionId);
                Clients.All.SendAsync("DocumentLocked", documentId, userId);
                return true;
            }
            else
            {
                return false; // Someone else has the lock
            }
        }
    }

    public Task SendHeartbeat(string documentId, string userId)
    {
        if (DocumentLocks.TryGetValue(documentId, out var docLock) && docLock.UserId == userId)
        {
            docLock.LastHeartbeat = DateTime.UtcNow;
        }
        return Task.CompletedTask;
    }

    public async Task UnlockDocument(string documentId, string userId)
    {
        if (DocumentLocks.TryGetValue(documentId, out var docLock))
        {
            lock (docLock)
            {
                if (docLock.UserId == userId)
                {
                    DocumentLocks.TryRemove(documentId, out _);
                    Clients.All.SendAsync("DocumentUnlocked", documentId);
                }
            }
        }
    }

    private class DocumentLock
    {
        public string UserId { get; set; }
        public DateTime LastHeartbeat { get; set; }
        public HashSet<string> ActiveConnections { get; set; }

        public DocumentLock(string userId)
        {
            UserId = userId;
            LastHeartbeat = DateTime.UtcNow;
            ActiveConnections = new HashSet<string>();
        }
    }
}




var builder = WebApplication.CreateBuilder(args);
builder.Services.AddSignalR();

var app = builder.Build();
app.MapHub<DocumentHub>("/documentHub");
app.Run();




let connection;
let editMode = false;
let heartbeatInterval;

async function initDocumentLock(documentId, userId) {
    connection = new signalR.HubConnectionBuilder()
        .withUrl(`/documentHub?userId=${userId}`)
        .withAutomaticReconnect()
        .build();

    connection.on("DocumentUnlocked", (docId) => {
        if (docId === documentId) {
            console.log("Document unlocked, refresh to edit.");
            if (!editMode) {
                enableEditButton();
            }
        }
    });

    connection.on("DocumentLocked", (docId, lockedBy) => {
        if (docId === documentId && lockedBy !== userId) {
            console.log("Document locked by someone else.");
            setReadOnlyMode();
        }
    });

    await connection.start();

    const canEdit = await connection.invoke("TryLockDocument", documentId, userId);
    if (canEdit) {
        console.log("Edit mode enabled");
        editMode = true;
        enableEditing();
        startHeartbeat(documentId, userId);
    } else {
        console.log("Read-only mode");
        setReadOnlyMode();
    }

    window.addEventListener("beforeunload", async () => {
        if (editMode) {
            await connection.invoke("UnlockDocument", documentId, userId);
        }
    });
}

function startHeartbeat(documentId, userId) {
    heartbeatInterval = setInterval(() => {
        connection.invoke("SendHeartbeat", documentId, userId);
    }, 30000); // every 30 seconds
}

function enableEditing() {
    $("#saveBtn").prop("disabled", false);
}

function setReadOnlyMode() {
    editMode = false;
    $("#saveBtn").prop("disabled", true);
}

function enableEditButton() {
    $("#saveBtn").prop("disabled", false);
}



<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="/js/document-lock.js"></script>
<script>
$(document).ready(function () {
    const userId = "@User.Identity.Name";
    const documentId = "123"; // Get dynamically
    initDocumentLock(documentId, userId);
});
</script>




