(function ($) {
    $.fn.assumptionSimulator = function (options) {
        const settings = $.extend({
            data: [],
            getMLTrendUrl: '/resourceplanner/GetMLTrend',
        }, options);

        const $container = $(this);
        let simulatedValues = {};
        let weeks = [];
        let lobs = [];

        // --- Toolbar ---
        const $toolbar = $(`
            <div class="sim-toolbar flex justify-between items-center mb-3">
                <div class="flex gap-2">
                    <button class="btn btn-primary btn-apply">Apply</button>
                    <button class="btn btn-secondary btn-reset">Reset</button>
                    <button class="btn btn-outline btn-ml-trend">ðŸ§  ML Trend</button>
                </div>
                <div class="ml-status text-sm text-gray-500 italic hidden">
                    ML Trend applied successfully âœ”
                </div>
            </div>
        `);

        const $table = $('<table class="table table-bordered table-sm text-center align-middle"></table>');
        $container.empty().append($toolbar).append($table);

        // --- Helper: Format week date from API ---
        function formatWeek(dateStr) {
            const d = new Date(dateStr);
            if (isNaN(d)) return dateStr;
            const day = ("0" + d.getDate()).slice(-2);
            const monthNames = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
            const month = monthNames[d.getMonth()];
            const year = String(d.getFullYear()).slice(-2);
            return `${day}-${month}-${year}`;
        }

        // --- Render table (core logic stays as in your existing plugin) ---
        function renderTable() {
            // this should already handle weeks, lobs, simulatedValues, arrow logic, etc.
            // just call your existing render logic here
            $table.empty();

            // Example (simplified):
            const header = $('<tr><th>LOB</th></tr>');
            weeks.forEach(w => header.append(`<th>${w}</th>`));
            $table.append($('<thead></thead>').append(header));

            settings.data.forEach(row => {
                const $tr = $(`<tr data-lob="${row.LOB}"><td>${row.LOB}</td></tr>`);
                weeks.forEach(week => {
                    const shrinkKey = `${row.LOB}_${week}_shrink`;
                    const attrKey = `${row.LOB}_${week}_attr`;

                    const shrink = simulatedValues[shrinkKey] ?? row.Shrinkage ?? '';
                    const attr = simulatedValues[attrKey] ?? row.Attrition ?? '';

                    // Arrow/format logic already handled here in your real render
                    $tr.append(`<td data-type="Shrinkage">${shrink}</td>`);
                    $tr.append(`<td data-type="Attrition">${attr}</td>`);
                });
                $table.append($tr);
            });

            // re-run your existing calcSimulated() logic here to update dependent metrics
            if (typeof calcSimulated === 'function') {
                calcSimulated();
            }
        }

        // --- Apply simulation (user edited values) ---
        function applySimulation() {
            // existing logic, no change
            if (typeof calcSimulated === 'function') calcSimulated();
        }

        // --- Reset simulation ---
        function resetSimulation() {
            simulatedValues = {};
            renderTable();
        }

        // --- NEW: Fetch ML Trend data ---
        function getMLTrend() {
            const fromWeek = $('#WeekFrom').val();
            const toWeek = $('#WeekTo').val();

            const data = {
                vertical: $("#txtVertical").val(),
                locationFilter: $('#cmbLocation')[0].getSelectedValues(),
                siteFilter: $('#cmbSite')[0].getSelectedValues(),
                accountFilter: [$('#txtAccount').val()],
                lobFilter: $('#cmbLOB')[0].getSelectedValues(),
                projectIdFilter: $('#cmbProjectId')[0].getSelectedValues(),
                weekFrom: fromWeek,
                weekTo: toWeek
            };

            $.ajax({
                url: settings.getMLTrendUrl,
                type: "POST",
                data: JSON.stringify(data),
                contentType: "application/json",
                dataType: "json",
                beforeSend: function () {
                    $toolbar.find('.btn-ml-trend')
                        .prop('disabled', true)
                        .text('ðŸ§  Loading...');
                    $toolbar.find('.ml-status').addClass('hidden');
                },
                success: function (response) {
                    $toolbar.find('.btn-ml-trend')
                        .prop('disabled', false)
                        .text('ðŸ§  ML Trend');

                    if (response && response.data && response.data.length > 0) {
                        response.data.forEach(item => {
                            const lob = item.lob?.trim();
                            const week = formatWeek(item.weekDate);
                            const shrink = item.predictedShrinkage ?? null;
                            const attr = item.predictedAttrition ?? null;

                            if (lobs.includes(lob) && weeks.includes(week)) {
                                if (shrink !== null)
                                    simulatedValues[`${lob}_${week}_shrink`] = shrink;
                                if (attr !== null)
                                    simulatedValues[`${lob}_${week}_attr`] = attr;
                            }
                        });

                        renderTable();

                        // show subtle success message
                        $toolbar.find('.ml-status')
                            .removeClass('hidden')
                            .text('ML Trend applied successfully âœ”');
                    } else {
                        console.log("No ML predictions found for selected filters.");
                    }
                },
                error: function (xhr, status, error) {
                    $toolbar.find('.btn-ml-trend')
                        .prop('disabled', false)
                        .text('ðŸ§  ML Trend');
                    console.error("ML Trend API error:", error);
                }
            });
        }

        // --- Events ---
        $toolbar.on('click', '.btn-apply', applySimulation);
        $toolbar.on('click', '.btn-reset', resetSimulation);
        $toolbar.on('click', '.btn-ml-trend', getMLTrend);

        // --- Init ---
        weeks = settings.weeks || [];
        lobs = [...new Set(settings.data.map(d => d.LOB))];
        renderTable();

        return this;
    };
}(jQuery));
