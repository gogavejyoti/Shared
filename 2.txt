(function ($) {
    $.fn.weekAnalyticsPopup = function (options) {
        const settings = $.extend({
            data: [],
            weekStartDay: 'sunday'
        }, options);

        $('#analyticsModal').remove();

        if ($('#weekAnalyticsPopupStyles').length === 0) {
            const styles = `
            <style id="weekAnalyticsPopupStyles">
                #chartsContainer { display:grid; grid-template-columns:repeat(auto-fit, minmax(400px, 1fr)); gap:20px; justify-items:center; }
                #chartsContainer canvas { width:100% !important; max-width:450px; height:220px !important; }
                .custom-multiselect { position: relative; display: inline-block; width: 200px; }
                .custom-multiselect button { width: 100%; text-align: left; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; }
                .custom-multiselect .multiselect-options { 
                    display: none; max-height:200px; overflow-y:auto; position:absolute; z-index:1000; background:white; border:1px solid #ced4da; border-radius:4px; padding:5px 0; width: 100%;
                    box-shadow:0 2px 5px rgba(0,0,0,0.15);
                }
                .custom-multiselect .multiselect-options label { display:block; padding:5px 10px; cursor:pointer; }
                .custom-multiselect .multiselect-options label:hover { background-color:#f1f1f1; }
                #analyticsModal .modal-header { background-color: #D7C4F0; }
                .table-summary { max-height:250px; overflow-y:auto; display:block; }
                .table-summary table { margin-bottom:0; }
                #applyFilter, #exportCsv { transition:0.2s; }
                #applyFilter:hover, #exportCsv:hover { opacity:0.85; }
            </style>`;
            $('head').append(styles);
        }

        const modalHTML = `
        <div class="modal fade" id="analyticsModal" tabindex="-1" style="z-index:9999;zoom:85%">
          <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Workforce Analytics Dashboard</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body" style="background: #E6E6FA;">
                <div class="filters mb-3 p-3 border rounded bg-light d-flex flex-wrap align-items-center gap-2">
                  <label>From Week: 
                    <select id="fromWeek" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label>To Week: 
                    <select id="toWeek" class="form-select d-inline-block w-auto"></select>
                  </label>
                  <label>LOB: 
                    <div class="custom-multiselect" id="lobSelectContainer">
                        <button type="button" class="btn btn-light dropdown-toggle" id="lobSelectBtn">Select LOBs</button>
                        <div class="multiselect-options"></div>
                    </div>
                  </label>
                  <label class="ms-2"><input type="checkbox" id="comparisonMode"> Comparison Mode</label>
                  <button id="applyFilter" class="btn btn-primary btn-sm">Apply Filter</button>
                  <button id="exportCsv" class="btn btn-secondary btn-sm">Export CSV</button>
                </div>
                <div id="chartsContainer" class="mt-3"></div>
                <div id="analyticsSummary" class="mt-4 table-summary"></div>
              </div>
            </div>
          </div>
        </div>`;
        $('body').append(modalHTML);

        const $chartsContainer = $('#chartsContainer');

        const parseWeek = (weekStr) => {
            const [dd, mmm, yy] = weekStr.split('-');
            return new Date(`${mmm} ${dd}, 20${yy}`);
        };
        const formatWeek = (date) => {
            const dd = String(date.getDate()).padStart(2, '0');
            const mmm = date.toLocaleString('default', { month: 'short' });
            const yy = String(date.getFullYear()).slice(-2);
            return `${dd}-${mmm}-${yy}`;
        };
        const getCurrentWeek = () => {
            const today = new Date();
            const dayOfWeek = today.getDay();
            const diff = settings.weekStartDay === 'sunday' ? dayOfWeek : (dayOfWeek + 6) % 7;
            const lastWeekDate = new Date(today);
            lastWeekDate.setDate(today.getDate() - diff);
            return formatWeek(lastWeekDate);
        };

        const structuredData = (() => {
            const grouped = {};
            settings.data.forEach(item => {
                if (!grouped[item.week]) grouped[item.week] = { Week: item.week };
                grouped[item.week][`${item.header}||${item.sheetName}`] = item.value;
            });
            return Object.values(grouped).sort((a, b) => parseWeek(a.Week) - parseWeek(b.Week));
        })();

        const uniqueLOBs = [...new Set(settings.data.map(d => d.sheetName))].sort();
        const uniqueHeaders = [...new Set(settings.data.map(d => d.header))].sort();
        const uniqueWeeks = [...new Set(settings.data.map(d => d.week))].sort((a, b) => parseWeek(a) - parseWeek(b));

        uniqueWeeks.forEach(week => {
            $('#fromWeek').append(`<option value="${week}">${week}</option>`);
            $('#toWeek').append(`<option value="${week}">${week}</option>`);
        });

        const currentWeek = getCurrentWeek();
        const currentIndex = uniqueWeeks.indexOf(currentWeek);
        const fallbackIndex = currentIndex >= 0 ? currentIndex : uniqueWeeks.length - 1;
        const fromIndex = Math.max(0, fallbackIndex - 6);
        const toIndex = Math.min(uniqueWeeks.length - 1, fallbackIndex + 6);
        $('#fromWeek').val(uniqueWeeks[fromIndex]);
        $('#toWeek').val(uniqueWeeks[toIndex]);

        const $lobContainer = $('#lobSelectContainer');
        const $lobBtn = $('#lobSelectBtn');
        const $optionsDiv = $lobContainer.find('.multiselect-options');
        uniqueLOBs.forEach(lob => $optionsDiv.append(`<label><input type="checkbox" value="${lob}"> ${lob}</label>`));

        $lobBtn.on('click', e => { e.stopPropagation(); $optionsDiv.toggle(); });
        $(document).on('click', () => $optionsDiv.hide());

        const getSelectedLOBs = () => {
            const selected = [];
            $optionsDiv.find('input:checked').each(function () { selected.push($(this).val()); });
            return selected.length ? selected : [uniqueLOBs[0]];
        };

        $optionsDiv.find('input').on('change', function () {
            const selected = getSelectedLOBs();
            $lobBtn.text(selected.join(', '));
        });
        $optionsDiv.find('input').first().prop('checked', true).trigger('change');

        const colorPalette = ['#007bff', '#28a745', '#fd7e14', '#6610f2', '#20c997', '#e83e8c', '#17a2b8', '#ffc107', '#6f42c1', '#fd3955'];

        const filterData = () => {
            const fromWeek = $('#fromWeek').val();
            const toWeek = $('#toWeek').val();
            const selectedLOBs = getSelectedLOBs();
            const isComparison = $('#comparisonMode').is(':checked');
            const filtered = structuredData.filter(d => parseWeek(d.Week) >= parseWeek(fromWeek) && parseWeek(d.Week) <= parseWeek(toWeek));
            return { filtered, selectedLOBs, isComparison };
        };

        const exportCSV = (filtered, selectedLOBs) => {
            if (!filtered.length) return alert('No data to export');

            const headers = ['Week', 'LOB', ...uniqueHeaders];
            const rows = [];
            filtered.forEach(row => {
                selectedLOBs.forEach(lob => {
                    const dataRow = [row.Week, lob];
                    uniqueHeaders.forEach(header => dataRow.push(row[`${header}||${lob}`] || ''));
                    rows.push(dataRow.join(','));
                });
            });

            const csvContent = [headers.join(','), ...rows].join('\n');
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);

            const link = document.createElement('a');
            link.href = url;
            link.download = 'workforce_analytics.csv';
            link.click();
            URL.revokeObjectURL(url);
        };

        const renderCharts = (filtered, selectedLOBs, isComparison) => {
            $chartsContainer.empty();
            if (!filtered.length) {
                $chartsContainer.html('<div class="text-center p-5">No data available for selected filters.</div>');
                return;
            }

            const labels = filtered.map(d => d.Week);
            const createChartCard = (title, canvasId) => `
                <div class="card mb-4 shadow-sm border rounded bg-white" style="width:100%; max-width:900px;">
                    <div class="card-body text-center">
                        <h6 class="card-title fw-bold">${title}</h6>
                        <canvas id="${canvasId}" style="height:220px; width:100%;"></canvas>
                    </div>
                </div>`;

            // Required vs Available HC + Staffing % (Line Chart)
            $chartsContainer.append(createChartCard('Required vs Available HC + Staffing %', 'chartReqAvl'));
            new Chart($('#chartReqAvl')[0].getContext('2d'), {
                type: 'line',
                data: {
                    labels,
                    datasets: [
                        {
                            label: 'Required HC',
                            data: filtered.map(d => selectedLOBs.map(lob => d[`Required HC||${lob}`] || 0).reduce((a, b) => a + b, 0)),
                            borderColor: '#007bff',
                            backgroundColor: 'rgba(0,123,255,0.2)',
                            fill: true
                        },
                        {
                            label: 'Available HC',
                            data: filtered.map(d => selectedLOBs.map(lob => d[`Available HC||${lob}`] || 0).reduce((a, b) => a + b, 0)),
                            borderColor: '#28a745',
                            backgroundColor: 'rgba(40,167,69,0.2)',
                            fill: true
                        },
                        {
                            label: 'Staffing %',
                            data: filtered.map(d => {
                                let required = selectedLOBs.map(lob => d[`Required HC||${lob}`] || 0).reduce((a, b) => a + b, 0);
                                let available = selectedLOBs.map(lob => d[`Available HC||${lob}`] || 0).reduce((a, b) => a + b, 0);
                                return ((available / (required || 1)) * 100).toFixed(2);
                            }),
                            borderColor: '#fd7e14',
                            backgroundColor: 'rgba(253,126,20,0.2)',
                            fill: false,
                            yAxisID: 'y1',
                            borderDash: [5,5]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    interaction: { mode: 'index', intersect: false },
                    scales: {
                        y: { beginAtZero: true, title: { display: true, text: 'Count' } },
                        y1: { position: 'right', beginAtZero: true, title: { display: true, text: 'Staffing %' }, grid: { drawOnChartArea: false } }
                    }
                }
            });

            // Actual vs Forecasted Hours (Bar Chart)
            $chartsContainer.append(createChartCard('Actual vs Forecasted Hours', 'chartActualForecast'));
            new Chart($('#chartActualForecast')[0].getContext('2d'), {
                type: 'bar',
                data: {
                    labels,
                    datasets: [
                        {
                            label: 'Actual Hours',
                            data: filtered.map(d => selectedLOBs.map(lob => d[`Actual Hours||${lob}`] || 0).reduce((a, b) => a + b, 0)),
                            backgroundColor: '#17a2b8'
                        },
                        {
                            label: 'Forecasted Hours',
                            data: filtered.map(d => selectedLOBs.map(lob => d[`Forecasted Hours||${lob}`] || 0).reduce((a, b) => a + b, 0)),
                            backgroundColor: '#ffc107'
                        }
                    ]
                },
                options: { responsive: true, interaction: { mode: 'index', intersect: false }, scales: { y: { beginAtZero: true } } }
            });

            // Planned vs Actual Shrinkage (%) (Area Chart)
            $chartsContainer.append(createChartCard('Planned vs Actual Shrinkage (%)', 'chartShrinkage'));
            new Chart($('#chartShrinkage')[0].getContext('2d'), {
                type: 'line',
                data: {
                    labels,
                    datasets: [
                        {
                            label: 'Planned Shrinkage',
                            data: filtered.map(d => selectedLOBs.map(lob => (d[`Planned Shrinkage||${lob}`] || 0) * 100).reduce((a, b) => a + b, 0)),
                            borderColor: '#6f42c1',
                            backgroundColor: 'rgba(111,66,193,0.2)',
                            fill: true
                        },
                        {
                            label: 'Actual Shrinkage',
                            data: filtered.map(d => selectedLOBs.map(lob => (d[`Actual Shrinkage||${lob}`] || 0) * 100).reduce((a, b) => a + b, 0)),
                            borderColor: '#fd3955',
                            backgroundColor: 'rgba(253,57,85,0.2)',
                            fill: true
                        }
                    ]
                },
                options: { responsive: true, interaction: { mode: 'index', intersect: false }, scales: { y: { beginAtZero: true, title: { display: true, text: '%' } } } }
            });

            // Latest Actual Hours Snapshot (Pie Chart)
            const latestData = filtered[filtered.length - 1];
            const pieData = selectedLOBs.map((lob, idx) => ({
                label: lob,
                value: latestData ? (latestData[`Actual Hours||${lob}`] || 0) : 0
            }));

            $chartsContainer.append(createChartCard('Latest Actual Hours by LOB (Snapshot)', 'chartSnapshotPie'));
            new Chart($('#chartSnapshotPie')[0].getContext('2d'), {
                type: 'pie',
                data: {
                    labels: pieData.map(d => d.label),
                    datasets: [{
                        data: pieData.map(d => d.value),
                        backgroundColor: selectedLOBs.map((lob, idx) => colorPalette[idx % colorPalette.length])
                    }]
                },
                options: { responsive: true }
            });
        };

        const applyFilters = () => {
            const { filtered, selectedLOBs, isComparison } = filterData();
            renderCharts(filtered, selectedLOBs, isComparison);
        };

        $('#applyFilter').off('click').on('click', applyFilters);
        $('#exportCsv').off('click').on('click', () => { const { filtered, selectedLOBs } = filterData(); exportCSV(filtered, selectedLOBs); });
        $('#analyticsModal').on('hidden.bs.modal', function () { $('#analyticsModal').remove(); });

        applyFilters();
        $('#analyticsModal').modal('show');

        return this;
    };
})(jQuery);
