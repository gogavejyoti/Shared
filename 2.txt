getAllDependentSheetsFromSheet: function (sheetIndex, formulaOrValue) {
    if (!window.luckysheet_dependentsheets_cache) {
        window.luckysheet_dependentsheets_cache = {};
    }

    const allSheets = Ft() || [];
    let cachedRefs = window.luckysheet_dependentsheets_cache[sheetIndex] || [];

    // Helper to extract sheet names from a formula string
    const extractSheetNames = (formula) => {
        const sheetNames = new Set();
        if (formula && typeof formula === "string" && formula.includes("!")) {
            const matches = formula.match(/(?:'([^']+)'|([A-Za-z0-9_]+))!/g);
            if (matches) {
                for (const match of matches) {
                    sheetNames.add(match.replace(/['!]/g, ""));
                }
            }
        }
        return sheetNames;
    };

    // Step 1: Update cache for referenced sheets in formulaOrValue
    const referencedSheetNames = extractSheetNames(formulaOrValue);
    for (const sheetName of referencedSheetNames) {
        const refSheet = allSheets.find(s => s.name === sheetName);
        if (refSheet) {
            if (!window.luckysheet_dependentsheets_cache[refSheet.index]) {
                window.luckysheet_dependentsheets_cache[refSheet.index] = [];
            }
            if (!window.luckysheet_dependentsheets_cache[refSheet.index].includes(sheetIndex)) {
                window.luckysheet_dependentsheets_cache[refSheet.index].push(sheetIndex);
            }
        }
    }

    // Step 2: Use cached references if available
    if (cachedRefs.length > 1) {
        // Validate cached references against current sheets
        const validSheetIndexes = new Set(allSheets.map(s => s.index));
        cachedRefs = cachedRefs.filter(idx => validSheetIndexes.has(idx));

        window.luckysheet_dependentsheets_cache[sheetIndex] = cachedRefs;
        return cachedRefs;
    }

    // Step 3: Build full dependency map (sheet -> referenced sheets)
    const dependencyMap = new Map();
    for (const sheet of allSheets) {
        if (!sheet.data || !sheet.name) continue;
        const references = new Set();
        for (const row of sheet.data) {
            if (!row) continue;
            for (const cell of row) {
                if (!cell?.f) continue;

                for (const targetSheet of allSheets) {
                    if (!targetSheet.name || targetSheet.index === sheet.index) continue;
                    const refRegex = new RegExp(`(?:'${targetSheet.name}'|${targetSheet.name})!\\$?[A-Z]+\\$?\\d+(?::\\$?[A-Z]+\\$?\\d+)?`, 'g');
                    if (refRegex.test(cell.f)) {
                        references.add(targetSheet.index);
                    }
                }
            }
        }
        dependencyMap.set(sheet.index, references);
    }

    // Step 4: Traverse reverse dependencies to get all dependent sheets
    const result = new Set([sheetIndex]);
    const queue = [sheetIndex];
    while (queue.length > 0) {
        const current = queue.shift();
        for (const [sIdx, refs] of dependencyMap.entries()) {
            if (refs.has(current) && !result.has(sIdx)) {
                result.add(sIdx);
                queue.push(sIdx);
            }
        }
    }

    // Step 5: Add referenced sheets from formula to result
    for (const sheetName of referencedSheetNames) {
        const refSheet = allSheets.find(s => s.name === sheetName);
        if (refSheet) {
            result.add(refSheet.index);
        }
    }

    // Step 6: Update cache and return
    window.luckysheet_dependentsheets_cache[sheetIndex] = Array.from(result);
    return window.luckysheet_dependentsheets_cache[sheetIndex];
},
