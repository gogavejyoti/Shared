        public List<WfmAggregateException> GetAggregateExceptions(Dictionary<string, DrilldownNode> report)
        {
            var result = new List<WfmAggregateException>();

            foreach (var (account, accNode) in report)
            {
                var accTotals = new Dictionary<string, List<double>>();

                foreach (var (geo, geoNode) in accNode.Children)
                {
                    var geoTotals = new Dictionary<string, List<double>>();

                    foreach (var (lob, lobNode) in geoNode.Children)
                    {
                        foreach (var metric in LowerIsBetterMetrics)
                        {
                            if (lobNode.Data.TryGetValue(metric, out var valStr) && double.TryParse(valStr, out var val))
                            {
                                geoTotals.TryAdd(metric, new());
                                geoTotals[metric].Add(val);

                                accTotals.TryAdd(metric, new());
                                accTotals[metric].Add(val);
                            }
                        }
                    }

                    foreach (var (metric, values) in geoTotals)
                    {
                        double avg = values.Average();
                        double target = 5;
                        if (avg > target)
                        {
                            result.Add(new WfmAggregateException
                            {
                                Level = "Geo",
                                Entity = geo,
                                Parent = account,
                                Metric = metric,
                                Actual = Math.Round(avg, 2),
                                Target = target
                            });
                        }
                    }
                }

                foreach (var (metric, values) in accTotals)
                {
                    double avg = values.Average();
                    double target = 5;
                    if (avg > target)
                    {
                        result.Add(new WfmAggregateException
                        {
                            Level = "Account",
                            Entity = account,
                            Parent = null,
                            Metric = metric,
                            Actual = Math.Round(avg, 2),
                            Target = target
                        });
                    }
                }
            }

            return result;
        }
