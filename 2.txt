CREATE TYPE dbo.SheetValuesType AS TABLE
(
    PlanId INT,
    SheetName NVARCHAR(255),
    Week NVARCHAR(50),
    Header NVARCHAR(255),
    Value NVARCHAR(MAX)
);


using (var connection = new SqlConnection(connectionString))
using (var command = new SqlCommand("dbo.ReplacePlanSheetValues_Dynamic", connection))
{
    command.CommandType = CommandType.StoredProcedure;

    command.Parameters.AddWithValue("@VerticalName", "SheetValues_Vertical1");
    command.Parameters.AddWithValue("@PlanId", planId);

    var tvpParam = new SqlParameter("@Values", SqlDbType.Structured)
    {
        TypeName = "dbo.SheetValuesType",
        Value = dataTable
    };
    command.Parameters.Add(tvpParam);

    connection.Open();
    command.ExecuteNonQuery();
}



CREATE PROCEDURE dbo.ReplacePlanSheetValues_Dynamic
    @VerticalName NVARCHAR(128),  -- E.g., 'SheetValues_Vertical1'
    @PlanId INT,
    @Values dbo.SheetValuesType READONLY
AS
BEGIN
    SET NOCOUNT ON;

    -- Validate VerticalName to prevent SQL Injection
    IF @VerticalName NOT IN ('SheetValues_Vertical1', 'SheetValues_Vertical2', 'SheetValues_Vertical3', 'SheetValues_Vertical4', 'SheetValues_Vertical5', 'SheetValues_Vertical6')
    BEGIN
        RAISERROR('Invalid VerticalName.', 16, 1);
        RETURN;
    END

    DECLARE @Sql NVARCHAR(MAX);

    BEGIN TRANSACTION;

    -- Step 1: Delete existing records in batch
    SET @Sql = '
        WHILE 1 = 1
        BEGIN
            DELETE TOP (10000) FROM ' + QUOTENAME(@VerticalName) + ' WHERE PlanId = @PlanId;
            IF @@ROWCOUNT = 0 BREAK;
        END
    ';
    EXEC sp_executesql @Sql, N'@PlanId INT', @PlanId = @PlanId;

    -- Step 2: Insert new records
    SET @Sql = '
        INSERT INTO ' + QUOTENAME(@VerticalName) + ' (PlanId, SheetName, Week, Header, Value)
        SELECT PlanId, SheetName, Week, Header, Value FROM @Values
    ';
    EXEC sp_executesql @Sql, N'@Values dbo.SheetValuesType READONLY', @Values = @Values;

    COMMIT TRANSACTION;
END



            public async Task<bool> SaveExtractedValues(List<SheetValueDto> values)
            {
                if (_connection.State != ConnectionState.Open)
                    await ((SqlConnection)_connection).OpenAsync();

                // Use table-valued parameter for bulk merge
                var dt = new DataTable();
                dt.Columns.Add("PlanId", typeof(int));
                dt.Columns.Add("SheetName", typeof(string));
                dt.Columns.Add("Week", typeof(DateTime));
                dt.Columns.Add("Header", typeof(string));
                dt.Columns.Add("Value", typeof(decimal)); // adjust type

                foreach (var v in values)
                {
                    dt.Rows.Add(v.PlanId, v.SheetName, DateTime.Parse(v.Week), v.Header, (object?)v.Value ?? DBNull.Value);
                }
                await _connection.ExecuteAsync(
                    "dbo.MergeSheetValues",
                    new { Values = dt.AsTableValuedParameter("dbo.SheetValueType") },
                    commandType: CommandType.StoredProcedure
                );

                return true;
            }

