public string GenerateAiPrompt(
    Dictionary<string, DrilldownNode> report,
    List<WfmAggregateException> aggregateExceptions,
    string overallSummary,
    string currentMonth)
{
    var sb = new StringBuilder();

    sb.AppendLine($"Overall Summary for the month of {currentMonth}:");
    sb.AppendLine(overallSummary.Trim());
    sb.AppendLine();
    sb.AppendLine("Below are the detailed performance exceptions observed:");

    foreach (var acc in report)
    {
        string account = acc.Key;
        var accNode = acc.Value;

        sb.AppendLine($"\n🔹 **Account: {account}**");

        // Account-level aggregated exceptions
        foreach (var accEx in aggregateExceptions.Where(x => x.Level == "Account" && x.Entity == account))
        {
            sb.AppendLine($"- High {accEx.Metric} observed at account level: {accEx.Actual}% vs target {accEx.Target}%.");
        }

        foreach (var geo in accNode.Children)
        {
            string geoName = geo.Key;
            var geoNode = geo.Value;

            sb.AppendLine($"\n  📍 **Geo: {geoName}**");

            // Geo-level aggregated exceptions
            foreach (var geoEx in aggregateExceptions.Where(x => x.Level == "Geo" && x.Entity == geoName && x.Parent == account))
            {
                sb.AppendLine($"  - Elevated {geoEx.Metric} at Geo level: {geoEx.Actual}% vs target {geoEx.Target}%.");
            }

            foreach (var lob in geoNode.Children)
            {
                string lobName = lob.Key;
                var lobNode = lob.Value;

                var lobExceptions = new List<string>();

                foreach (var metric in lobNode.Data)
                {
                    string key = metric.Key;
                    string valueStr = metric.Value;

                    if (string.IsNullOrWhiteSpace(valueStr) || valueStr == "undefined" || valueStr == "0")
                        continue;

                    if (!double.TryParse(valueStr, out double value))
                        continue;

                    // FTE Delta check (absolute value > 20)
                    if (key.EndsWith("_Delta") && Math.Abs(value) > 20)
                    {
                        lobExceptions.Add($"Significant FTE Delta ({key}): {value}");
                        continue;
                    }

                    // Lower-is-better metric
                    if ((key == "Attr%" || key == "Shri%") && value > 5)
                    {
                        lobExceptions.Add($"{key} is high: {value}% (target ≤ 5%)");
                    }
                }

                if (lobExceptions.Any())
                {
                    sb.AppendLine($"\n    📌 **LOB: {lobName}**");
                    foreach (var ex in lobExceptions)
                    {
                        sb.AppendLine($"    - {ex}");
                    }
                }
            }
        }
    }

    sb.AppendLine("\n🧠 Please provide a concise performance analysis considering the above exceptions.");
    return sb.ToString();
}
