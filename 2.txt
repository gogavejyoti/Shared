//Config-trigger
$(document).ready(function () {
    // Utility: get all sheet names from luckyshee
    loadConfigs($("#planId").val());
    function loadConfigs(planId) {
        return $.ajax({
            url: "/SheetConfig/GetConfigs",
            type: "GET",
            data: { planId: planId }
        }).then(res => {
            console.log("Loaded configs:", res);
            window.savedConfigs = res || {};
            return window.savedConfigs;
        });
    }


    function getLuckysheetSheetNames() {
        const files = luckysheet.getluckysheetfile();
        if (!files) return [];
        return files.map(f => f.name);
    }

    // Utility: get headers from active sheet (row 0 by default)
    function getLuckysheetHeaders(sheetName) {
        const files = luckysheet.getluckysheetfile();
        if (!files) return [];
        const sheet = files.find(s => s.name === sheetName);
        if (!sheet || !sheet.data) return [];

        const headerRow = sheet.data[0] || [];
        return headerRow.map(cell => (cell && (cell.m || cell.v)) ? (cell.m || cell.v) : "");
    }

    // Utility: get full data for sheet
    function getLuckysheetData(sheetName) {
        const files = luckysheet.getluckysheetfile();
        if (!files) return [];
        const sheet = files.find(s => s.name === sheetName);
        return sheet ? sheet.data : [];
    }



    function getActiveSheetName() {
        const files = luckysheet.getluckysheetfile();
        const active = files.find(s => s.status === 1); // active sheet has status = 1
        return active ? active.name : (files.length ? files[0].name : null);
    }

    // Button click handler
    $('#openConfigModal').on('click', function () {
            const sheetNames = getLuckysheetSheetNames();
            if (!sheetNames.length) {
                alert("No Luckysheet data found yet. Please wait until sheet loads.");
                return;
        }
        const activeSheet = getActiveSheetName();
            $('#openConfigModal').sheetConfigurator({
                luckysheetInstances: sheetNames,
                existingConfigs: window.savedConfigs || {},  // global store
                activeSheet: activeSheet,
                saveCallback: function (config, sheetName) {
                    console.log("Saved Config:", sheetName, config);

                    // Ensure global storage
                    window.savedConfigs = window.savedConfigs || {};
                    window.savedConfigs[sheetName] = config;

                    const planId = $("#planId").val();
                    const currentSheets = getLuckysheetSheetNames();

                    // ðŸ”¹ Remove configs of sheets no longer present
                    for (let name in window.savedConfigs) {
                        if (!currentSheets.includes(name)) {
                            delete window.savedConfigs[name];
                        }
                    }

                    // ðŸ”¹ Prepare payload
                    const payload = Object.keys(window.savedConfigs).map(name => ({
                        planId: planId,
                        sheetName: name,
                        configJson: JSON.stringify(window.savedConfigs[name])
                    }));

                    // ðŸ”¹ AJAX call to save all configs
                    return $.ajax({
                        url: "/SheetConfig/SaveConfigs",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(payload)
                    }).done(res => {
                        console.log("Configs saved:", res);
                    }).fail(err => {
                        console.error("Error saving configs:", err);
                        alert("Failed to save sheet configurations. Please try again.");
                    });
                },


                getSheetDataFn: getLuckysheetData
            });

            $('#sheetConfigModal').modal({
                backdrop: 'static',
                keyboard: false
            }).modal('show');
        });



    // Call this to validate all configurations
    function validateAllConfigs(sheetNames, configs, getSheetDataFn) {
        const results = {};

        sheetNames.forEach(sheetName => {
            const cfg = configs[sheetName];
            let status = { valid: true, errors: [] };

            if (!cfg) {
                status.valid = false;
                status.errors.push("No configuration found for this sheet");
                results[sheetName] = status;
                return;
            }

            if (!cfg.type) {
                status.valid = false;
                status.errors.push("Sheet type not selected");
            }

            if (cfg.type === "lob") {
                // Check lobType
                if (!cfg.lobType) {
                    status.valid = false;
                    status.errors.push("LOB Type missing");
                }
                // Check location
                if (!cfg.location) {
                    status.valid = false;
                    status.errors.push("Location missing");
                }
                // Check week row
                const sheetData = getSheetDataFn(sheetName) || [];
                if (!cfg.weekRow || isNaN(cfg.weekRow)) {
                    status.valid = false;
                    status.errors.push("Week row not set");
                } else {
                    const weekCheck = validateWeekRow({ data: sheetData }, parseInt(cfg.weekRow));
                    if (!weekCheck.valid) {
                        status.valid = false;
                        status.errors.push("Invalid week row (no dates)");
                    }
                }
                // Check header column
                if (!cfg.headerCol) {
                    status.valid = false;
                    status.errors.push("Header column not set");
                }
                // Check mappings
                const requiredHeaders = ["FTE Required", "FTE Available", "Transactions", "Productivity"];
                requiredHeaders.forEach(h => {
                    if (!cfg.headerMappings || !cfg.headerMappings[h]) {
                        status.valid = false;
                        status.errors.push(`Header not mapped: ${h}`);
                    }
                });
            } else if (cfg.type === "custom") {
                // For custom, just check type is set
                if (cfg.type !== "custom") {
                    status.valid = false;
                    status.errors.push("Custom type required for non-LOB sheet");
                }
            }

            results[sheetName] = status;
        });

        return results;
    }


    // Reuse validateWeekRow from your plugin
    function validateWeekRow(sheet, rowNum) {
        const row = sheet.data ? sheet.data[rowNum - 1] : sheet[rowNum - 1];
        if (!row) return { valid: false };

        let start = null, end = null;
        row.forEach((cell, idx) => {
            const val = cell && (cell.m || cell.v);
            if (val && !isNaN(Date.parse(val))) {
                if (start === null) start = val;
                end = val;
            }
        });
        return { valid: start !== null, start, end };
    }


    $('#validateConfigsBtn').on('click', function () {
        //const sheetNames = getLuckysheetSheetNames();
        //const results = validateAllConfigs(sheetNames, window.savedConfigs, getLuckysheetData);
        //showValidationSummary(sheetNames, results);

        const planId = $("#planId").val();
        saveExtractedData(planId, window.savedConfigs, getLuckysheetData);
    });

    function showValidationSummary(sheetNames, results) {
        // Remove old modal if exists
        $('#validationSummaryModal').remove();

        // Build modal dynamically
        let modalHtml = `
    <div class="modal fade" id="validationSummaryModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header bg-primary text-white">
            <h5 class="modal-title">Configuration Validation Summary</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <table class="table table-bordered table-hover align-middle">
              <thead class="table-light">
                <tr>
                  <th>Sheet Name</th>
                  <th>Status</th>
                  <th>Details</th>
                </tr>
              </thead>
              <tbody id="validationSummaryBody">`;

        sheetNames.forEach(sheet => {
            const r = results[sheet];

            let statusBadge = r.valid
                ? '<span class="badge bg-success">Valid</span>'
                : '<span class="badge bg-danger">Invalid</span>';

            let details = "";
            if (r.valid) {
                details = '<span class="text-success">All checks passed</span>';
            } else {
                details = '<ul class="mb-0">';
                r.errors.forEach(e => {
                    details += `<li class="text-danger">${e}</li>`;
                });
                details += '</ul>';
            }

            modalHtml += `
          <tr>
            <td><strong>${sheet}</strong></td>
            <td>${statusBadge}</td>
            <td>${details}</td>
          </tr>`;
        });

        modalHtml += `
              </tbody>
            </table>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>`;

        // Append and show modal
        $('body').append(modalHtml);
        $('#validationSummaryModal').modal({
            backdrop: 'static',
            keyboard: false
        }).modal('show');
    }

   

    function getCellValue(sheetData, row, col) {
        if (!sheetData[row]) return null;
        const cell = sheetData[row][col];
        return cell ? cell.v : null; 
    }
    function extractAllData(planId, savedConfigs, getSheetDataFn) {
        let allResults = [];
        Object.entries(savedConfigs).forEach(([sheetName, config]) => {
            const sheetResults = extractSheetData(planId, sheetName, config, getSheetDataFn);
            allResults = allResults.concat(sheetResults);
        });
        return allResults;
    }
    function extractSheetData(planId, sheetName, config, getSheetDataFn) {
        const sheetData = getSheetDataFn(sheetName);
        if (!sheetData || !config || config.type !== "lob") return [];

        const results = [];

        // Convert header column (A â†’ 0, numeric â†’ index)
        let headerColIdx = isNaN(config.headerCol)
            ? config.headerCol.toUpperCase().charCodeAt(0) - 65
            : parseInt(config.headerCol) - 1;

        const weekRowIdx = parseInt(config.weekRow) - 1;
        const weekRow = sheetData[weekRowIdx];
        if (!weekRow) return [];

        // Collect all weeks from the week row
        const weeks = [];
        weekRow.forEach((cell, colIdx) => {
            const val = cell && cell.v; // âœ… calculated value only
            if (val && !isNaN(Date.parse(val))) {
                weeks.push({ col: colIdx, date: new Date(val) });
            }
        });

        // Loop through header mappings
        Object.entries(config.headerMappings).forEach(([stdHeader, mappedHeader]) => {
            let headerRowIdx = null;

            for (let r = 0; r < sheetData.length; r++) {
                const val = getCellValue(sheetData, r, headerColIdx);
                if (val === mappedHeader) {
                    headerRowIdx = r;
                    break;
                }
            }

            if (headerRowIdx !== null) {
                weeks.forEach(week => {
                    const value = getCellValue(sheetData, headerRowIdx, week.col);
                    results.push({
                        planId,
                        sheetName,
                        week: week.date.toISOString().split("T")[0], // yyyy-mm-dd
                        header: stdHeader,
                        value: $.isNumeric(value) ? Number(value) : null
                    });
                });
            }
        });

        return results;
    }

    function saveExtractedData(planId, savedConfigs, getSheetDataFn) {
        const data = extractAllData(planId, savedConfigs, getSheetDataFn);
        if (!data.length) {
            console.warn("No extracted data to save.");
            return;
        }
        return $.ajax({
            url: "/SheetConfig/SaveExtractedValues",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(data)
        }).done(res => {
            console.log("Extracted values saved:", res);
        }).fail(err => {
            console.error("Save failed:", err);
        });
    }


});


//Sheet Configu
(function ($) {
    $.fn.sheetConfigurator = function (options) {
        const settings = $.extend({
            luckysheetInstances: [],
            existingConfigs: {},     // saved configs
            activeSheet: null,
            saveCallback: function (config, sheetName) { },
            getSheetDataFn: function (sheetName) { return []; }
        }, options);

        let tempConfigs = {};  // live while dialog open only

        // Inject modal once
        if (!$('#sheetConfigModal').length) {
            $('body').append(`
              <div class="modal fade" id="sheetConfigModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title">Sheet Configuration</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                      <form id="sheetConfigForm" class="container-fluid">
                        <div class="row mb-3">
                          <div class="col-md-6">
                            <label class="form-label">Sheet</label>
                            <select class="form-select" id="configSheetSelect"></select>
                          </div>
                          <div class="col-md-6">
                            <label class="form-label">Sheet Type</label>
                            <select class="form-select" id="configSheetType">
                              <option value="custom">Custom</option>
                              <option value="lob">LOB</option>
                            </select>
                          </div>
                        </div>

                        <div id="lobInputs" style="display:none;">
                          <div class="row mb-3">
                            <div class="col-md-6">
                              <label class="form-label">LOB Type</label>
                              <select class="form-select" id="configLobType">
                                <option value="fte">FTE</option>
                                <option value="transaction">Transaction</option>
                              </select>
                            </div>
                            <div class="col-md-6">
                              <label class="form-label">Location</label>
                              <select class="form-select" id="configLocation">
                                <option value="us">US</option>
                                <option value="india">India</option>
                                <option value="uk">UK</option>
                              </select>
                            </div>
                          </div>

                          <div class="row mb-3">
                            <div class="col-md-6">
                              <label class="form-label">Week Header Row</label>
                              <input type="number" min="1" class="form-control" id="configWeekRow" />
                              <div class="form-text">Row number that contains dates.</div>
                              <small class="text-muted" id="weekDateLabel"></small>
                            </div>
                            <div class="col-md-6">
                              <label class="form-label">Header Column</label>
                              <input type="text" class="form-control" id="configHeaderCol" />
                              <div class="form-text">Column with headers.</div>
                            </div>
                          </div>
                        </div>

                        <div id="headerMappingContainer" class="mt-3"></div>
                      </form>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                      <button type="button" class="btn btn-primary" id="saveConfigBtn">Save</button>
                    </div>
                  </div>
                </div>
              </div>
            `);
        }

        const $sheetSelect = $('#configSheetSelect');
        const $sheetType = $('#configSheetType');
        const $lobInputs = $('#lobInputs');
        const $weekRow = $('#configWeekRow');
        const $headerCol = $('#configHeaderCol');
        const $mappingContainer = $('#headerMappingContainer');
        const $weekLabel = $('#weekDateLabel');

        // Reset on modal close (discard temp)
        $('#sheetConfigModal').off('hidden.bs.modal').on('hidden.bs.modal', function () {
            tempConfigs = {};
        });

        // === Helpers ===
        function getFormConfig(sheetName) {
            const cfg = {
                sheetName,
                type: $sheetType.val(),
                lobType: $('#configLobType').val(),
                location: $('#configLocation').val(),
                weekRow: $weekRow.val(),
                headerCol: $headerCol.val(),
                headerMappings: {}
            };
            $('.mapping-dropdown').each(function () {
                const std = $(this).data('std');
                const val = $(this).val();
                if (val) cfg.headerMappings[std] = val;
            });
            return cfg;
        }

        function bindConfig(config) {
            // reset first
            $sheetType.val('custom').trigger('change');
            $lobInputs.hide();
            $weekRow.val('');
            $headerCol.val('');
            $mappingContainer.empty();
            $weekLabel.text('');

            if (!config) return;

            $sheetType.val(config.type || 'custom').trigger('change');
            if (config.type === 'lob') $lobInputs.show();

            $('#configLobType').val(config.lobType || 'fte');
            $('#configLocation').val(config.location || 'us');
            $weekRow.val(config.weekRow || '');
            $headerCol.val(config.headerCol || '');

            if (config.headerCol) {
                const sheetData = settings.getSheetDataFn(config.sheetName);
                buildHeaderMapping(sheetData, config.headerCol, config.headerMappings || {});
            }
        }

        function validateWeekRow(sheet, rowNum) {
            const row = sheet.data ? sheet.data[rowNum - 1] : sheet[rowNum - 1];
            if (!row) return { valid: false };
            let start = null, end = null;
            row.forEach(cell => {
                const val = cell && (cell.m || cell.v);
                if (val && !isNaN(Date.parse(val))) {
                    if (start === null) start = val;
                    end = val;
                }
            });
            return { valid: start !== null, start, end };
        }

        function buildHeaderMapping(sheetData, colInput, existingMappings) {
            if (!colInput) return;
            let colIdx = isNaN(colInput)
                ? colInput.toUpperCase().charCodeAt(0) - 65
                : parseInt(colInput) - 1;

            const headers = [];
            for (let r = 0; r < sheetData.length; r++) {
                const cell = sheetData[r][colIdx];
                if (cell) {
                    const val = cell.m || cell.v || "";
                    if (val) headers.push(val);
                }
            }
            const uniqueHeaders = [...new Set(headers.filter(h => h.trim() !== ""))];

            $mappingContainer.empty();
            if (!uniqueHeaders.length) return;

            const standardHeaders = ["FTE Required", "FTE Available", "Transactions", "Productivity"];
            standardHeaders.forEach(std => {
                let options = uniqueHeaders.map(h =>
                    `<option value="${h}" ${existingMappings && existingMappings[std] === h ? "selected" : ""}>${h}</option>`
                ).join("");
                $mappingContainer.append(`
                  <div class="row mb-2">
                    <div class="col-md-6"><label class="form-label">${std}</label></div>
                    <div class="col-md-6">
                      <select class="form-select mapping-dropdown" data-std="${std}">
                        <option value="">--Select--</option>
                        ${options}
                      </select>
                    </div>
                  </div>
                `);
            });
        }

        // === Populate sheet dropdown ===
        $sheetSelect.empty();
        settings.luckysheetInstances.forEach(name => {
            $sheetSelect.append(`<option value="${name}">${name}</option>`);
        });

        if (settings.activeSheet) {
            $sheetSelect.val(settings.activeSheet);
            bindConfig(settings.existingConfigs[settings.activeSheet] || null);
            $sheetSelect.data('lastSheet', settings.activeSheet);
        }

        // Switch sheets inside dialog
        $sheetSelect.off('change').on('change', function () {
            const prevSheet = $(this).data('lastSheet');
            const newSheet = $(this).val();
            if (prevSheet) {
                tempConfigs[prevSheet] = getFormConfig(prevSheet);
            }
            const config = tempConfigs[newSheet] || settings.existingConfigs[newSheet] || null;
            bindConfig(config);
            $(this).data('lastSheet', newSheet);
        });

        // Week row validation
        $weekRow.off('blur').on('blur', function () {
            const sheetName = $sheetSelect.val();
            const sheetData = settings.getSheetDataFn(sheetName) || [];
            const weekCheck = validateWeekRow({ data: sheetData }, parseInt($(this).val()));
            if (weekCheck.valid) {
                $weekLabel.text(`Start: ${weekCheck.start} â†’ End: ${weekCheck.end}`);
            } else {
                $weekLabel.text("Invalid week row (no dates found).");
            }
        });

        // Header col input
        $headerCol.off('blur').on('blur', function () {
            const sheetName = $sheetSelect.val();
            const sheetData = settings.getSheetDataFn(sheetName) || [];
            buildHeaderMapping(sheetData, $(this).val(), {});
        });

        // Save button
        $('#saveConfigBtn').off('click').on('click', function () {
            const sheetName = $sheetSelect.val();
            const config = getFormConfig(sheetName);

            //if (config.type === "lob") {
            //    const sheetData = settings.getSheetDataFn(sheetName) || [];
            //    const weekCheck = validateWeekRow({ data: sheetData }, parseInt(config.weekRow));
            //    if (!weekCheck.valid) {
            //        alert("Week header row must contain at least one valid date.");
            //        return;
            //    }
            //    config.weekRange = { start: weekCheck.start, end: weekCheck.end };

            //    for (const std of ["FTE Required", "FTE Available", "Transactions", "Productivity"]) {
            //        if (!config.headerMappings[std]) {
            //            alert(`Please map header for ${std}`);
            //            return;
            //        }
            //    }
            //}

            settings.existingConfigs[sheetName] = config; // persist
            delete tempConfigs[sheetName];
            settings.saveCallback(config, sheetName);
            $('#sheetConfigModal').modal('hide');
        });

        // Toggle LOB inputs
        $sheetType.off('change').on('change', function () {
            if ($(this).val() === 'lob') $lobInputs.show();
            else {
                $lobInputs.hide();
                $mappingContainer.empty();
            }
        });

        return this;
    };
})(jQuery);



//View Plan 
@{
    ViewBag.Title = "View Plan";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>View Plan in Luckysheet</title>

    <!-- LuckySheet CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" xintegrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="~/lib/lucksheet/css/pluginscss.css" rel="stylesheet" />
    <link href="~/lib/lucksheet/css/plugins.css" rel="stylesheet" />
    <link href="~/lib/lucksheet/css/luckysheet.css" rel="stylesheet" />
    <link href="~/lib/lucksheet/css/iconfont.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
        }

        #luckysheet {
            margin: 0px;
            padding: 0px;
            position: absolute;
            width: 100%;
            height: 100%;
        }
    </style>
 <style>
       
        /* Enhanced Toolbar Styling */
        #toolbarContainer {
            background: linear-gradient(135deg, #f8f9fa, #e2e6ea); /* Subtle gradient background */
            border: 1px solid rgba(0, 0, 0, 0.05); /* Light border */
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); /* More pronounced shadow */
            transition: all 0.3s ease; /* Smooth transitions for hover effects */
        }
        #toolbarContainer:hover {
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15); /* Slightly larger shadow on hover */
        }

        /* Enhanced Button Styling - Icon with label on hover */
        .btn-fancy-hover-label {
            font-weight: 600; /* Semi-bold text */
            border: none; /* Remove default border */
            border-radius: 0.3rem; /* Slightly smaller border-radius for compactness */
            padding: 0.45rem; /* Equal padding for square icon button */
            transition: all 0.2s ease-in-out; /* Smooth transition for hover */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Button specific shadow */
            display: flex; /* Ensure flex for centering icon */
            flex-direction: column; /* Stack icon and text vertically */
            align-items: center;
            justify-content: center;
            width: 2.5rem; /* Fixed width for square button */
            height: 2.5rem; /* Fixed height for square button */
            position: relative; /* Needed for absolute positioning of label */
            overflow: visible; /* Allow label to overflow */
        }

        .btn-fancy-hover-label .button-label {
            position: absolute;
            bottom: -0.5rem; /* Position below the button */
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.75);
            color: white;
            padding: 0.2rem 0.5rem;
            border-radius: 0.2rem;
            font-size: 0.7rem;
            white-space: nowrap; /* Prevent text wrapping */
            opacity: 0; /* Initially hidden */
            visibility: hidden; /* Hidden from screen readers when not hovered */
            transition: opacity 0.2s ease, visibility 0.2s ease;
            z-index: 10; /* Ensure label is above other elements */
        }

        .btn-fancy-hover-label:hover .button-label {
            opacity: 1; /* Show on hover */
            visibility: visible;
        }

        .btn-fancy-success {
            background: linear-gradient(45deg, #28a745, #218838); /* Green gradient */
            color: white;
        }
        .btn-fancy-success:hover {
            background: linear-gradient(45deg, #218838, #1e7e34); /* Darker green on hover */
            transform: translateY(-1px); /* Slight lift effect */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        .btn-fancy-success:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .btn-fancy-primary {
            background: linear-gradient(45deg, #007bff, #0056b3); /* Blue gradient */
            color: white;
        }
        .btn-fancy-primary:hover {
            background: linear-gradient(45deg, #0056b3, #004085); /* Darker blue on hover */
            transform: translateY(-1px); /* Slight lift effect */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        .btn-fancy-primary:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        /* Icon sizing within buttons */
        .btn-fancy-hover-label svg {
            width: 1.2rem; /* Icon size */
            height: 1.2rem;
            margin-bottom: 0; /* No margin as label is positioned */
        }

        /* Custom styling for the message box to avoid Bootstrap JS modals */
        .custom-message-box {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4); /* Darker overlay */
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1050;
        }
        .custom-message-box-content {
            background-color: white;
            padding: 2rem; /* More padding */
            border-radius: 0.75rem; /* More rounded corners */
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2); /* Deeper shadow */
            text-align: center;
            max-width: 400px; /* Max width for readability */
            animation: fadeIn 0.3s ease-out; /* Fade-in animation */
        }
        @@keyframes fadeIn {
            from { opacity: 0; transform: scale(0.9); }
            to { opacity: 1; transform: scale(1); }
        }

        /* Account Info Styling */
        .account-info {
            display: flex;
            align-items: center;
            flex-shrink: 0; /* Prevent shrinking on smaller screens */
        }
        .account-logo {
            width: 40px; /* Adjust size as needed */
            height: 40px;
            border-radius: 50%; /* Make it round */
            object-fit: cover; /* Ensure image covers the area */
            margin-right: 10px;
            border: 1px solid #dee2e6; /* Light border for the logo */
        }
        .account-details {
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        .account-name {
            font-weight: 600;
            color: #343a40; /* Darker text for prominence */
            font-size: 0.95rem;
            white-space: nowrap; /* Prevent wrapping */
        }
        .lob-name {
            font-size: 0.8rem;
            color: #6c757d; /* Muted color for LOB */
            white-space: nowrap; /* Prevent wrapping */
        }

        /* Responsive adjustments for toolbar layout */
        @@media (max-width: 575.98px) {
            #toolbarContainer {
                flex-direction: column;
                align-items: flex-start; /* Align items to start on small screens */
            }
            .account-info {
                margin-bottom: 1rem; /* Space between account info and buttons on small screens */
            }
            .d-flex.align-items-center.mb-3.mb-sm-0 {
                width: 100%; /* Buttons take full width on small screens */
                justify-content: space-around; /* Distribute buttons evenly */
            }
            .btn-fancy-hover-label {
                margin-right: 0 !important; /* Remove individual button margins */
            }
            .btn-fancy-hover-label:not(:last-child) {
                margin-right: 0.5rem !important; /* Add small space between buttons */
            }
        }


        #loader-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

            #loader-overlay .spinner-border {
                width: 3rem;
                height: 3rem;
                color: #fff;
            }

            .luckysheet_info_detail{
                display:none!important;
            }
    </style>
    <style>
        /* Fix sheet tabs ABOVE the status bar */
        #luckysheet-sheet-area {
            position: fixed !important;
            bottom: 30px; /* Height of status bar */
            left: 0;
            right: 0;
            width: 100%;
            z-index: 9999;
            background: #fff;
            border-top: 1px solid #ddd;
            padding: 5px 0;
        }

        /* Fix status bar at very bottom */
        .luckysheet-stat-area {
            position: fixed !important;
            bottom: 0; /* Stick to bottom of window */
            left: 0;
            right: 0;
            width: 100%;
            z-index: 9998;
            background: #f9f9f9;
            border-top: 1px solid #ddd;
            padding: 5px 0;
        }

        #luckysheet-scrollbar-x{
            margin-bottom: 5px!important;
        }

    </style>
</head>
<body>

    <input type="hidden" id="planId" value="@ViewBag.PlanId">
     <div id="toolbarContainer" class="d-flex flex-column flex-sm-row align-items-center justify-content-between p-3 rounded">
                <!-- Left Column: Account Info -->
                <div class="account-info mb-3 mb-sm-0">
                    <img src="https://placehold.co/40x40/cccccc/333333?text=Logo" alt="Account Logo" class="account-logo">
                    <div class="account-details">
                <span class="account-name">@ViewBag.AccountName</span>
                <span class="lob-name">@ViewBag.PlanName</span>
                    </div>
                </div>

                <!-- Right Column: Buttons Group -->
                <div class="d-flex align-items-center">
                    <!-- Save Button (Icon with Hover Label) -->
                    <button id="btnSaveSheets" class="btn-fancy-hover-label btn-fancy-success me-3" title="Save">
                        <svg fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path d="M20 2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8 17c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm-6-7h12V4H6v8z"/>
                        </svg>
                        <span class="button-label">Save</span>
                    </button>

                    <!-- View Versions Button (Icon with Hover Label) -->
                    <button id="btnViewVersions" class="btn-fancy-hover-label btn-fancy-primary me-3" title="View Versions">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2zm3-11v6.59L13.59 12 16 14.41V11"></path></svg>
                        <span class="button-label">Versions</span>
                    </button>

                    <!-- Dashboard Button (Icon with Hover Label) -->
                    <button id="btnDashboard" class="btn-fancy-hover-label btn-fancy-primary" title="Dashboard">
                <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.5 7.49999L10 1.66666L17.5 7.49999V16.6667C17.5 17.1087 17.3244 17.5326 17.0118 17.8452C16.6993 18.1577 16.2754 18.3333 15.8333 18.3333H4.16667C3.72464 18.3333 3.30072 18.1577 2.98816 17.8452C2.67559 17.5326 2.5 17.1087 2.5 16.6667V7.49999Z" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path>
                    <path d="M7.5 18.3333V10H12.5V18.3333" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path>
                </svg>
                        <span class="button-label">Dashboard</span>
                    </button>

            <button id="btnRefreshCharts" class="btn-fancy-hover-label btn-fancy-warning ms-3" title="Refresh Charts">
                <i class="fa fa-refresh"></i>
                <span class="button-label">Refresh</span>
            </button>


            <button id="validateConfigsBtn" class="btn-fancy-hover-label btn-fancy-warning ms-3" title="Refresh Charts">
                <i class="fa fa-bar"></i>
                <span class="button-label">Validate</span>
            </button>


            <button id="openConfigModal" class="btn btn-primary m-3">Open Configurator</button>

        

                </div>
            </div>

    <div id="luckysheet"></div>
    <!-- Loader Overlay (New) -->
    <div id="loader-overlay">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

   

    <!-- LuckySheet JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script type="module" src="/locale/en.js"></script>
    <script type="module" src="~/expendplugins/chart/plugin.js"></script>
    <script src="~/lib/lucksheet/js/plugin.js"></script>
    <script src="~/lib/lucksheet/js/luckysheet.umd.js"></script>
    <script src="~/lib/lucksheet/js/luckysheetenhancer.js" asp-append-version="true"></script>
    <script src="https://cdn.jsdelivr.net/npm/xlsx/dist/xlsx.full.min.js"></script>
/*     <script src="~/lib/lucksheet/js/export-to-excel/exportexcelplugin.js"></script> */
    <script src="~/lib/lucksheet/js/export-to-excel/importfromexcel.js"></script>
    <script src="~/app/js/graphicalsummaryplugin.js" asp-append-version="true"></script>
    <script src="~/app/js/view-plan.js" asp-append-version="true"></script>
    <script src="~/app/js/sheet-week-extension.js" asp-append-version="true"></script>
    <script src="~/lib/lucksheet/js/jquery.sheetconfigurator.js" asp-append-version="true"></script>
    <script src="~/lib/lucksheet/js/config-trigger.js" asp-append-version="true"></script>
</body>
</html>




using Dapper;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Sutherland.WFMResourcePlanner.Entities;
using Sutherland.WFMResourcePlanner.Repository.Inerface;
using Sutherland.WFMResourcePlanner.Web.Models;
using System.Data;
using System.Data.SqlClient;
using System.Numerics;

namespace Sutherland.WFMResourcePlanner.Web.Controllers
{
    public class SheetConfigController : Controller
    {

        private readonly ISheetConfigRepository _sheetConfigRepository;
        public SheetConfigController(ISheetConfigRepository sheetConfigRepository)
        {
            _sheetConfigRepository = sheetConfigRepository;
        }


        [HttpGet]
        public async Task<IActionResult> GetConfigs(int planId)
        {
            var configs = await _sheetConfigRepository.GetConfigs(planId);
            var result = new Dictionary<string, SheetInputConfig>();
            foreach (var row in configs)
            {
                var cfg = JsonConvert.DeserializeObject<SheetInputConfig>(row.ConfigJson);
                if (cfg != null)
                {
                    cfg.SheetName = row.SheetName; 
                    result[row.SheetName] = cfg;
                }
            }
            return Ok(result);
        }

        [HttpPost]
        public async Task<IActionResult> SaveConfigs([FromBody] List<SheetConfig> configs)
        {
            if (configs == null || configs.Count == 0)
                return BadRequest("No configs provided.");

            await _sheetConfigRepository.SaveConfigs(configs);
            return Ok(new { Message = "Configs saved successfully" });
        }

        [HttpDelete]
        public async Task<IActionResult> DeleteConfig(int planId, string sheetName)
        {
            await _sheetConfigRepository.DeleteConfig(planId, sheetName);
            return Ok(new { Message = $"Config deleted for sheet {sheetName}" });
        }


        [HttpPost]
        public async Task<IActionResult> SaveExtractedValues([FromBody] List<SheetValueDto> values)
        {
            if (values == null || values.Count == 0)
                return BadRequest("No data received.");
            await _sheetConfigRepository.SaveExtractedValues(values);
            return Ok(new { saved = values.Count });
        }

    }
}


using Dapper;
using Sutherland.WFMResourcePlanner.Entities;
using Sutherland.WFMResourcePlanner.Repository.Inerface;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Sutherland.WFMResourcePlanner.Repository.Implementation
{
    public class SheetConfigRepository : ISheetConfigRepository
    {
        private readonly IDbConnection _connection;
        public SheetConfigRepository(IDbConnection connection)
        {
            _connection = connection;
        }
        public async Task<bool> DeleteConfig(int planId, string sheetName)
        {
            if (_connection.State != ConnectionState.Open)
                await((SqlConnection)_connection).OpenAsync();
            await _connection.ExecuteAsync("DELETE FROM SheetConfigs WHERE PlanId=@planId AND SheetName=@sheetName", new { planId, sheetName });

            return true;
        }

        public async Task<IEnumerable<SheetConfig>> GetConfigs(int planId)
        {
            if (_connection.State != ConnectionState.Open)
                await((SqlConnection)_connection).OpenAsync();

            return await _connection.QueryAsync<SheetConfig>(
                        "SELECT SheetName, ConfigJson FROM SheetConfigs WHERE PlanId=@PlanId", new {PlanId=planId});
        }

        public async Task<bool> SaveConfigs(List<SheetConfig> configs)
        {
            if (_connection.State != ConnectionState.Open)
                await((SqlConnection)_connection).OpenAsync();

            var planId = configs.First().PlanId;



            // ðŸ”¹ Get all existing sheet names in DB for this plan
            var existingSheets = (await _connection.QueryAsync<string>(
                "SELECT SheetName FROM SheetConfigs WHERE PlanId = @PlanId",
                new { PlanId = planId }
            )).ToList();

            // ðŸ”¹ Find sheets to delete (exist in DB but not in request)
            var incomingSheets = configs.Select(c => c.SheetName).ToList();
            var sheetsToDelete = existingSheets.Except(incomingSheets).ToList();

            // ðŸ”¹ Delete removed sheets
            if (sheetsToDelete.Any())
            {
                await _connection.ExecuteAsync(
                    "DELETE FROM SheetConfigs WHERE PlanId = @PlanId AND SheetName IN @Names",
                    new { PlanId = planId, Names = sheetsToDelete }
                );
            }

            // ðŸ”¹ Upsert configs (Insert if not exist, else Update)
            foreach (var cfg in configs)
            {
                var sql = @"
            IF EXISTS (SELECT 1 FROM SheetConfigs WHERE PlanId = @PlanId AND SheetName = @SheetName)
                UPDATE SheetConfigs 
                SET ConfigJson = @ConfigJson, UpdatedOn = GETUTCDATE()
                WHERE PlanId = @PlanId AND SheetName = @SheetName
            ELSE
                INSERT INTO SheetConfigs (PlanId, SheetName, ConfigJson, CreatedOn)
                VALUES (@PlanId, @SheetName, @ConfigJson, GETUTCDATE());
        ";

                await _connection.ExecuteAsync(sql, cfg);
            }



            return true;
        }


        public async Task<bool> SaveExtractedValues(List<SheetValueDto> values)
        {
            if (_connection.State != ConnectionState.Open)
                await ((SqlConnection)_connection).OpenAsync();

            // Use table-valued parameter for bulk merge
            var dt = new DataTable();
            dt.Columns.Add("PlanId", typeof(int));
            dt.Columns.Add("SheetName", typeof(string));
            dt.Columns.Add("Week", typeof(DateTime));
            dt.Columns.Add("Header", typeof(string));
            dt.Columns.Add("Value", typeof(decimal)); // adjust type

            foreach (var v in values)
            {
                dt.Rows.Add(v.PlanId, v.SheetName, DateTime.Parse(v.Week), v.Header, (object?)v.Value ?? DBNull.Value);
            }
            await _connection.ExecuteAsync(
                "dbo.MergeSheetValues",
                new { Values = dt.AsTableValuedParameter("dbo.SheetValueType") },
                commandType: CommandType.StoredProcedure
            );

            return true;
        }

    }
}



CREATE TABLE [dbo].[SheetConfigs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PlanId] [int] NULL,
	[SheetName] [nvarchar](100) NOT NULL,
	[ConfigJson] [nvarchar](max) NOT NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedOn] [datetime] NULL,
 CONSTRAINT [PK__SheetCon__3214EC0740E5DB5C] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


  public class SheetConfig
  {
      public int PlanId { get; set; }
      public string SheetName { get; set; }
      public string ConfigJson { get; set; }
  }



  public class SheetValueDto
  {
      public int PlanId { get; set; }
      public string SheetName { get; set; } = string.Empty;
      public string Week { get; set; } = string.Empty;  // coming as ISO string from JS, will parse to DateTime
      public string Header { get; set; } = string.Empty;
      public float? Value { get; set; }
  }






