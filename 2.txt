        private static List<float> ForecastMetric_v1(MLContext mlContext, List<float> values, int forecastHorizon)
        {
            // Step 1: Remove trailing zeros
            values = values.TakeWhile(v => v != 0).ToList();

            // Step 2: Handle short series
            if (values == null || values.Count < 6)
            {
                var lastVal = values?.LastOrDefault() ?? 0f;
                return Enumerable.Repeat(lastVal, forecastHorizon).ToList();
            }

            // Step 3: Dynamically calculate window size
            int trainSize = values.Count;
            int windowSize = Math.Max(4, trainSize / 3); // Ensure windowSize is reasonable
            if (trainSize <= 2 * windowSize)
            {
                windowSize = trainSize / 2 - 1; // Adjust to avoid exception
            }

            // Step 4: Prepare data
            var data = values.Select(v => new MetricData { Value = v }).ToList();
            var dataView = mlContext.Data.LoadFromEnumerable(data);

            // Step 5: Create SSA pipeline
            var pipeline = mlContext.Forecasting.ForecastBySsa(
                outputColumnName: nameof(ForecastPrediction.ForecastedValues),
                inputColumnName: nameof(MetricData.Value),
                windowSize: windowSize,
                seriesLength: trainSize,
                trainSize: trainSize,
                horizon: forecastHorizon);

            // Step 6: Train and forecast
            var model = pipeline.Fit(dataView);
            var forecastEngine = model.CreateTimeSeriesEngine<MetricData, ForecastPrediction>(mlContext);
            var forecast = forecastEngine.Predict();

            return forecast.ForecastedValues.ToList();
        }
