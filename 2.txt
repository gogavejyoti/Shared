/**
 * Returns a 2D array of the currently selected cells' formatted values,
 * preserving their row/column layout.
 */
getSelectedCellsData: function () {
    const selDict = this._pivotCells?._selectedCells || {};
    const rowMap = {};

    // 1) Iterate over each selected‐cell entry
    Object.keys(selDict).forEach(rawKey => {
        // rawKey is like "7_0:" → strip trailing colon, split on "_"
        const [rowStr, colStr] = rawKey.replace(/:$/, '').split('_');
        const rowIdx = parseInt(rowStr, 10);
        const colIdx = parseInt(colStr, 10);
        const cellEntry = selDict[rawKey];

        // 2) Fetch the formatted value
        const valObj = this.source.getCellValue(
            cellEntry.pivotRow.adapterItem,
            cellEntry.pivotColumn.adapterItem
        );
        const value = valObj?.formattedValue ?? '';

        // 3) Group into rowMap[rowIdx] = [ { colIdx, value }, … ]
        if (!rowMap[rowIdx]) rowMap[rowIdx] = [];
        rowMap[rowIdx].push({ colIdx, value });
    });

    // 4) Sort rows and columns, then produce final 2D array
    return Object.keys(rowMap)
      .map(Number)
      .sort((a, b) => a - b)                 // sort row indices
      .map(rIdx => {
        return rowMap[rIdx]
          .sort((a, b) => a.colIdx - b.colIdx) // sort columns
          .map(cell => cell.value);            // extract just the value
      });
},
