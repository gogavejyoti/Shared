		public async Task<string> SummarizeAnswerWithChatGPT(string userQuestion, List<QuestionAnswerModel> matches)
		{
			var systemPrompt = "You are a helpful assistant. Use the below Q&A context to answer the user's question clearly and concisely.";
			var context = string.Join("\n\n", matches.Select(m => $"Q: {m.QuestionText}\nA: {m.AnswerText}"));

			var chatRequest = new
			{
				messages = new[]
				{
				new { role = "system", content = "You are a helpful assistant." },
				new { role = "user",content = "Explain cloud computing in **Markdown** format." },
				new { role = "system", content = systemPrompt },
				new { role = "user", content = $"Context:\n{context}\n\nUser Question:\n{userQuestion}" }
			},
				temperature = 0.2,
				max_tokens = 300
			};

			using var http = new HttpClient();
			http.DefaultRequestHeaders.Add("api-key", azureApiKey);

			var url = $"{azureEndpoint}openai/deployments/{chatDeployment}/chat/completions?api-version={chatApiVersion}";
			var content = new StringContent(JsonConvert.SerializeObject(chatRequest), Encoding.UTF8, "application/json");

			var response = await http.PostAsync(url, content);
			var responseJson = await response.Content.ReadAsStringAsync();

			if (!response.IsSuccessStatusCode)
				throw new Exception("ChatGPT error: " + responseJson);

			dynamic result = JsonConvert.DeserializeObject(responseJson);
			return result.choices[0].message.content.ToString();
		}
