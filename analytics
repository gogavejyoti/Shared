public class AnomalyDetectionService
{
    private readonly AppDbContext _context;

    public AnomalyDetectionService(AppDbContext context)
    {
        _context = context;
    }

    public async Task<string> GetDetailedAnomalyAnalysis()
    {
        var summary = new StringBuilder();
        summary.AppendLine("<div class='container'>");
        summary.AppendLine("<h2 class='text-center text-primary'>üìå Workforce & Staffing Anomaly Report üìå</h2>");
        summary.AppendLine("<hr>");

        bool hasAnomalies = false;

        // 1. Staffing Issues
        var lowStaffing = await _context.StaffingMetrics
            .Where(s => s.StaffingPercentage < 80)
            .Select(s => new { s.Account, s.LOB, s.StaffingPercentage })
            .ToListAsync();

        if (lowStaffing.Any())
        {
            hasAnomalies = true;
            summary.AppendLine("<h4 class='text-danger'>‚ö†Ô∏è Staffing Issues Detected:</h4><ul class='list-group'>");
            foreach (var s in lowStaffing)
            {
                summary.AppendLine($"<li class='list-group-item'> <strong>{s.Account} - {s.LOB}</strong> has low staffing at <span class='badge bg-danger'>{s.StaffingPercentage}%</span>.</li>");
            }
            summary.AppendLine("</ul><br>");
        }

        // 2. High Attrition
        var highAttrition = await _context.StaffingMetrics
            .Where(s => s.AttritionPercentage > 15)
            .Select(s => new { s.Account, s.LOB, s.AttritionPercentage })
            .ToListAsync();

        if (highAttrition.Any())
        {
            hasAnomalies = true;
            summary.AppendLine("<h4 class='text-danger'>‚ö†Ô∏è High Attrition Detected:</h4><ul class='list-group'>");
            foreach (var s in highAttrition)
            {
                summary.AppendLine($"<li class='list-group-item'><strong>{s.Account} - {s.LOB}</strong> has an attrition rate of <span class='badge bg-warning'>{s.AttritionPercentage}%</span>.</li>");
            }
            summary.AppendLine("</ul><br>");
        }

        // 3. High Shrinkage
        var highShrinkage = await _context.StaffingMetrics
            .Where(s => s.ShrinkagePercentage > 20)
            .Select(s => new { s.Account, s.LOB, s.ShrinkagePercentage })
            .ToListAsync();

        if (highShrinkage.Any())
        {
            hasAnomalies = true;
            summary.AppendLine("<h4 class='text-danger'>‚ö†Ô∏è High Shrinkage Detected:</h4><ul class='list-group'>");
            foreach (var s in highShrinkage)
            {
                summary.AppendLine($"<li class='list-group-item'><strong>{s.Account} - {s.LOB}</strong> has shrinkage at <span class='badge bg-warning'>{s.ShrinkagePercentage}%</span>.</li>");
            }
            summary.AppendLine("</ul><br>");
        }

        // 4. Forecast Accuracy Issues
        var inaccurateForecast = await _context.StaffingMetrics
            .Where(s => Math.Abs(s.ForecastVolume - s.HandledVolume) > (s.ForecastVolume * 0.15))
            .Select(s => new { s.Account, s.LOB, s.ForecastVolume, s.HandledVolume })
            .ToListAsync();

        if (inaccurateForecast.Any())
        {
            hasAnomalies = true;
            summary.AppendLine("<h4 class='text-danger'>‚ö†Ô∏è Forecast Accuracy Issues:</h4><ul class='list-group'>");
            foreach (var s in inaccurateForecast)
            {
                summary.AppendLine($"<li class='list-group-item'><strong>{s.Account} - {s.LOB}</strong>: Forecasted <span class='badge bg-primary'>{s.ForecastVolume}</span>, but handled <span class='badge bg-secondary'>{s.HandledVolume}</span>.</li>");
            }
            summary.AppendLine("</ul><br>");
        }

        // 5. No Anomalies
        if (!hasAnomalies)
        {
            summary.AppendLine("<h4 class='text-success text-center'>‚úÖ No major anomalies detected. Workforce metrics are within normal thresholds.</h4>");
        }

        summary.AppendLine("</div>");
        return summary.ToString();
    }
}

[ApiController]
[Route("api/anomaly")]
public class AnomalyController : ControllerBase
{
    private readonly AnomalyDetectionService _anomalyService;

    public AnomalyController(AnomalyDetectionService anomalyService)
    {
        _anomalyService = anomalyService;
    }

    [HttpGet("detailed-analysis")]
    public async Task<IActionResult> GetDetailedAnalysis()
    {
        string analysisSummary = await _anomalyService.GetDetailedAnomalyAnalysis();
        return Ok(new { Summary = analysisSummary });
    }
}


 summary.AppendLine($@"
                <li class='list-group-item'>
                    <strong>{s.Account} - {s.LOB}</strong>
                    <div class='progress' style='height: 25px;'>
                        <div class='progress-bar {progressColor}' role='progressbar' 
                             style='width: {s.StaffingPercentage}%; font-size:14px;' 
                             aria-valuenow='{s.StaffingPercentage}' aria-valuemin='0' aria-valuemax='100'>
                             {s.StaffingPercentage}%
                        </div>
                    </div>
                </li>
            ");


  if (staffingIssues.Any())
    {
        hasAnomalies = true;
        summary.AppendLine("<h4 class='text-danger'>‚ö†Ô∏è Staffing Overview:</h4>");
        summary.AppendLine("<table class='table table-bordered'>");
        summary.AppendLine("<thead class='table-dark'><tr><th>Account</th><th>LOB</th><th>Staffing %</th></tr></thead>");
        summary.AppendLine("<tbody>");

        foreach (var s in staffingIssues)
        {
            string progressColor = s.StaffingPercentage switch
            {
                < 50 => "bg-danger", // üî¥ Critical
                < 80 => "bg-warning", // üü† Needs Attention
                _ => "bg-success" // üü¢ Healthy
            };

            summary.AppendLine($@"
                <tr>
                    <td>{s.Account}</td>
                    <td>{s.LOB}</td>
                    <td>
                        <div class='progress' style='height: 25px; width: 100%;'>
                            <div class='progress-bar {progressColor}' role='progressbar' 
                                 style='width: {s.StaffingPercentage}%; font-size:14px;' 
                                 aria-valuenow='{s.StaffingPercentage}' aria-valuemin='0' aria-valuemax='100'>
                                 {s.StaffingPercentage}%
                            </div>
                        </div>
                    </td>
                </tr>
            ");
        }

        summary.AppendLine("</tbody></table><br>");
    }
