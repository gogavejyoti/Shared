(function ($) {
    $.fn.generateDynamicChart = function (options) {
        let settings = $.extend({
            botTextContainer: null,
            userInput: '',
            data: [],
            transposeTable: false,
            tableHeight: '250px'
        }, options);

        if (!settings.data || settings.data.length === 0) {
            console.error("No data provided for the chart.");
            return this;
        }

        // Remove unnecessary filter fields
        settings.data.forEach(item => {
            delete item.DateWeekFilter;
            delete item.DateMonthFilter;
            delete item.DateYearFilter;
        });

        let sampleItem = settings.data[0];
        let nonNumericFields = [];
        let numericFields = [];
        let percentageFields = [];
        let dateFields = [];

        // Identify column types
        Object.keys(sampleItem).forEach(key => {
            let value = sampleItem[key];
            if (/^\d{1,2}-[A-Za-z]{3}-\d{2}$/.test(value) ||
                /^[A-Za-z]{3}-\d{2}$/.test(value) ||
                /^\d{4}-\d{2}$/.test(value)) {
                dateFields.push(key);
            }
            else if (isNaN(value) || value === '') {
                nonNumericFields.push(key);
            }
            else {
                numericFields.push(key);
                if (key.toLowerCase().includes("percentage") || key.includes("%")) {
                    percentageFields.push(key);
                }
            }
        });

        var transformedData = settings.data;

        // Create UI elements
        let chatBox = $("#chatBox");
        let mainContainer = $("<div>").addClass("chat-result card p-3 mb-3 shadow-sm").css({
            width: "100%",
            border: "1px solid #ddd",
            borderRadius: "10px",
            padding: "15px"
        });

        // Toggle button container
        let buttonContainer = $("<div>").css({
            marginBottom: "10px",
            textAlign: "right"
        });

        let toggleButton = $("<button><i class='fa fa-table'></i>").text("Transpose Table")
            .addClass("btn btn-sm")
            .css({
                padding: "5px 10px",
                fontSize: "14px",
                background: '#AA336A',
                color:"#fff"
            });

        let tableContainer = $("<div>").addClass("table-responsive").css({
            width: "100%",
            maxHeight: settings.tableHeight,
            overflowY: "auto",
            marginBottom: "15px",
            padding: "10px",
            border: "1px solid #ccc",
            borderRadius: "5px",
            backgroundColor: "#f8f9fa",
            position: "relative"
        });

        let table = $("<table>").addClass("table table-bordered table-striped text-center").css({
            width: "100%",
            fontSize: "14px"
        });

        // Function to render table
        function renderTable(isTransposed) {
            table.empty(); // Clear existing table content
            let thead = $("<thead>").css({
                position: "sticky",
                top: 0,
                backgroundColor: "#fff",
                zIndex: 1
            });
            let tbody = $("<tbody></tbody>");

            if (isTransposed) {
                // Transposed table
                let headers = Object.keys(transformedData[0]);
                let headerRow = $("<tr>");
                headerRow.append($("<th>").text("").addClass("bg-primary text-white"));
                transformedData.forEach((_, index) => {
                    headerRow.append($("<th>").text(`Column  ${index + 1}`).addClass("bg-primary text-white"));
                });
                thead.append(headerRow);

                headers.forEach(header => {
                    let tr = $("<tr>");
                    tr.append($("<td>").text(header).addClass("font-weight-bold"));
                    transformedData.forEach(row => {
                        let value = row[header];
                        if (!isNaN(value) && percentageFields.includes(header)) {
                            value = (parseFloat(value) || 0).toFixed(1) + "%";
                        } else if (!isNaN(value)) {
                            value = (parseFloat(value) || 0).toFixed(0);
                        }
                        tr.append($("<td>").text(value));
                    });
                    tbody.append(tr);
                });
            } else {
                // Normal table
                let headerRow = $("<tr>");
                Object.keys(settings.data[0]).forEach(key => {
                    headerRow.append($("<th>").text(key).addClass("bg-primary text-white"));
                });
                thead.append(headerRow);
                // Table Body
                settings.data.forEach(row => {
                    let tr = $("<tr></tr>");
                    Object.keys(row).forEach(key => {
                        let value = row[key];
                        if (percentageFields.includes(key)) {
                            value = (parseFloat(value) || 0).toFixed(1) + "%"; // Round to 1 decimal
                        } else if (!isNaN(value)) {
                            value = Math.round(value); // Round to 0 decimal
                        }
                        tr.append($("<td>").text(value));
                    });
                    tbody.append(tr);
                });
            }

            table.append(thead).append(tbody);
        }

        // Initial table render
        renderTable(settings.transposeTable);

        // Toggle button click handler
        let isTransposed = settings.transposeTable;
        toggleButton.on("click", function () {
            isTransposed = !isTransposed;
            renderTable(isTransposed);
            $(this).text(isTransposed ? "Normal View" : "Transpose Table");
        });

        // Assemble UI
        buttonContainer.append(toggleButton);
        tableContainer.append(table);
        mainContainer.append(buttonContainer).append(tableContainer);

        // Generate Chart with D3.js
        if (settings.userInput.toLowerCase().includes("show chart") || settings.userInput.toLowerCase().includes("with chart")) {
            let chartContainer = $("<div>").attr("id", "d3-chart-container").css({
                width: "100%",
                height: "350px",
                border: "1px solid #ccc",
                borderRadius: "5px",
                backgroundColor: "#fff",
                padding: "10px"
            });

            $('.bot-message:last').remove();
            mainContainer.append(chartContainer);
            chatBox.append(mainContainer);

            function buildChart(data, container) {
                // Clear previous chart if any
                d3.select(container[0]).selectAll("*").remove();
                
                let sampleItem = data[0];
                let nonNumericFields = [];
                let numericFields = [];
                Object.keys(sampleItem).forEach(key => {
                    if (isNaN(sampleItem[key]) || sampleItem[key] === '') {
                        nonNumericFields.push(key);
                    } else {
                        numericFields.push(key);
                    }
                });
                
                let categoryField = nonNumericFields.length > 0 ? nonNumericFields[nonNumericFields.length - 1] : Object.keys(sampleItem)[0];
                
                // Determine chart type
                let chartType = numericFields.length > 1 ? "bar" : "line";
                if (numericFields.length === 1 && data.length <= 5) {
                    chartType = "pie";
                }
                
                // Set up dimensions
                const margin = {top: 20, right: 30, bottom: 40, left: 40};
                const width = container.width() - margin.left - margin.right;
                const height = 300 - margin.top - margin.bottom;
                
                // Create SVG
                const svg = d3.select(container[0])
                    .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", `translate(${margin.left},${margin.top})`);
                
                // Prepare data
                const categories = data.map(d => d[categoryField]);
                const series = numericFields.map(key => ({
                    name: key,
                    values: data.map(d => +d[key])
                }));
                
                // Set up scales
                const x = d3.scaleBand()
                    .domain(categories)
                    .range([0, width])
                    .padding(0.1);
                
                const y = d3.scaleLinear()
                    .domain([0, d3.max(series, s => d3.max(s.values)) * 1.1])
                    .range([height, 0]);
                
                // Add axes
                svg.append("g")
                    .attr("transform", `translate(0,${height})`)
                    .call(d3.axisBottom(x))
                    .selectAll("text")
                    .attr("transform", "rotate(-45)")
                    .style("text-anchor", "end");
                
                svg.append("g")
                    .call(d3.axisLeft(y));
                
                if (chartType === "bar") {
                    // Create color scale
                    const color = d3.scaleOrdinal()
                        .domain(numericFields)
                        .range(d3.schemeCategory10);
                    
                    // Add bars
                    series.forEach((s, i) => {
                        svg.selectAll(`.bar-${i}`)
                            .data(s.values)
                            .enter()
                            .append("rect")
                            .attr("class", `bar-${i}`)
                            .attr("x", (d, j) => x(categories[j]) + (i * (x.bandwidth() / series.length)))
                            .attr("y", d => y(d))
                            .attr("width", x.bandwidth() / series.length)
                            .attr("height", d => height - y(d))
                            .attr("fill", color(s.name));
                    });
                    
                    // Add legend
                    const legend = svg.append("g")
                        .attr("transform", `translate(${width - 100}, 0)`);
                    
                    numericFields.forEach((field, i) => {
                        legend.append("rect")
                            .attr("x", 0)
                            .attr("y", i * 20)
                            .attr("width", 15)
                            .attr("height", 15)
                            .attr("fill", color(field));
                        
                        legend.append("text")
                            .attr("x", 20)
                            .attr("y", i * 20 + 12)
                            .text(field)
                            .style("font-size", "12px");
                    });
                } else if (chartType === "line") {
                    // Create line generator
                    const line = d3.line()
                        .x((d, i) => x(categories[i]) + x.bandwidth() / 2)
                        .y(d => y(d))
                        .curve(d3.curveMonotoneX);
                    
                    // Add line
                    svg.append("path")
                        .datum(series[0].values)
                        .attr("fill", "none")
                        .attr("stroke", "steelblue")
                        .attr("stroke-width", 2)
                        .attr("d", line);
                    
                    // Add dots
                    svg.selectAll(".dot")
                        .data(series[0].values)
                        .enter()
                        .append("circle")
                        .attr("class", "dot")
                        .attr("cx", (d, i) => x(categories[i]) + x.bandwidth() / 2)
                        .attr("cy", d => y(d))
                        .attr("r", 5)
                        .attr("fill", "steelblue");
                } else if (chartType === "pie") {
                    // Pie chart implementation
                    const radius = Math.min(width, height) / 2;
                    
                    svg.attr("transform", `translate(${width / 2 + margin.left},${height / 2 + margin.top})`);
                    
                    const pie = d3.pie()
                        .value(d => d);
                    
                    const arc = d3.arc()
                        .innerRadius(0)
                        .outerRadius(radius);
                    
                    const color = d3.scaleOrdinal()
                        .domain(categories)
                        .range(d3.schemeCategory10);
                    
                    const arcs = svg.selectAll("arc")
                        .data(pie(series[0].values))
                        .enter()
                        .append("g")
                        .attr("class", "arc");
                    
                    arcs.append("path")
                        .attr("d", arc)
                        .attr("fill", (d, i) => color(categories[i]));
                    
                    // Add labels
                    arcs.append("text")
                        .attr("transform", d => `translate(${arc.centroid(d)})`)
                        .attr("text-anchor", "middle")
                        .text(d => `${categories[d.index]}: ${d.data.toFixed(1)}%`)
                        .style("font-size", "12px");
                }
            }
            
            buildChart(settings.data, chartContainer);
        } else {
            $('.bot-message:last').remove();
            chatBox.append(mainContainer);
        }

        return this;
    };
}(jQuery));
