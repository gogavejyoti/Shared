using System;
using System.IO;
using Renci.SshNet;
using Renci.SshNet.Sftp;

class Program
{
    static void Main()
    {
        string host = "sftp.example.com";
        int port = 22;
        string username = "your_username";
        string password = "your_password";  // Avoid storing passwords in code

        string remoteFolderPath = "/remote/folder"; // Change this to your remote directory
        string localFolderPath = @"C:\LocalFolder"; // Change this to your local directory

        try
        {
            using (var sftp = new SftpClient(host, port, username, password))
            {
                sftp.Connect();
                Console.WriteLine("Connected to SFTP server");

                DownloadDirectory(sftp, remoteFolderPath, localFolderPath);

                sftp.Disconnect();
                Console.WriteLine("Disconnected from SFTP server");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    static void DownloadDirectory(SftpClient sftp, string remotePath, string localPath)
    {
        // Ensure the local directory exists
        if (!Directory.Exists(localPath))
        {
            Directory.CreateDirectory(localPath);
        }

        // List all files and directories in the remote path
        var files = sftp.ListDirectory(remotePath);

        foreach (var file in files)
        {
            if (file.Name == "." || file.Name == "..") continue; // Ignore special directories

            string localFilePath = Path.Combine(localPath, file.Name);
            string remoteFilePath = file.FullName;

            if (file.IsDirectory)
            {
                // Recursively download subdirectories
                DownloadDirectory(sftp, remoteFilePath, localFilePath);
            }
            else
            {
                // Download file
                using (var fileStream = File.Create(localFilePath))
                {
                    sftp.DownloadFile(remoteFilePath, fileStream);
                    Console.WriteLine($"Downloaded: {remoteFilePath} -> {localFilePath}");
                }
            }
        }
   
