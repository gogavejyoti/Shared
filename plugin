(function ($) { 
    $.fn.generateDynamicChart = function (options) {
        let settings = $.extend({
            botTextContainer: null,
            userInput: '',
            data: []
        }, options);

        if (!settings.data || settings.data.length === 0) {
            console.error("No data provided for the chart.");
            return this;
        }

        // Remove unnecessary filter fields
        settings.data.forEach(item => {
            delete item.DateWeekFilter;
            delete item.DateMonthFilter;
            delete item.DateYearFilter;
        });

        let sampleItem = settings.data[0];
        let nonNumericFields = [];
        let numericFields = [];
        let percentageFields = [];
        let dateFields = [];

        // Identify column types
        Object.keys(sampleItem).forEach(key => {
            let value = sampleItem[key];

            // Check if it's a date-like column
            if (/^\d{1,2}-[A-Za-z]{3}-\d{2}$/.test(value) || // dd-MMM-yy
                /^[A-Za-z]{3}-\d{2}$/.test(value) ||         // MMM-yy
                /^\d{4}-\d{2}$/.test(value)) {               // yyyy-MM
                dateFields.push(key);
            }
            else if (isNaN(value) || value === '') {
                nonNumericFields.push(key);
            }
            else {
                numericFields.push(key);
                if (key.toLowerCase().includes("percentage") || key.includes("%")) {
                    percentageFields.push(key);
                }
            }
        });

        var transformedData = settings.data;
        
        // Create UI elements
        let chatBox = $("#chatBox");
        let mainContainer = $("<div>").addClass("chat-result card p-3 mb-3 shadow-sm").css({
            width: "100%",
            border: "1px solid #ddd",
            borderRadius: "10px",
            padding: "15px"
        });

        let tableContainer = $("<div>").addClass("table-responsive").css({
            width: "100%",
            maxHeight: "250px",
            overflowY: "auto",
            marginBottom: "15px",
            padding: "10px",
            border: "1px solid #ccc",
            borderRadius: "5px",
            backgroundColor: "#f8f9fa"
        });

        let table = $("<table>").addClass("table table-bordered table-striped text-center").css({
            width: "100%",
            fontSize: "14px"
        });

        let thead = $("<thead>").append("<tr></tr>");
        let tbody = $("<tbody></tbody>");

        // Create table headers
        Object.keys(transformedData[0]).forEach(key => {
            thead.find("tr").append($("<th>").text(key).addClass("bg-primary text-white"));
        });

        // Create table rows
        transformedData.forEach(row => {
            let tr = $("<tr></tr>");
            Object.keys(row).forEach(key => {
                let value = row[key];
                if (key === "Metric") {
                    tr.append($("<td>").text(value));
                } else {
                    if (!isNaN(value) && percentageFields.includes(row["Metric"])) {
                        value = (parseFloat(value) || 0).toFixed(1) + "%"; // Format as percentage with 1 decimal place
                    } else if (!isNaN(value)) {
                        value = (parseFloat(value) || 0).toFixed(0); // Format as whole number
                    }
                    tr.append($("<td>").text(value));
                }
            });
            tbody.append(tr);
        });

        table.append(thead).append(tbody);
        tableContainer.append(table);
        mainContainer.append(tableContainer);

        // Create Toggle and Reset Buttons
        let buttonContainer = $("<div>").addClass("d-flex justify-content-end mb-2");

        let toggleButton = $("<button>").text("Toggle Transpose")
            .addClass("btn btn-sm btn-secondary me-2")
            .click(function () {
                transposeTable();
            });

        let resetButton = $("<button>").text("Reset")
            .addClass("btn btn-sm btn-danger")
            .click(function () {
                resetTable();
            });

        buttonContainer.append(toggleButton, resetButton);
        mainContainer.prepend(buttonContainer);

        // Append buttons above table
        tableContainer.prepend(buttonContainer);

        // Store original table for reset
        let originalTable = table.clone();

        function transposeTable() {
            let transposedTable = $("<table>").addClass("table table-bordered table-striped text-center");
            let transposedTbody = $("<tbody>");
            let headers = [];
            let rows = [];

            // Extract headers and rows
            table.find("thead tr th").each(function () {
                headers.push($(this).text());
            });

            table.find("tbody tr").each(function () {
                let rowData = [];
                $(this).find("td").each(function () {
                    rowData.push($(this).text());
                });
                rows.push(rowData);
            });

            // Transpose data
            let transposedThead = $("<thead>").append("<tr></tr>");
            for (let i = 0; i < headers.length; i++) {
                transposedThead.find("tr").append($("<th>").text(`Column ${i + 1}`));
            }

            for (let j = 0; j < rows[0].length; j++) {
                let tr = $("<tr>");
                tr.append($("<td>").text(headers[j])); // First column as header
                for (let i = 0; i < rows.length; i++) {
                    tr.append($("<td>").text(rows[i][j]));
                }
                transposedTbody.append(tr);
            }

            transposedTable.append(transposedThead).append(transposedTbody);
            table.replaceWith(transposedTable);
            table = transposedTable;
        }

        function resetTable() {
            table.replaceWith(originalTable);
            table = originalTable;
        }

        // Append the final UI elements
        $('.bot-message:last').remove();
        chatBox.append(mainContainer);

        return this;
    };
}(jQuery));
