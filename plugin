class SmartApexChart {
  constructor(containerId, data) {
    this.containerId = containerId;
    this.data = data;
    this.charts = [];
    this.renderCharts();
  }

  // Determine the best chart type based on the data structure
  determineChartType(data) {
    if (typeof data === "object" && !Array.isArray(data)) {
      const keys = Object.keys(data);

      // Check if data is time-based (e.g., months, weeks)
      if (keys.every((key) => typeof data[key] === "number")) {
        return "line"; // Time-based data (e.g., { Jan: 5, Feb: 7 })
      }

      // Check if data is comparison-based (e.g., accounts, categories)
      if (keys.every((key) => typeof data[key] === "object")) {
        return "bar"; // Grouped or stacked bar chart
      }
    } else if (Array.isArray(data)) {
      // Check if data is an array of numbers
      if (data.every((item) => typeof item === "number")) {
        return "line"; // Single series of numbers
      }

      // Check if data is an array of objects with x and y properties
      if (data.every((item) => typeof item === "object" && "x" in item && "y" in item)) {
        return "line"; // X-Y data points
      }

      // Check if data is an array of objects with name and value properties
      if (data.every((item) => typeof item === "object" && "name" in item && "value" in item)) {
        return "pie"; // Name-Value pairs (e.g., for pie charts)
      }
    }

    return "line"; // Default to line chart
  }

  // Format the data for ApexCharts
  formatData(data, chartType) {
    switch (chartType) {
      case "line":
        if (typeof data === "object" && !Array.isArray(data)) {
          return {
            series: [
              {
                name: "Series 1",
                data: Object.values(data),
              },
            ],
            xaxis: {
              categories: Object.keys(data),
            },
          };
        } else if (Array.isArray(data) && data.every((item) => typeof item === "number")) {
          return {
            series: [
              {
                name: "Series 1",
                data: data,
              },
            ],
          };
        } else if (Array.isArray(data) && data.every((item) => typeof item === "object" && "x" in item && "y" in item)) {
          return {
            series: [
              {
                name: "Series 1",
                data: data,
              },
            ],
          };
        }
        break;

      case "bar":
        if (typeof data === "object" && !Array.isArray(data)) {
          return {
            series: Object.keys(data).map((key) => ({
              name: key,
              data: Object.values(data[key]),
            })),
            xaxis: {
              categories: Object.keys(data[Object.keys(data)[0]]),
            },
          };
        }
        break;

      case "pie":
        if (Array.isArray(data) && data.every((item) => typeof item === "object" && "name" in item && "value" in item)) {
          return {
            series: data.map((item) => item.value),
            labels: data.map((item) => item.name),
          };
        } else if (typeof data === "object" && !Array.isArray(data)) {
          return {
            series: Object.values(data),
            labels: Object.keys(data),
          };
        }
        break;

      default:
        throw new Error("Unsupported data format");
    }
  }

  // Render a single chart
  renderChart(chartData, chartType, index) {
    const chartContainer = document.createElement("div");
    chartContainer.id = `${this.containerId}-chart-${index}`;
    document.querySelector(`#${this.containerId}`).appendChild(chartContainer);

    const options = {
      chart: {
        type: chartType,
        height: 350,
      },
      series: chartData.series,
      xaxis: chartData.xaxis,
      labels: chartData.labels,
    };

    const chart = new ApexCharts(chartContainer, options);
    chart.render();
    this.charts.push(chart);
  }

  // Render all charts based on the data
  renderCharts() {
    if (typeof this.data === "object" && !Array.isArray(this.data)) {
      Object.keys(this.data).forEach((key, index) => {
        const dataset = this.data[key];
        const chartType = this.determineChartType(dataset);
        const formattedData = this.formatData(dataset, chartType);
        this.renderChart(formattedData, chartType, index);
      });
    } else {
      const chartType = this.determineChartType(this.data);
      const formattedData = this.formatData(this.data, chartType);
      this.renderChart(formattedData, chartType, 0);
    }
  }
}

// Usage Example:
// const data = {
//   monthWiseShrinkage: { Jan: 5, Feb: 7, Mar: 6, Apr: 8 },
//   accountWiseAttrition: { "Account A": 10, "Account B": 20, "Account C": 30 },
//   weekWiseStaffing: { "Week 1": 50, "Week 2": 60, "Week 3": 70 },
// };
// const chart = new SmartApexChart("chart-container", data);
