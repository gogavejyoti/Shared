(function ($) {
    $.fn.generateDynamicChart = function (options) {
        let settings = $.extend({
            botTextContainer: null,
            userInput: '',
            data: []
        }, options);

        if (!settings.data || settings.data.length === 0) {
            console.error("No data provided for the chart.");
            return this;
        }

        settings.data.forEach(item => {
            delete item.DateWeekFilter;
            delete item.DateMonthFilter;
            delete item.DateYearFilter;
        });

        // ðŸ”¹ Smartly transpose data if needed
        let transformedData = smartTransposeData(settings.data);

        let sampleItem = transformedData[0];
        let nonNumericFields = [];
        let numericFields = [];
        let percentageFields = [];

        Object.keys(sampleItem).forEach(key => {
            if (isNaN(sampleItem[key]) || sampleItem[key] === '') {
                nonNumericFields.push(key);
            } else {
                numericFields.push(key);
                if (key.toLowerCase().includes("percentage") || key.includes("%")) {
                    percentageFields.push(key);
                }
            }
        });

        let categoryField = nonNumericFields.length > 0 ? nonNumericFields[nonNumericFields.length - 1] : Object.keys(sampleItem)[0];

        let categories = transformedData.map(item => item[categoryField]);
        let seriesData = numericFields.map(key => ({
            name: key,
            data: transformedData.map(item => parseFloat(item[key]))
        }));

        let chartType = numericFields.length > 1 ? "bar" : "line";
        if (numericFields.length === 1 && transformedData.length <= 5) {
            chartType = "pie";
        }

        let chatBox = $("#chatBox");

        let mainContainer = $("<div>").addClass("chat-result card p-3 mb-3 shadow-sm").css({
            width: "100%",
            border: "1px solid #ddd",
            borderRadius: "10px",
            padding: "15px"
        });

        let tableContainer = $("<div>").addClass("table-responsive").css({
            width: "100%",
            maxHeight: "250px",
            overflowY: "auto",
            marginBottom: "15px",
            padding: "10px",
            border: "1px solid #ccc",
            borderRadius: "5px",
            backgroundColor: "#f8f9fa"
        });

        let table = $("<table>").addClass("table table-bordered table-striped text-center").css({
            width: "100%",
            fontSize: "14px"
        });

        let thead = $("<thead>").append("<tr></tr>");
        let tbody = $("<tbody></tbody>");

        Object.keys(sampleItem).forEach(key => {
            thead.find("tr").append($("<th>").text(key).addClass("bg-primary text-white"));
        });

        transformedData.forEach(row => {
            let tr = $("<tr></tr>");
            Object.keys(row).forEach(key => {
                let value = row[key];
                if (percentageFields.includes(key)) {
                    value = (parseFloat(value) || 0).toFixed(1) + "%";
                } else if (!isNaN(value)) {
                    value = Math.round(value);
                }
                tr.append($("<td>").text(value));
            });
            tbody.append(tr);
        });

        table.append(thead).append(tbody);
        tableContainer.append(table);
        mainContainer.append(tableContainer);

        if (settings.userInput.toLowerCase().includes("show chart") || settings.userInput.toLowerCase().includes("with chart") || settings.userInput.toLowerCase().includes("display chart")) {
            let chartContainer = $("<div>").css({
                width: "100%",
                height: "350px",
                border: "1px solid #ccc",
                borderRadius: "5px",
                backgroundColor: "#fff",
                padding: "10px"
            });
            $('.bot-message:last').remove();
            mainContainer.append(chartContainer);
            chatBox.append(mainContainer);

            let chartOptions = {
                chart: { type: chartType, height: 320 },
                series: seriesData,
                xaxis: { categories: categories, labels: { rotate: -45, style: { fontSize: "12px" } } },
                yaxis: {
                    labels: {
                        formatter: function (value) {
                            return percentageFields.includes(chartType) ? value.toFixed(1) + "%" : Math.round(value);
                        }
                    }
                },
                tooltip: {
                    y: {
                        formatter: function (value, { seriesIndex, dataPointIndex, w }) {
                            let fieldName = w.config.series[seriesIndex].name;
                            return percentageFields.includes(fieldName) ? `${value.toFixed(1)}%` : Math.round(value);
                        }
                    }
                },
                dataLabels: {
                    enabled: true,
                    formatter: function (value, { seriesIndex, dataPointIndex, w }) {
                        let fieldName = w.config.series[seriesIndex].name;
                        return percentageFields.includes(fieldName) ? `${value.toFixed(1)}%` : Math.round(value);
                    },
                    style: { fontSize: "12px" }
                }
            };

            let chart = new ApexCharts(chartContainer[0], chartOptions);
            chart.render();
        } else {
            $('.bot-message:last').remove();
            chatBox.append(mainContainer);
        }
        return this;
    };

    // ðŸ”¹ Smart Transposition with Date Detection
    function smartTransposeData(data) {
        if (!data || data.length === 0) return data;

        let sampleRow = data[0];
        let keys = Object.keys(sampleRow);

        let dateRegex = /^(?:\d{1,2}-[A-Za-z]{3}-\d{2}|\d{1,2}\/[A-Za-z]{3}\/\d{2}|[A-Za-z]{3}-\d{2})$/;
        let dateColumns = keys.filter(k => dateRegex.test(k));

        if (dateColumns.length === 0) return data; // No date-like columns â†’ No transposition

        let hasMultipleEntriesForSamePeriod = data.some((row, index) => {
            return data.findIndex(r => r[dateColumns[0]] === row[dateColumns[0]]) !== index;
        });

        if (hasMultipleEntriesForSamePeriod) return data; // Avoid transposing if multiple rows exist for the same period

        let metricColumns = keys.filter(k => !dateColumns.includes(k));
        let transposedData = [];

        metricColumns.forEach(metric => {
            let newRow = { Metric: metric };
            data.forEach(row => {
                dateColumns.forEach(dateCol => {
                    newRow[dateCol] = row[dateCol];
                });
            });
            transposedData.push(newRow);
        });

        return transposedData;
    }
}(jQuery));
