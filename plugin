using Renci.SshNet;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace Sutherland.DataPicker.SFTP
{
    public class SFTPConnector
    {
        public bool CreateSession()
        {

            string host = "phil.na4.livevox.com";
            int port = 22;
            string username = "Sutherland";
            string password = "Sgs3rv!ce";  // Avoid storing passwords in code
            string remoteFolderPath = "/ftpOut/MF Interval Report";

            string localFolderPath = @"C:\LocalFolder";

            try
            {
                using (var sftp = new SftpClient(host, port, username, password))
                {
                    sftp.Connect();
                    Console.WriteLine("Connected to SFTP server");

                    DownloadDirectory(sftp, remoteFolderPath, localFolderPath);

                    sftp.Disconnect();
                    Console.WriteLine("Disconnected from SFTP server");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }

            return true;
        }


        static void DownloadDirectory(SftpClient sftp, string remotePath, string localPath)
        {
            // Ensure the local directory exists
            if (!Directory.Exists(localPath))
            {
                Directory.CreateDirectory(localPath);
            }

            // List all files and directories in the remote path
            var files = sftp.ListDirectory(remotePath)
                            .Where(f=>!f.IsDirectory && f.Name!="." && f.Name!="..")
                            .OrderByDescending(f=>f.LastWriteTime)
                            .Take(3)
                            .ToList();

            foreach (var file in files)
            {
                if (file.Name == "." || file.Name == "..") continue; // Ignore special directories

                string localFilePath = Path.Combine(localPath, file.Name);
                string remoteFilePath = file.FullName;

                if (file.IsDirectory)
                {
                    // Recursively download subdirectories
                    DownloadDirectory(sftp, remoteFilePath, localFilePath);
                }
                else
                {
                    // Download file
                    using (var fileStream = File.Create(localFilePath))
                    {
                        sftp.DownloadFile(remoteFilePath, fileStream);
                        Console.WriteLine($"Downloaded: {remoteFilePath} -> {localFilePath}");
                    }
                }
            }
        }
    }
}
