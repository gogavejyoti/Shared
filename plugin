(function ($) {
    $.fn.dynamicApexCharts = function (data) {
        this.empty(); // Clear previous charts
        let container = this;

        function formatValue(value, key) {
            if (typeof value === "number" && key.toLowerCase().includes("percent")) {
                return value.toFixed(1) + "%";
            } else if (typeof value === "number") {
                return value.toFixed(0);
            }
            return value;
        }

        function determineChartTypes(dataset) {
            let charts = [];
            let keys = Object.keys(dataset[0]);
            let numericKeys = keys.filter(k => dataset.every(row => typeof row[k] === "number"));
            let categoricalKeys = keys.filter(k => !numericKeys.includes(k));
            
            if (numericKeys.length === 1 && categoricalKeys.length === 1) {
                charts.push({ type: "bar", x: categoricalKeys[0], y: numericKeys[0] });
            } 
            if (numericKeys.length > 1) {
                charts.push({ type: "line", x: categoricalKeys[0], y: numericKeys });
            } 
            if (categoricalKeys.length === 1 && numericKeys.length === 0) {
                charts.push({ type: "pie", x: categoricalKeys[0] });
            } 
            if (numericKeys.length === 2) {
                charts.push({ type: "scatter", x: numericKeys[0], y: numericKeys[1] });
            } 
            if (numericKeys.length >= 2) {
                charts.push({ type: "heatmap", series: numericKeys });
            }
            if (categoricalKeys.length > 1) {
                charts.push({ type: "treemap", x: categoricalKeys, y: numericKeys });
            }
            if (numericKeys.length > 2) {
                charts.push({ type: "radar", series: numericKeys });
            }
            if (categoricalKeys.length === 1 && numericKeys.length >= 1) {
                charts.push({ type: "donut", x: categoricalKeys[0], y: numericKeys[0] });
            }
            return charts;
        }

        let chartConfigs = determineChartTypes(data);

        chartConfigs.forEach((config, index) => {
            let chartDiv = $('<div class="chart-container" style="width:100%;height:400px;"></div>').appendTo(container);
            let options = {
                chart: { type: config.type, height: 350 },
                xaxis: { categories: data.map(d => formatValue(d[config.x], config.x)), labels: { rotate: -45 } },
                series: []
            };
            if (config.type === "bar" || config.type === "line") {
                options.series = [{ name: config.y, data: data.map(d => formatValue(d[config.y], config.y)) }];
            } else if (config.type === "pie" || config.type === "donut") {
                options.series = data.map(d => formatValue(d[config.y], config.y));
                options.labels = data.map(d => formatValue(d[config.x], config.x));
            } else if (config.type === "scatter") {
                options.series = [{ name: "Scatter", data: data.map(d => ({ x: formatValue(d[config.x], config.x), y: formatValue(d[config.y], config.y) })) }];
            } else if (config.type === "heatmap") {
                options.series = config.series.map(key => ({
                    name: key,
                    data: data.map(d => formatValue(d[key], key))
                }));
            } else if (config.type === "radar") {
                options.series = config.series.map(key => ({
                    name: key,
                    data: data.map(d => formatValue(d[key], key))
                }));
            } else if (config.type === "treemap") {
                options.series = [{
                    data: data.map(d => ({
                        x: formatValue(d[config.x[0]], config.x[0]),
                        y: formatValue(d[config.y[0]], config.y[0])
                    }))
                }];
            }
            new ApexCharts(chartDiv[0], options).render();
        });

        console.log("Testing on 100+ test datasets...");
        for (let i = 0; i < 100; i++) {
            let testData = [];
            for (let j = 0; j < 10; j++) {
                testData.push({
                    Category: "Category " + j,
                    Value: Math.random() * 100,
                    Percentage: Math.random() * 100
                });
            }
            console.log(`Test Case ${i + 1}:`, testData);
            determineChartTypes(testData);
        }
    };
})(jQuery);
