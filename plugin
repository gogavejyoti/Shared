(function ($) {
    $.fn.generateDynamicChart = function (options) {
        let settings = $.extend({
            botTextContainer: null,
            userInput: '',
            data: []
        }, options);

        if (!settings.data || settings.data.length === 0) {
            console.error("No data provided for the chart.");
            return this;
        }

        let headers = Object.keys(settings.data[0]);

        // Identify Time Column (Month, Week, etc.)
        let timeColumn = headers.find(col => settings.data.every(row => isDateLike(row[col])));

        // Identify Account Column
        let accountColumn = headers.find(col => col.toLowerCase().includes("account"));

        // Identify Data Columns (excluding time and account)
        let dataColumns = headers.filter(col => col !== timeColumn && col !== accountColumn);

        let transposedData = [];

        if (timeColumn && accountColumn) {
            // Handle multiple accounts per time period
            let uniqueAccounts = [...new Set(settings.data.map(row => row[accountColumn]))];

            uniqueAccounts.forEach(account => {
                let filteredData = settings.data.filter(row => row[accountColumn] === account);
                dataColumns.forEach(metric => {
                    let row = { "Account": account, "Metric": metric };
                    filteredData.forEach(entry => {
                        row[entry[timeColumn]] = formatValue(entry[metric], metric);
                    });
                    transposedData.push(row);
                });
            });
        } else {
            // Default transpose logic (when no account column exists)
            dataColumns.forEach(metric => {
                let row = { "Metric": metric };
                settings.data.forEach(entry => {
                    row[entry[timeColumn]] = formatValue(entry[metric], metric);
                });
                transposedData.push(row);
            });
        }

        // Generate Table
        let chatBox = $("#chatBox");
        let mainContainer = $("<div>").addClass("chat-result card p-3 mb-3 shadow-sm").css({
            width: "100%",
            border: "1px solid #ddd",
            borderRadius: "10px",
            padding: "15px"
        });

        let tableContainer = $("<div>").addClass("table-responsive").css({
            width: "100%",
            maxHeight: "250px",
            overflowY: "auto",
            marginBottom: "15px",
            padding: "10px",
            border: "1px solid #ccc",
            borderRadius: "5px",
            backgroundColor: "#f8f9fa"
        });

        let table = $("<table>").addClass("table table-bordered table-striped text-center").css({
            width: "100%",
            fontSize: "14px"
        });

        let thead = $("<thead>").append("<tr></tr>");
        let tbody = $("<tbody></tbody>");

        let transposedHeaders = timeColumn
            ? ["Account", "Metric", ...settings.data.map(item => item[timeColumn])]
            : headers;

        transposedHeaders.forEach(key => {
            thead.find("tr").append($("<th>").text(key).addClass("bg-primary text-white"));
        });

        transposedData.forEach(row => {
            let tr = $("<tr></tr>");
            transposedHeaders.forEach(key => {
                tr.append($("<td>").text(row[key] || ""));
            });
            tbody.append(tr);
        });

        table.append(thead).append(tbody);
        tableContainer.append(table);
        mainContainer.append(tableContainer);

        // Append to Chat
        $('.bot-message:last').remove();
        chatBox.append(mainContainer);

        return this;
    };

    function isDateLike(value) {
        if (typeof value !== 'string') return false;
        return /^(0?[1-9]|[12]\d|3[01])?[- ]?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[- ]?\d{2,4}$/.test(value);
    }

    function formatValue(value, name) {
        if (typeof value === "number") {
            return name.toLowerCase().includes("percentage") || name.includes("%")
                ? value.toFixed(1)
                : value.toFixed(0);
        }
        return value;
    }
}(jQuery));
