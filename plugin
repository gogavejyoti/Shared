(function ($) {
    $.fn.generateDynamicChart = function (options) {
        let settings = $.extend({
            botTextContainer: null,
            userInput: '',
            data: []
        }, options);

        if (!settings.data || settings.data.length === 0) {
            console.error("No data provided.");
            return this;
        }

        let headers = Object.keys(settings.data[0]);

        // Identify potential date columns
        let dateColumn = headers.find(col => settings.data.every(row => isDateLike(row[col])));

        // Identify potential category column (e.g., Account, Name)
        let categoryColumn = headers.find(col => col !== dateColumn && isCategoryColumn(col, settings.data));

        // Identify numeric columns
        let numericColumns = headers.filter(col => col !== dateColumn && col !== categoryColumn);

        // Determine transposition method
        let uniqueDates = dateColumn ? [...new Set(settings.data.map(row => row[dateColumn]))] : [];
        let transposeByDate = uniqueDates.length > 1;
        let transposeByCategory = uniqueDates.length === 1 && categoryColumn;

        let transposedData = [];

        if (transposeByDate) {
            // Transpose by Date
            transposedData = numericColumns.map(metric => {
                let row = { "Metric": metric };
                settings.data.forEach(entry => {
                    row[entry[dateColumn]] = formatValue(entry[metric], metric);
                });
                return row;
            });
        } else if (transposeByCategory) {
            // Transpose by Category
            transposedData = numericColumns.map(metric => {
                let row = { "Metric": metric };
                settings.data.forEach(entry => {
                    row[entry[categoryColumn]] = formatValue(entry[metric], metric);
                });
                return row;
            });
        } else {
            // Default case (keep original format)
            transposedData = settings.data.map(row => {
                let newRow = {};
                headers.forEach(col => newRow[col] = formatValue(row[col], col));
                return newRow;
            });
        }

        // Render UI
        renderTableAndChart(transposedData, transposeByDate ? uniqueDates : settings.data.map(d => d[categoryColumn]));
        return this;
    };

    function isDateLike(value) {
        return typeof value === 'string' && /^(0?[1-9]|[12]\d|3[01])?[- ]?(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[- ]?\d{2,4}$/.test(value);
    }

    function isCategoryColumn(colName, data) {
        return data.every(row => typeof row[colName] === "string" && !isDateLike(row[colName]));
    }

    function formatValue(value, name) {
        if (typeof value === "number") {
            return name.toLowerCase().includes("percentage") || name.includes("%")
                ? value.toFixed(1)
                : value.toFixed(0);
        }
        return value;
    }

    function renderTableAndChart(data, categories) {
        let chatBox = $("#chatBox");
        let container = $("<div>").addClass("chat-result card p-3 mb-3 shadow-sm").css({
            width: "100%",
            border: "1px solid #ddd",
            borderRadius: "10px"
        });

        let tableContainer = $("<div>").addClass("table-responsive").css({
            width: "100%",
            maxHeight: "250px",
            overflowY: "auto"
        });

        let table = $("<table>").addClass("table table-bordered table-striped text-center").css({ width: "100%" });
        let thead = $("<thead>").append("<tr></tr>");
        let tbody = $("<tbody></tbody>");

        let transposedHeaders = ["Metric", ...categories];
        transposedHeaders.forEach(key => thead.find("tr").append($("<th>").text(key)));

        data.forEach(row => {
            let tr = $("<tr></tr>");
            transposedHeaders.forEach(key => tr.append($("<td>").text(row[key] || "")));
            tbody.append(tr);
        });

        table.append(thead).append(tbody);
        tableContainer.append(table);
        container.append(tableContainer);

        let chartContainer = $("<div>").css({ width: "100%", height: "350px" });
        container.append(chartContainer);
        chatBox.append(container);

        let chartOptions = {
            chart: { type: "bar", height: 320 },
            series: data.map(row => ({ name: row["Metric"], data: categories.map(c => parseFloat(row[c]) || 0) })),
            xaxis: { categories },
            tooltip: {
                y: { formatter: (value, { seriesIndex, w }) => formatValue(value, w.config.series[seriesIndex].name) }
            },
            dataLabels: {
                enabled: true,
                formatter: (value, { seriesIndex, w }) => formatValue(value, w.config.series[seriesIndex].name)
            }
        };

        new ApexCharts(chartContainer[0], chartOptions).render();
    }
}(jQuery));
