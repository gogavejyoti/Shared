(function ($) {
    $.fn.generateDynamicChart = function (options) {
        let settings = $.extend({
            botTextContainer: null,
            userInput: '',
            data: []
        }, options);

        if (!settings.data || settings.data.length === 0) {
            console.error("No data provided for the chart.");
            return this;
        }

        // Identify possible date column
        let sampleItem = settings.data[0];
        let dateColumn = null;
        let numericFields = [];
        let nonDateNonNumericFields = [];

        let accountColumn = null;
        let weekColumn = null;

        Object.keys(sampleItem).forEach(key => {
            if (/^\d{2}-[A-Za-z]{3}-\d{2}$/.test(sampleItem[key]) || /^[A-Za-z]{3}-\d{2}$/.test(sampleItem[key])) {
                dateColumn = key;
            } else if (key.toLowerCase().includes("week")) {
                weekColumn = key;
            } else if (key.toLowerCase().includes("account")) {
                accountColumn = key;
            } else if (!isNaN(sampleItem[key]) && sampleItem[key] !== '') {
                numericFields.push(key);
            } else {
                nonDateNonNumericFields.push(key);
            }
        });

        let transposedData = [];
        let categories = [];
        let seriesData = [];

        // Decide whether to transpose
        let shouldTranspose = false;
        if (dateColumn) {
            shouldTranspose = true; // Always transpose if date column is found
        } else if (weekColumn && !accountColumn) {
            shouldTranspose = true; // Transpose if week is present but no account
        } else if (weekColumn && accountColumn) {
            let uniqueWeeks = [...new Set(settings.data.map(row => row[weekColumn]))].length;
            let uniqueAccounts = [...new Set(settings.data.map(row => row[accountColumn]))].length;
            shouldTranspose = uniqueWeeks > 1 || uniqueAccounts === 1;
        }

        if (shouldTranspose) {
            // Transpose the data
            let transposedMap = {};
            settings.data.forEach(row => {
                let timeValue = row[dateColumn] || row[weekColumn];
                if (!transposedMap[timeValue]) transposedMap[timeValue] = {};

                numericFields.forEach(field => {
                    transposedMap[timeValue][field] = row[field];
                });
            });

            // Convert transposed data into row format
            numericFields.forEach(field => {
                let rowData = { "Metric": field };
                Object.keys(transposedMap).forEach(time => {
                    rowData[time] = transposedMap[time][field] || 0;
                });
                transposedData.push(rowData);
            });

            categories = Object.keys(transposedMap);
            seriesData = numericFields.map(field => ({
                name: field,
                data: categories.map(time => transposedMap[time][field] || 0)
            }));
        } else {
            // Use original data if no transposition is required
            transposedData = settings.data;
            categories = settings.data.map(item => item[nonDateNonNumericFields[0]]);
            seriesData = numericFields.map(field => ({
                name: field,
                data: settings.data.map(item => parseFloat(item[field]) || 0)
            }));
        }

        // Render table
        let chatBox = $("#chatBox");
        let mainContainer = $("<div>").addClass("chat-result card p-3 mb-3 shadow-sm");
        let tableContainer = $("<div>").addClass("table-responsive");
        let table = $("<table>").addClass("table table-bordered text-center");
        let thead = $("<thead>").append("<tr></tr>");
        let tbody = $("<tbody></tbody>");

        // Table Header
        Object.keys(transposedData[0]).forEach(key => {
            thead.find("tr").append($("<th>").text(key).addClass("bg-primary text-white"));
        });

        // Table Body
        transposedData.forEach(row => {
            let tr = $("<tr></tr>");
            Object.keys(row).forEach(key => {
                tr.append($("<td>").text(row[key]));
            });
            tbody.append(tr);
        });

        table.append(thead).append(tbody);
        tableContainer.append(table);
        mainContainer.append(tableContainer);

        if (settings.userInput.toLowerCase().includes("show chart")) {
            let chartContainer = $("<div>").css({ width: "100%", height: "350px" });
            mainContainer.append(chartContainer);
            chatBox.append(mainContainer);

            let chartOptions = {
                chart: { type: shouldTranspose ? "line" : "bar", height: 320 },
                series: seriesData,
                xaxis: { categories: categories },
                dataLabels: { enabled: true }
            };
            let chart = new ApexCharts(chartContainer[0], chartOptions);
            chart.render();
        } else {
            chatBox.append(mainContainer);
        }

        return this;
    };
}(jQuery));
