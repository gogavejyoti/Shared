(function ($) {
    $.fn.staffingSummaryPopup = function (options) {
        const settings = $.extend({
            data: [],
            weekStartDay: 'sunday'
        }, options);

        $('#analyticsModal').remove();

        if ($('#weekAnalyticsPopupStyles').length === 0) {
            $('head').append(`
            <style id="weekAnalyticsPopupStyles">
                /* Same styles as before (omitted for brevity) */
            </style>
            `);
        }

        const modalHTML = `
        <div class="modal fade" id="analyticsModal" tabindex="-1" style="z-index:9999;zoom:85%">
          <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Staffing Summary</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body p-0">
                <div class="filter-container">
                    <div class="row g-2 align-items-center">
                        <!-- LOB / Metrics / From Week / To Week dropdowns (same as before) -->
                        <div class="col-auto">
                            <label><b>Summary Type:</b></label><br/>
                            <select class="form-select form-select-sm" id="summaryTypeSelect" style="border:1px solid; border-radius:5px;">
                                <option value="weekly" selected>Weekly</option>
                                <option value="monthly">Monthly</option>
                            </select>
                        </div>

                        <div class="col-auto">
                            <button id="applyFilterBtn" class="btn btn-primary btn-sm mt-3">Apply Filter</button>
                        </div>
                    </div>
                </div>
                <div class="table-wrapper" id="staffingContainer"></div>
              </div>
            </div>
          </div>
        </div>`;

        $('body').append(modalHTML);

        const $container = $('#staffingContainer');
        const parseWeek = w => {
            const [dd, mmm, yy] = w.split('-');
            const fullYear = yy.length === 2 ? (parseInt(yy, 10) < 50 ? '20' + yy : '19' + yy) : yy;
            return new Date(`${mmm} ${dd}, ${fullYear}`);
        };

        const uniqueWeeks = [...new Set(settings.data.map(d => d.week))].sort((a,b)=>parseWeek(a)-parseWeek(b));
        const uniqueLOBs = [...new Set(settings.data.map(d=>d.sheetName))].sort();
        const metrics = ['Required HC','Available HC','Delta','Staffing %'];

        const groupedData = {};
        settings.data.forEach(d => {
            if (!groupedData[d.sheetName]) groupedData[d.sheetName] = {};
            if (!groupedData[d.sheetName][d.week]) groupedData[d.sheetName][d.week] = {};
            groupedData[d.sheetName][d.week][d.header] = Number(d.value);
        });

        for (const lob in groupedData) {
            for (const week in groupedData[lob]) {
                const req = groupedData[lob][week]?.['Required HC'] || 0;
                const avail = groupedData[lob][week]?.['Available HC'] || 0;
                groupedData[lob][week]['Delta'] = avail - req;
                groupedData[lob][week]['Staffing %'] = req === 0 ? 0 : Math.round((avail / req) * 100);
            }
        }

        const lobColors = ['#2c3e50','#34495e','#16a085','#8e44ad','#d35400','#7f8c8d','#27ae60','#c0392b'];

        function updateDropdownLabel(dropdownId, selectedItems, placeholder){
            const btn=$(`#${dropdownId}Btn`);
            btn.text(selectedItems.length===0?placeholder:`${placeholder.split(' ')[0]} (${selectedItems.length}) selected`);
        }

        function updateRadioDropdownLabel(dropdownBtnId, selectedValue, prefix){
            $(`#${dropdownBtnId}`).text(`${prefix}: ${selectedValue}`);
        }

        function populateFilters(){
            // Populate LOB, Metrics, Week From/To same as before (omitted for brevity)
            // Initialization of default selections
        }

        function buildTable(selectedLOBs, selectedMetrics, weekFrom, weekTo, summaryType){
            const fromIndex = uniqueWeeks.indexOf(weekFrom);
            const toIndex = uniqueWeeks.indexOf(weekTo);
            const weeksInRange = uniqueWeeks.slice(Math.min(fromIndex,toIndex), Math.max(fromIndex,toIndex)+1);

            let displayKeys = [];
            let groupedByMonth = {};

            if(summaryType === 'monthly'){
                weeksInRange.forEach(week => {
                    const [dd, mmm, yy] = week.split('-');
                    const monthKey = `${mmm}-${yy}`;
                    if(!groupedByMonth[monthKey]) groupedByMonth[monthKey] = [];
                    groupedByMonth[monthKey].push(week);
                });
                displayKeys = Object.keys(groupedByMonth).sort((a,b)=>{
                    const [m1,y1]=a.split('-');
                    const [m2,y2]=b.split('-');
                    return new Date(`${m1}-01-${y1}`) - new Date(`${m2}-01-${y2}`);
                });
            } else {
                displayKeys = weeksInRange;
            }

            const table = document.createElement('table');
            const thead = document.createElement('thead');
            const tbody = document.createElement('tbody');

            const headerRow = document.createElement('tr');
            headerRow.innerHTML = `<th class="sticky-left">LOB</th><th class="sticky-left-2">Metric</th>`;
            displayKeys.forEach(key => {
                const th = document.createElement('th');
                th.textContent = key;
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);

            const overallData = {};
            selectedMetrics.forEach(metric => {
                overallData[metric] = {};
                displayKeys.forEach(key => {
                    const weeksArray = summaryType === 'monthly' ? groupedByMonth[key] : [key];
                    overallData[metric][key] = selectedLOBs.reduce((sum, lob) =>
                        sum + weeksArray.reduce((subSum, week) =>
                            subSum + (groupedData[lob][week]?.[metric] || 0), 0), 0
                    );

                    if(metric === 'Staffing %'){
                        let totalReq = selectedLOBs.reduce((sum, lob) =>
                            sum + weeksArray.reduce((subSum, week) =>
                                subSum + (groupedData[lob][week]?.['Required HC'] || 0), 0), 0
                        );
                        let totalAvail = selectedLOBs.reduce((sum, lob) =>
                            sum + weeksArray.reduce((subSum, week) =>
                                subSum + (groupedData[lob][week]?.['Available HC'] || 0), 0), 0
                        );
                        overallData[metric][key] = totalReq === 0 ? 0 : Math.round((totalAvail / totalReq) * 100);
                    }
                });
            });

            // Overall Summary Row
            selectedMetrics.forEach((metric, i) => {
                const row = document.createElement('tr');
                if(i === 0){
                    const tdLOB = document.createElement('td');
                    tdLOB.className = 'sticky-left';
                    tdLOB.setAttribute('rowspan', selectedMetrics.length);
                    tdLOB.style.background = '#fff';
                    tdLOB.style.color = '#000';
                    tdLOB.textContent = 'Overall Summary';
                    row.appendChild(tdLOB);
                }

                const tdMetric = document.createElement('td');
                tdMetric.className = 'sticky-left-2';
                tdMetric.textContent = metric;
                row.appendChild(tdMetric);

                displayKeys.forEach(key => {
                    const td = document.createElement('td');
                    let val = overallData[metric][key];
                    val = Math.round(val);

                    let cls = '';
                    if (metric === 'Delta' && val < 0) cls = 'rag-red';
                    if (metric === 'Staffing %') {
                        if (val < 80) cls = 'rag-red';
                        else if (val < 100) cls = 'rag-amber';
                        else cls = 'rag-green';
                        val = `${val}%`;
                    } else {
                        val = new Intl.NumberFormat().format(val);
                    }

                    td.className = cls;
                    td.title = val;
                    td.textContent = val;
                    td.style.background = '#F5FAE1';
                    row.appendChild(td);
                });

                tbody.appendChild(row);
            });

            // Per LOB Rows
            selectedLOBs.forEach((lob, lobIndex) => {
                const lobColor = lobColors[lobIndex % lobColors.length];

                selectedMetrics.forEach((metric, i) => {
                    const row = document.createElement('tr');
                    if(i === 0){
                        const tdLOB = document.createElement('td');
                        tdLOB.className = 'sticky-left';
                        tdLOB.setAttribute('rowspan', selectedMetrics.length);
                        tdLOB.style.background = lobColor;
                        tdLOB.style.color = '#fff';
                        tdLOB.textContent = lob;
                        row.appendChild(tdLOB);
                    }

                    const tdMetric = document.createElement('td');
                    tdMetric.className = 'sticky-left-2';
                    tdMetric.textContent = metric;
                    row.appendChild(tdMetric);

                    displayKeys.forEach(key => {
                        const td = document.createElement('td');
                        const weeksArray = summaryType === 'monthly' ? groupedByMonth[key] : [key];
                        let val = weeksArray.reduce((sum, week) =>
                            sum + (groupedData[lob][week]?.[metric] || 0), 0);

                        if(metric === 'Staffing %'){
                            let totalReq = weeksArray.reduce((sum, week) =>
                                sum + (groupedData[lob][week]?.['Required HC'] || 0), 0);
                            let totalAvail = weeksArray.reduce((sum, week) =>
                                sum + (groupedData[lob][week]?.['Available HC'] || 0), 0);
                            val = totalReq === 0 ? 0 : Math.round((totalAvail / totalReq) * 100);
                        }

                        let cls = '';
                        if(metric === 'Delta' && val < 0) cls = 'rag-red';
                        if(metric === 'Staffing %'){
                            if(val < 80) cls = 'rag-red';
                            else if(val < 100) cls = 'rag-amber';
                            else cls = 'rag-green';
                            val = `${val}%`;
                        } else {
                            val = Math.round(val);
                        }

                        td.className = cls;
                        td.title = val;
                        td.textContent = val;
                        row.appendChild(td);
                    });

                    tbody.appendChild(row);
                });
            });

            table.appendChild(thead);
            table.appendChild(tbody);
            $container.empty().append(table);
        }

        populateFilters();

        $('#applyFilterBtn').on('click', function () {
            const selectedLOBs = $('.lobCheckbox:checked').map(function () { return this.value; }).get();
            const selectedMetrics = $('.metricCheckbox:checked').map(function () { return this.value; }).get();
            const weekFrom = $('#weekFromDropdown input[type=radio]:checked').val();
            const weekTo = $('#weekToDropdown input[type=radio]:checked').val();
            const summaryType = $('#summaryTypeSelect').val();

            buildTable(selectedLOBs, selectedMetrics, weekFrom, weekTo, summaryType);
        });

        buildTable(uniqueLOBs, metrics, uniqueWeeks[0], uniqueWeeks[uniqueWeeks.length-1], 'weekly');

        const analyticsModal = new bootstrap.Modal(document.getElementById('analyticsModal'));
        analyticsModal.show();
    };
})(jQuery);
