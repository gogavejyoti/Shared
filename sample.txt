        function buildTable(selectedLOBs, selectedMetrics, weekFrom, weekTo, summaryType) {
            const fromIndex = uniqueWeeks.indexOf(weekFrom);
            const toIndex = uniqueWeeks.indexOf(weekTo);
            const weeksInRange = uniqueWeeks.slice(Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex) + 1);

            let displayKeys = [];
            let groupedByMonth = {};

            if (summaryType === 'monthly') {
                weeksInRange.forEach(week => {
                    const [dd, mmm, yy] = week.split('-');
                    const monthKey = `${mmm}-${yy}`;
                    if (!groupedByMonth[monthKey]) groupedByMonth[monthKey] = [];
                    groupedByMonth[monthKey].push(week);
                });
                displayKeys = Object.keys(groupedByMonth).sort((a, b) => new Date(`01-${a}`) - new Date(`01-${b}`));
            } else displayKeys = weeksInRange;

            const table = document.createElement('table');
            const thead = document.createElement('thead');
            const tbody = document.createElement('tbody');

            const headerRow = document.createElement('tr');
            headerRow.innerHTML = `<th class="sticky-left">LOB</th><th class="sticky-left-2">Metric</th>`;
            displayKeys.forEach(key => { const th = document.createElement('th'); th.textContent = key; headerRow.appendChild(th); });
            thead.appendChild(headerRow);

            const overallData = {};
            selectedMetrics.forEach(metric => {
                overallData[metric] = {};
                displayKeys.forEach(key => {
                    const weeksArray = summaryType === 'monthly' ? groupedByMonth[key] : [key];
                    overallData[metric][key] = selectedLOBs.reduce((sum, lob) => sum + weeksArray.reduce((subSum, week) => subSum + (groupedData[lob][week]?.[metric] || 0), 0), 0);
                    if (metric === 'Staffing %') {
                        let totalReq = selectedLOBs.reduce((sum, lob) => sum + weeksArray.reduce((subSum, week) => subSum + (groupedData[lob][week]?.['Required HC'] || 0), 0), 0);
                        let totalAvail = selectedLOBs.reduce((sum, lob) => sum + weeksArray.reduce((subSum, week) => subSum + (groupedData[lob][week]?.['Available HC'] || 0), 0), 0);
                        overallData[metric][key] = totalReq === 0 ? 0 : Math.round((totalAvail / totalReq) * 100);
                    }
                });
            });

            // Overall Summary
            selectedMetrics.forEach((metric, i) => {
                const row = document.createElement('tr');
                if (i === 0) { const tdLOB = document.createElement('td'); tdLOB.className = 'sticky-left'; tdLOB.setAttribute('rowspan', selectedMetrics.length); tdLOB.style.background = '#fff'; tdLOB.style.color = '#000'; tdLOB.textContent = 'Overall Summary'; row.appendChild(tdLOB); }
                const tdMetric = document.createElement('td'); tdMetric.className = 'sticky-left-2'; tdMetric.textContent = metric; row.appendChild(tdMetric);

                displayKeys.forEach(key => {
                    const td = document.createElement('td');
                    let val = overallData[metric][key]; val = Math.round(val);
                    let cls = '';
                    if (metric === 'Delta' && val < 0) cls = 'rag-red';
                    if (metric === 'Staffing %') {
                        if (val < 80) cls = 'rag-red';
                        else if (val < 100) cls = 'rag-amber';
                        else cls = 'rag-green';
                        val = `${val}%`;
                    } else val = new Intl.NumberFormat().format(val);
                    td.className = cls; td.title = val; td.textContent = val; td.style.background = '#F5FAE1';
                    row.appendChild(td);
                });

                tbody.appendChild(row);
            });

            // Individual LOBs
            selectedLOBs.forEach((lob, lobIndex) => {
                const lobColor = lobColors[lobIndex % lobColors.length];
                selectedMetrics.forEach((metric, i) => {
                    const row = document.createElement('tr');
                    if (i === 0) { const tdLOB = document.createElement('td'); tdLOB.className = 'sticky-left'; tdLOB.setAttribute('rowspan', selectedMetrics.length); tdLOB.style.background = lobColor; tdLOB.style.color = '#fff'; tdLOB.textContent = lob; row.appendChild(tdLOB); }
                    const tdMetric = document.createElement('td'); tdMetric.className = 'sticky-left-2'; tdMetric.textContent = metric; row.appendChild(tdMetric);

                    displayKeys.forEach(key => {
                        const td = document.createElement('td');
                        const weeksArray = summaryType === 'monthly' ? groupedByMonth[key] : [key];
                        let val = weeksArray.reduce((sum, week) => sum + (groupedData[lob][week]?.[metric] || 0), 0);
                        if (metric === 'Staffing %') {
                            let totalReq = weeksArray.reduce((sum, week) => sum + (groupedData[lob][week]?.['Required HC'] || 0), 0);
                            let totalAvail = weeksArray.reduce((sum, week) => sum + (groupedData[lob][week]?.['Available HC'] || 0), 0);
                            val = totalReq === 0 ? 0 : Math.round((totalAvail / totalReq) * 100);
                        }
                        let cls = '';
                        if (metric === 'Delta' && val < 0) cls = 'rag-red';
                        if (metric === 'Staffing %') {
                            if (val < 80) cls = 'rag-red';
                            else if (val < 100) cls = 'rag-amber';
                            else cls = 'rag-green';
                            val = `${val}%`;
                        } else val = Math.round(val);
                        td.className = cls; td.title = val; td.textContent = val; row.appendChild(td);
                    });

                    tbody.appendChild(row);
                });
            });

            table.appendChild(thead);
            table.appendChild(tbody);
            $container.empty().append(table);
        }
