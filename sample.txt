function buildTable(selectedLOBs, selectedMetrics, weekFrom, weekTo) {
    const fromIndex = uniqueWeeks.indexOf(weekFrom);
    const toIndex = uniqueWeeks.indexOf(weekTo);
    const weeksInRange = uniqueWeeks.slice(Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex) + 1);

    // === Calculate Summary Data ===
    const summaryData = {
        'Required HC': [],
        'Available HC': [],
        'Delta': [],
        'Staffing %': []
    };

    weeksInRange.forEach(week => {
        let totalRequired = 0, totalAvailable = 0, totalDelta = 0;
        let staffingPercentages = [];

        selectedLOBs.forEach(lob => {
            const req = groupedData[lob][week]?.['Required HC'] || 0;
            const avail = groupedData[lob][week]?.['Available HC'] || 0;
            const delta = avail - req;
            const staffingPercent = req === 0 ? 0 : (avail / req) * 100;

            totalRequired += req;
            totalAvailable += avail;
            totalDelta += delta;
            staffingPercentages.push(staffingPercent);
        });

        const avgStaffing = staffingPercentages.length
            ? Math.round(staffingPercentages.reduce((a, b) => a + b, 0) / staffingPercentages.length)
            : 0;

        summaryData['Required HC'].push(totalRequired);
        summaryData['Available HC'].push(totalAvailable);
        summaryData['Delta'].push(totalDelta);
        summaryData['Staffing %'].push(avgStaffing);
    });

    // === Render Summary Table (Metrics as rows, Weeks as columns) ===
    let summaryHTML = `
        <h6>Overall Summary (Week on Week)</h6>
        <div class="table-wrapper">
            <table class="table table-sm table-bordered">
                <thead>
                    <tr>
                        <th>Metric</th>
                        ${weeksInRange.map(week => `<th>${week}</th>`).join('')}
                    </tr>
                </thead>
                <tbody>
                    ${Object.keys(summaryData).map(metric => `
                        <tr>
                            <td class="sticky-left">${metric}</td>
                            ${summaryData[metric].map((val, idx) => {
                                if (metric === 'Staffing %') {
                                    const cls = val < 80 ? 'rag-red' : val < 100 ? 'rag-amber' : 'rag-green';
                                    return `<td class="${cls}">${val}%</td>`;
                                } else {
                                    return `<td>${new Intl.NumberFormat().format(val)}</td>`;
                                }
                            }).join('')}
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;

    $('#summaryContainer').html(summaryHTML);

    // === Build Detailed Data Table (Unchanged) ===
    const table = document.createElement('table');
    const thead = document.createElement('thead');
    const tbody = document.createElement('tbody');

    const headerRow = document.createElement('tr');
    headerRow.innerHTML = `<th class="sticky-left">LOB</th><th class="sticky-left-2">Metric</th>`;
    weeksInRange.forEach(week => {
        const th = document.createElement('th');
        th.textContent = week;
        headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);

    selectedLOBs.forEach((lob, lobIndex) => {
        const lobColor = lobColors[lobIndex % lobColors.length];
        selectedMetrics.forEach((metric, i) => {
            const row = document.createElement('tr');

            if (i === 0) {
                const tdLOB = document.createElement('td');
                tdLOB.className = 'sticky-left';
                tdLOB.setAttribute('rowspan', selectedMetrics.length);
                tdLOB.style.background = lobColor;
                tdLOB.style.color = '#fff';
                tdLOB.textContent = lob;
                row.appendChild(tdLOB);
            }

            const tdMetric = document.createElement('td');
            tdMetric.className = 'sticky-left-2';
            tdMetric.textContent = metric;
            row.appendChild(tdMetric);

            weeksInRange.forEach(week => {
                const td = document.createElement('td');
                let val = (groupedData[lob][week] && groupedData[lob][week][metric]) || 0;
                val = Math.round(val);

                let cls = '';
                if (metric === 'Delta' && val < 0) cls = 'rag-red';
                if (metric === 'Staffing %') {
                    if (val < 80) cls = 'rag-red';
                    else if (val < 100) cls = 'rag-amber';
                    else cls = 'rag-green';
                    val = `${val}%`;
                } else {
                    val = new Intl.NumberFormat().format(val);
                }

                td.className = cls;
                td.title = val;
                td.textContent = val;
                row.appendChild(td);
            });

            tbody.appendChild(row);
        });
    });

    table.appendChild(thead);
    table.appendChild(tbody);
    $container.empty().append(table);
};
