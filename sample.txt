function buildTable(selectedLOBs, selectedMetrics, weekFrom, weekTo) {
    const fromIndex = uniqueWeeks.indexOf(weekFrom);
    const toIndex = uniqueWeeks.indexOf(weekTo);
    const weeksInRange = uniqueWeeks.slice(
        Math.min(fromIndex, toIndex),
        Math.max(fromIndex, toIndex) + 1
    );

    const table = document.createElement('table');
    const thead = document.createElement('thead');
    const tbody = document.createElement('tbody');

    const headerRow = document.createElement('tr');
    headerRow.innerHTML = `<th class="sticky-left">LOB</th><th class="sticky-left-2">Metric</th>`;
    weeksInRange.forEach(week => {
        const th = document.createElement('th');
        th.textContent = week;
        headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);

    // Overall Summary Data Calculation
    const overallData = {};
    metrics.forEach(metric => {
        overallData[metric] = {};
        weeksInRange.forEach(week => {
            overallData[metric][week] = selectedLOBs.reduce((sum, lob) => {
                const val = groupedData[lob][week]?.[metric] || 0;
                return sum + val;
            }, 0);

            if (metric === 'Staffing %') {
                const totalReq = selectedLOBs.reduce((sum, lob) => {
                    return sum + (groupedData[lob][week]?.['Required HC'] || 0);
                }, 0);
                const totalAvail = selectedLOBs.reduce((sum, lob) => {
                    return sum + (groupedData[lob][week]?.['Available HC'] || 0);
                }, 0);
                overallData[metric][week] = totalReq === 0 ? 0 : Math.round((totalAvail / totalReq) * 100);
            }
        });
    });

    // Render Overall Summary Section
    selectedMetrics.forEach((metric, i) => {
        const row = document.createElement('tr');

        if (i === 0) {
            const tdLOB = document.createElement('td');
            tdLOB.className = 'sticky-left';
            tdLOB.setAttribute('rowspan', selectedMetrics.length);
            tdLOB.style.background = '#34495e';
            tdLOB.style.color = '#fff';
            tdLOB.textContent = 'Overall Summary';
            row.appendChild(tdLOB);
        }

        const tdMetric = document.createElement('td');
        tdMetric.className = 'sticky-left-2';
        tdMetric.textContent = metric;
        row.appendChild(tdMetric);

        weeksInRange.forEach(week => {
            const td = document.createElement('td');
            let val = overallData[metric][week];
            val = Math.round(val);

            let cls = '';
            if (metric === 'Delta' && val < 0) cls = 'rag-red';
            if (metric === 'Staffing %') {
                if (val < 80) cls = 'rag-red';
                else if (val < 100) cls = 'rag-amber';
                else cls = 'rag-green';
                val = `${val}%`;
            } else {
                val = new Intl.NumberFormat().format(val);
            }

            td.className = cls;
            td.title = val;
            td.textContent = val;
            row.appendChild(td);
        });

        tbody.appendChild(row);
    });

    // Render individual LOBs
    selectedLOBs.forEach((lob, lobIndex) => {
        const lobColor = lobColors[lobIndex % lobColors.length];
        selectedMetrics.forEach((metric, i) => {
            const row = document.createElement('tr');

            if (i === 0) {
                const tdLOB = document.createElement('td');
                tdLOB.className = 'sticky-left';
                tdLOB.setAttribute('rowspan', selectedMetrics.length);
                tdLOB.style.background = lobColor;
                tdLOB.style.color = '#fff';
                tdLOB.textContent = lob;
                row.appendChild(tdLOB);
            }

            const tdMetric = document.createElement('td');
            tdMetric.className = 'sticky-left-2';
            tdMetric.textContent = metric;
            row.appendChild(tdMetric);

            weeksInRange.forEach(week => {
                const td = document.createElement('td');
                let val = (groupedData[lob][week] && groupedData[lob][week][metric]) || 0;
                val = Math.round(val);

                let cls = '';
                if (metric === 'Delta' && val < 0) cls = 'rag-red';
                if (metric === 'Staffing %') {
                    if (val < 80) cls = 'rag-red';
                    else if (val < 100) cls = 'rag-amber';
                    else cls = 'rag-green';
                    val = `${val}%`;
                } else {
                    val = new Intl.NumberFormat().format(val);
                }

                td.className = cls;
                td.title = val;
                td.textContent = val;
                row.appendChild(td);
            });

            tbody.appendChild(row);
        });
    });

    table.appendChild(thead);
    table.appendChild(tbody);
    $container.empty().append(table);
}
