function _shiftCrossSheetReference({ type, sheetIndex, rowIndex, rowCount = 1, colIndex, colCount = 1 }) {
    const allSheets = Ft() || [];

    for (let s = 0; s < allSheets.length; s++) {
        const sheet = allSheets[s];
        const data = sheet.data;

        for (let r = 0; r < data.length; r++) {
            for (let c = 0; c < data[r].length; c++) {
                const cell = data[r][c];
                if (!cell || !cell.f) continue;

                let formula = cell.f;

                // Match any sheet name with spaces (unquoted) before !ColumnRow
                formula = formula.replace(/([A-Za-z0-9_ ]+)!([A-Z]+)(\d+)/g, function (match, refSheetName, colLetter, rowNumber) {
                    const refSheet = allSheets.find(sh => sh.name === refSheetName.trim());
                    if (!refSheet) return match;

                    let refRow = parseInt(rowNumber, 10);
                    let refCol = _columnLetterToIndex(colLetter);

                    if (type === "insertRow" && refSheet.index === sheetIndex && refRow >= rowIndex + 1) {
                        refRow += rowCount;
                    } else if (type === "deleteRow" && refSheet.index === sheetIndex && refRow > rowIndex && refRow <= rowIndex + rowCount) {
                        refRow = rowIndex;
                    } else if (type === "deleteRow" && refSheet.index === sheetIndex && refRow > rowIndex + rowCount) {
                        refRow -= rowCount;
                    } else if (type === "insertCol" && refSheet.index === sheetIndex && refCol >= colIndex) {
                        refCol += colCount;
                    } else if (type === "deleteCol" && refSheet.index === sheetIndex && refCol >= colIndex && refCol < colIndex + colCount) {
                        refCol = colIndex;
                    } else if (type === "deleteCol" && refSheet.index === sheetIndex && refCol >= colIndex + colCount) {
                        refCol -= colCount;
                    }

                    return `${refSheetName}!${_columnIndexToLetter(refCol)}${refRow}`;
                });

                cell.f = formula;
            }
        }
    }

    function _columnLetterToIndex(col) {
        let index = 0;
        for (let i = 0; i < col.length; i++) {
            index = index * 26 + (col.charCodeAt(i) - 65 + 1);
        }
        return index - 1;
    }

    function _columnIndexToLetter(index) {
        let col = "";
        index += 1;
        while (index > 0) {
            let rem = (index - 1) % 26;
            col = String.fromCharCode(65 + rem) + col;
            index = Math.floor((index - 1) / 26);
        }
        return col;
    }
}
