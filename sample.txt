function buildTable(groupedData, groupedByMonth, summaryType, selectedLOBs, selectedMetrics, displayKeys) {
    const tableData = [];

    // ---- PER LOB ROWS ----
    selectedLOBs.forEach(lob => {
        const rowData = {};
        selectedMetrics.forEach(metric => {
            rowData[metric] = {};
            displayKeys.forEach(key => {
                if (summaryType === 'monthly') {
                    const weeksArray = groupedByMonth[key] || [];
                    const weekCount = weeksArray.length;

                    const totalReq = weeksArray.reduce((sum, week) => sum + (groupedData[lob][week]?.['Required HC'] || 0), 0);
                    const totalAvail = weeksArray.reduce((sum, week) => sum + (groupedData[lob][week]?.['Available HC'] || 0), 0);

                    const avgReq = weekCount === 0 ? 0 : totalReq / weekCount;
                    const avgAvail = weekCount === 0 ? 0 : totalAvail / weekCount;

                    if (metric === 'Required HC') {
                        rowData[metric][key] = Math.round(avgReq);
                    } else if (metric === 'Available HC') {
                        rowData[metric][key] = Math.round(avgAvail);
                    } else if (metric === 'Delta') {
                        rowData[metric][key] = Math.round(avgAvail - avgReq);
                    } else if (metric === 'Staffing %') {
                        rowData[metric][key] = avgReq === 0 ? 0 : Math.round((avgAvail / avgReq) * 100);
                    } else {
                        // other metrics â†’ sum across weeks
                        rowData[metric][key] = weeksArray.reduce((sum, week) =>
                            sum + (groupedData[lob][week]?.[metric] || 0), 0
                        );
                    }
                } else {
                    // Weekly mode
                    rowData[metric][key] = groupedData[lob][key]?.[metric] || 0;
                }
            });
        });
        rowData['LOB'] = lob;
        tableData.push(rowData);
    });

    // ---- OVERALL SUMMARY ----
    const overallData = {};
    selectedMetrics.forEach(metric => {
        overallData[metric] = {};
        displayKeys.forEach(key => {
            if (summaryType === 'monthly') {
                // Step 1: compute LOB-level monthly averages
                const lobMonthly = selectedLOBs.map(lob => {
                    const weeksArray = groupedByMonth[key] || [];
                    const weekCount = weeksArray.length;

                    const totalReq = weeksArray.reduce((sum, week) => sum + (groupedData[lob][week]?.['Required HC'] || 0), 0);
                    const totalAvail = weeksArray.reduce((sum, week) => sum + (groupedData[lob][week]?.['Available HC'] || 0), 0);

                    return {
                        avgReq: weekCount === 0 ? 0 : totalReq / weekCount,
                        avgAvail: weekCount === 0 ? 0 : totalAvail / weekCount
                    };
                });

                // Step 2: sum across LOBs
                const sumReq = lobMonthly.reduce((s, x) => s + x.avgReq, 0);
                const sumAvail = lobMonthly.reduce((s, x) => s + x.avgAvail, 0);

                // Step 3: assign values
                if (metric === 'Required HC') {
                    overallData[metric][key] = Math.round(sumReq);
                } else if (metric === 'Available HC') {
                    overallData[metric][key] = Math.round(sumAvail);
                } else if (metric === 'Delta') {
                    overallData[metric][key] = Math.round(sumAvail - sumReq);
                } else if (metric === 'Staffing %') {
                    overallData[metric][key] = sumReq === 0 ? 0 : Math.round((sumAvail / sumReq) * 100);
                } else {
                    overallData[metric][key] = selectedLOBs.reduce((sumL, lob) =>
                        sumL + (groupedByMonth[key] || []).reduce((subSum, week) => subSum + (groupedData[lob][week]?.[metric] || 0), 0)
                    , 0);
                }
            } else {
                // Weekly mode
                overallData[metric][key] = selectedLOBs.reduce((sum, lob) =>
                    sum + (groupedData[lob][key]?.[metric] || 0), 0
                );
            }
        });
    });
    overallData['LOB'] = 'Overall Summary';
    tableData.push(overallData);

    return tableData;
}
