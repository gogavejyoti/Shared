            undo: function () {
                if (h.jfundo.length == 0)
                    return;
                let e = h.jfundo.pop();
                if (h.jfredo.push(e),
                    h.clearjfundo = !1,
                    ve.hasSheet(e.sheetIndex) && h.currentSheetIndex != e.sheetIndex && ve.changeSheetExec(e.sheetIndex),
                    e.type == "datachange") {
                    p.execFunctionGroup();
                    let n = {
                        cfg: e.curConfig,
                        RowlChange: e.RowlChange,
                        cdformat: e.curCdformat,
                        dataVerification: e.curDataVerification,
                        dynamicArray: e.curDynamicArray,
                        hyperlink: e.curHyperlink
                    };
                    Mo(e, "undo"),
                        Ye(e.curdata, e.range, n)
                } else if (e.type == "pasteCut")
                    Va(e.source, e.target, e.RowlChange);
                else if (e.type == "rangechange")
                    Mo(e, "undo"),
                        Aa(e.curdata, e.range, e.curCdformat);
                else if (e.type == "resize") {
                    h.config = e.curconfig,
                        h.luckysheetfile[K(e.sheetIndex)].config = h.config,
                        e.ctrlType == "resizeR" ? ne.saveParam("cg", e.sheetIndex, e.curconfig.rowlen, {
                            k: "rowlen"
                        }) : e.ctrlType == "resizeC" && ne.saveParam("cg", e.sheetIndex, e.curconfig.columnlen, {
                            k: "columnlen"
                        });
                    let n = $.extend(!0, {}, e.curImages);
                    h.luckysheetfile[K(e.sheetIndex)].images = n,
                        ne.saveParam("all", e.sheetIndex, n, {
                            k: "images"
                        }),
                        Re.images = n,
                        Re.allImagesShow(),
                        Ct(h.flowdata.length, h.flowdata[0].length)
                } else if (e.type == "cellRowChange")
                    Yl(e.curdata[0].length, e.curdata.length, e.curdata, e.curconfig, e.currange, e.ctrlType, e.ctrlValue, e.curCdformat);
                else if (e.type == "extend")
                    Yl(e.curdata[0].length, e.curdata.length, e.curdata, e.curconfig, e.currange, e.ctrlType, e.ctrlValue);
                else if (e.type == "dele") {
                    let n = $.extend(!0, {}, e.ctrlValue);
                    n.restore = !0,
                        Yl(e.curdata[0].length, e.curdata.length, e.curdata, e.curconfig, e.currange, e.ctrlType, e.ctrlValue)
                } else if (e.type == "addRC")
                    Bn(e.curData, e.curConfig, "addRC", e.ctrlValue, e.curCalc, e.curFilterObj, e.curCf, e.curAf, e.curFreezen, e.curDataVerification, e.curHyperlink);
                else if (e.type == "delRC")
                    Bn(e.curData, e.curConfig, "delRC", e.ctrlValue, e.curCalc, e.curFilterObj, e.curCf, e.curAf, e.curFreezen, e.curDataVerification, e.curHyperlink);
                else if (e.type == "deleteCell")
                    $i(e.curData, e.curConfig, e.ctrl, e.curCalc, e.curFilterObj, e.curCf, e.curDataVerification, e.curHyperlink);
                else if (e.type == "showHidRows")
                    h.config = e.curconfig,
                        h.luckysheetfile[K(e.sheetIndex)].config = e.curconfig,
                        ne.saveParam("cg", e.sheetIndex, e.curconfig.rowhidden, {
                            k: "rowhidden"
                        }),
                        Ct(h.flowdata.length, h.flowdata[0].length);
                else if (e.type == "showHidCols")
                    h.config = e.curconfig,
                        h.luckysheetfile[K(e.sheetIndex)].config = e.curconfig,
                        ne.saveParam("cg", e.sheetIndex, e.curconfig.colhidden, {
                            k: "colhidden"
                        }),
                        Ct(h.flowdata.length, h.flowdata[0].length);
                else if (e.type == "datachangeAll")
                    p.execFunctionGroup(),
                        Yl(e.curdata[0].length, e.curdata.length, e.curdata, null, e.currange, "datachangeAll", e.ctrlValue);
                else if (e.type == "datachangeAll_filter_clear")
                    ne.saveParam("fsc", h.currentSheetIndex, null),
                        h.config = e.curconfig,
                        h.luckysheetfile[K(h.currentSheetIndex)].config = h.config,
                        ne.saveParam("cg", h.currentSheetIndex, {}, {
                            k: "rowhidden"
                        }),
                        Ct(h.flowdata.length, h.flowdata[0].length),
                        $("#luckysheet-filter-menu .luckysheet-filter-selected-input").hide().find("input").val(),
                        $("#luckysheet-filter-selected span").data("type", "0").data("type", null).text("\u65E0"),
                        $("#luckysheet-filter-selected-sheet" + h.currentSheetIndex + ", #luckysheet-filter-options-sheet" + h.currentSheetIndex).remove(),
                        $("#luckysheet-filter-menu, #luckysheet-filter-submenu").hide();
                else if (e.type == "datachangeAll_filter") {
                    let n = $("#luckysheet-filter-options-sheet" + h.currentSheetIndex + " .luckysheet-filter-options").eq(e.optionsindex)
                        , t = n.data("str")
                        , l = n.data("edr")
                        , a = n.data("cindex")
                        , o = n.data("stc")
                        , s = n.data("edc");
                    zn(n, Ln.hasKey(e.rowhidden), e.rowhidden, e.caljs, !0, t, l, a, o, s),
                        h.config = e.curconfig,
                        h.luckysheetfile[K(h.currentSheetIndex)].config = h.config,
                        ne.saveParam("cg", h.currentSheetIndex, h.config.rowhidden, {
                            k: "rowhidden"
                        }),
                        Ct(h.flowdata.length, h.flowdata[0].length),
                        $("#luckysheet-filter-menu, #luckysheet-filter-submenu").hide()
                } else if (e.type == "filtershow")
                    h.luckysheet_select_save = [e.filter_save],
                        h.filterchage = !1,
                        Si(),
                        h.filterchage = !0,
                        ne.saveParam("all", e.sheetIndex, e.filter_save, {
                            k: "filter_select"
                        });
                else if (e.type == "pivotTable_change")
                    h.luckysheetfile[K(e.sheetIndex)].pivotTable = e.pivotTablecur,
                        Be.getCellData(e.sheetIndex),
                        Be.initialPivotManage(!0),
                        Be.refreshPivotTable();
                else if (e.type == "addSheet")
                    ve.createSheetbydata(e.sheetconfig),
                        $("#luckysheet-input-box").removeAttr("style"),
                        $("#luckysheet-sheet-list, #luckysheet-rightclick-sheet-menu").hide();
                else if (e.type == "copySheet")
                    ve.copySheet(e.copyindex);
                else if (e.type == "deleteSheet")
                    ve.deleteSheet(e.index),
                        e.order == 0 ? ve.changeSheetExec(h.luckysheetfile[0].index) : ve.changeSheetExec(h.luckysheetfile[e.order - 1].index),
                        $("#luckysheet-input-box").removeAttr("style"),
                        $("#luckysheet-sheet-list, #luckysheet-rightclick-sheet-menu").hide();
                else if (e.type == "sheetName")
                    h.luckysheetfile[K(e.sheetIndex)].name = e.txt,
                        $("#luckysheet-sheets-item" + e.sheetIndex).find(".luckysheet-sheets-item-name").html(e.txt),
                        ne.saveParam("all", e.sheetIndex, e.txt, {
                            k: "name"
                        });
                else if (e.type == "sheetColor") {
                    h.luckysheetfile[K(e.sheetIndex)].color = e.color;
                    let n = $("#luckysheet-sheets-item" + e.sheetIndex);
                    n.find(".luckysheet-sheets-item-color").remove(),
                        e.color != null && n.append('<div class="luckysheet-sheets-item-color" style=" position: absolute; width: 100%; height: 3px; bottom: 0px; left: 0px; background-color: ' + e.color + ';"></div>'),
                        ne.saveParam("all", e.sheetIndex, e.color, {
                            k: "color"
                        })
                } else if (e.type == "mergeChange") {
                    let n = {
                        cfg: e.curConfig,
                        calc: e.curCalc,
                        hyperlink: e.curHyperlink
                    };
                    Ye(e.curData, e.range, n)
                } else if (e.type == "updateDataVerification")
                    Xe.ref(e.historyDataVerification, e.currentDataVerification, e.sheetIndex);
                else if (e.type == "updateDataVerificationOfCheckbox")
                    Xe.refOfCheckbox(e.historyDataVerification, e.currentDataVerification, e.sheetIndex, e.curData, e.range);
                else if (e.type == "updateHyperlink")
                    Cl.ref(e.historyHyperlink, e.currentHyperlink, e.sheetIndex, e.curData, e.range);
                else if (e.type == "updateCF") {
                    let n = e.data.currentRules;
                    for (let t = 0; t < n.length; t++) {
                        let l = n[t].sheetIndex;
                        h.luckysheetfile[K(l)].luckysheet_conditionformat_save = n[t].luckysheet_conditionformat_save,
                            ne.allowUpdate && ne.saveParam("all", l, n[t].luckysheet_conditionformat_save, {
                                k: "luckysheet_conditionformat_save"
                            })
                    }
                    $e.ref()
                } else if (e.type == "updateAF") {
                    let n = e.data.currentRules
                        , t = K(e.sheetIndex);
                    h.luckysheetfile[t].luckysheet_alternateformat_save = $.extend(!0, [], n),
                        setTimeout(function () {
                            He()
                        }, 1)
                } else if (e.type == "borderChange")
                    ne.saveParam("cg", e.sheetIndex, e.curconfig.borderInfo, {
                        k: "borderInfo"
                    }),
                        h.config = e.curconfig,
                        h.luckysheetfile[K(e.sheetIndex)].config = h.config,
                        setTimeout(function () {
                            He()
                        }, 1);
                else if (e.type == "postil") {
                    Ve.ref(e.curdata, e.rc);
                    for (let n = 0; n < e.rc.length; n++) {
                        let t = e.rc[n].split("_")[0]
                            , l = e.rc[n].split("_")[1];
                        e.curdata[t][l] != null && e.curdata[t][l].ps != null ? Ve.buildPs(t, l, e.curdata[t][l].ps) : Ve.buildPs(t, l, null)
                    }
                } else
                    e.type == "imageCtrl" ? (Re.images = $.extend(!0, {}, e.curImages),
                        Re.allImagesShow(),
                        Re.ref()) : e.type == "zoomChange" && (h.zoomRatio = e.curZoomRatio,
                            ne.saveParam("all", e.currentSheetIndex, e.curZoomRatio, {
                                k: "zoomRatio"
                            }),
                            ar(),
                            Wa());
                e.range && (h.luckysheet_select_save = e.range,
                    tt()),
                    h.clearjfundo = !0
            }
