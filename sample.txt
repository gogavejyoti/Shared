pasteHandlerOfCopyPaste: function (e) {
    if (!gr(h.luckysheet_select_save, h.currentSheetIndex)) return;

    let t = Q().paste,
        l = $.extend(!0, {}, h.config);

    l.merge == null && (l.merge = {});

    let a = e.HasMC,
        o = e.RowlChange,
        s = e.dataSheetIndex,
        u = e.copyRange[0].row[0],
        d = e.copyRange[0].row[1],
        f = e.copyRange[0].column[0],
        m = e.copyRange[0].column[1],
        g = [],
        y = false;

    for (let se = 0; se < e.copyRange.length; se++) {
        let ie = Nt({
            row: e.copyRange[se].row,
            column: e.copyRange[se].column
        }, s);

        if (e.copyRange.length > 1) {
            if (u === e.copyRange[1].row[0] && d === e.copyRange[1].row[1]) {
                ie = ie[0].map((ue, he) => ie.map(J => J[he]));
                g = g.concat(ie);
                y = true;
            } else if (f === e.copyRange[1].column[0] && m === e.copyRange[1].column[1]) {
                g = g.concat(ie);
            }
        } else {
            g = ie;
        }
    }

    y && (g = g[0].map((se, ie) => g.map(ue => ue[ie])));

    let v = $.extend(!0, [], g);

    let k = v.length,
        b = v[0].length,
        w = h.luckysheet_select_save[h.luckysheet_select_save.length - 1],
        x = w.row[0],
        C = w.row[1],
        S = w.column[0],
        _ = w.column[1],
        T = (C - x + 1) % k,
        A = (_ - S + 1) % b;

    (T != 0 || A != 0) && (C = x + k - 1, _ = S + b - 1);

    let R = false;
    if (l.merge != null) {
        R = Dt(l, x, C, S, _);
    }
    if (R) {
        de()
            ? alert(t.errorNotAllowMerged)
            : U.info(`<i class="fa fa-exclamation-triangle"></i>${t.warning}`, t.errorNotAllowMerged);
        return;
    }

    let I = (C - x + 1) / k,
        F = (_ - S + 1) / b,
        N = we.deepCopyFlowData(h.flowdata),
        D = N.length,
        E = N[0].length,
        P = k + x - D,
        z = b + S - E;

    (P > 0 || z > 0) && (N = il([].concat(N), P, z, true));

    let O = Ur(s),
        V = $.extend(!0, {}, h.luckysheetfile[K(s)].dataVerification),
        q = null,
        Y = 0,
        X = 0,
        ee = 0,
        te = 0;

    for (let se = 1; se <= I; se++) {
        for (let ie = 1; ie <= F; ie++) {
            Y = x + (se - 1) * k;
            X = S + (ie - 1) * b;
            te = x + se * k;
            ee = S + ie * b;

            for (let G = Y; G < te; G++) {
                let le = [].concat(N[G]);
                for (let pe = X; pe < ee; pe++) {
                    if (O[u + G - Y + "_" + (f + pe - X)]) {
                        let Fe = {
                            rangeType: "cell",
                            value: {
                                row_index: G,
                                col_index: pe,
                                l: O[u + G - Y + "_" + (f + pe - X)].l,
                                r: O[u + G - Y + "_" + (f + pe - X)].r,
                                t: O[u + G - Y + "_" + (f + pe - X)].t,
                                b: O[u + G - Y + "_" + (f + pe - X)].b
                            }
                        };
                        l.borderInfo == null && (l.borderInfo = []);
                        l.borderInfo.push(Fe);
                    } else if (O[G + "_" + pe]) {
                        let Fe = {
                            rangeType: "cell",
                            value: {
                                row_index: G,
                                col_index: pe,
                                l: null,
                                r: null,
                                t: null,
                                b: null
                            }
                        };
                        l.borderInfo == null && (l.borderInfo = []);
                        l.borderInfo.push(Fe);
                    }

                    V[u + G - Y + "_" + (f + pe - X)] && (q == null && (q = $.extend(true, {}, h.luckysheetfile[K(h.currentSheetIndex)].dataVerification)),
                        q[G + "_" + pe] = V[u + G - Y + "_" + (f + pe - X)]);

                    if (L(le[pe]) === "object" && "mc" in le[pe]) {
                        "rs" in le[pe].mc && delete l.merge[le[pe].mc.r + "_" + le[pe].mc.c];
                        delete le[pe].mc;
                    }

                    let oe = null;
                    if (v[G - Y] != null && v[G - Y][pe - X] != null) {
                        oe = $.extend(true, {}, v[G - Y][pe - X]);
                    }

                    // ðŸš€ Apply formula shifting logic unconditionally
                    if (oe != null && oe.f != null) {
                        let Fe = oe.f;
                        ue > 0 && (Fe = "=" + p.functionCopy(Fe, "down", ue));
                        ue < 0 && (Fe = "=" + p.functionCopy(Fe, "up", Math.abs(ue)));
                        he > 0 && (Fe = "=" + p.functionCopy(Fe, "right", he));
                        he < 0 && (Fe = "=" + p.functionCopy(Fe, "left", Math.abs(he)));

                        let ae = p.execfunction(Fe, G, pe, void 0, true);
                        oe.f = ae[2];
                        oe.v = ae[1];
                        oe.spl = ae[3]?.data;
                    }

                    le[pe] = $.extend(true, {}, oe);

                    if (oe != null && a && "mc" in oe) {
                        if (oe.mc.rs != null) {
                            oe.mc.r = G;
                            oe.mc.c = pe;
                            l.merge[oe.mc.r + "_" + oe.mc.c] = oe.mc;
                            J[oe.mc.r + "_" + oe.mc.c] = [oe.mc.r, oe.mc.c];
                        } else {
                            le[pe] = {
                                mc: {
                                    r: J[oe.mc.r + "_" + oe.mc.c][0],
                                    c: J[oe.mc.r + "_" + oe.mc.c][1]
                                }
                            };
                        }
                    }
                }
                N[G] = le;
            }
        }
    }

    let ce = null;
    if (e.copyRange.length === 1) {
        let se = h.luckysheetfile[K(s)],
            ie = h.luckysheetfile[K(h.currentSheetIndex)],
            ue = $.extend(true, [], se.luckysheet_conditionformat_save);

        if (ue != null && ue.length > 0) {
            ce = $.extend(true, [], ie.luckysheet_conditionformat_save);
            for (let he = 0; he < ue.length; he++) {
                let J = ue[he].cellrange,
                    G = [];
                for (let le = 1; le <= I; le++)
                    for (let pe = 1; pe <= F; pe++) {
                        Y = x + (le - 1) * k;
                        X = S + (pe - 1) * b;
                        te = x + le * k;
                        ee = S + pe * b;

                        for (let oe = 0; oe < J.length; oe++) {
                            let Fe = $e.CFSplitRange(
                                J[oe],
                                { row: [u, d], column: [f, m] },
                                { row: [Y, te - 1], column: [X, ee - 1] },
                                "operatePart"
                            );
                            Fe.length > 0 && (G = G.concat(Fe));
                        }
                    }
                G.length > 0 && (ue[he].cellrange = G, ce.push(ue[he]));
            }
        }
    }

    w.row = [x, C];
    w.column = [S, _];

    let se = {
        cfg: l,
        cdformat: ce,
        dataVerification: q
    };

    if (o || P > 0 || z > 0) {
        l = yl(N, x, C, l);
        se.RowlChange = true;
    }

    Ye(N, h.luckysheet_select_save, se);
    !se.RowlChange && tt();
},
