(function ($) {
    $.fn.staffingSummaryPopup = function (options) {
        const settings = $.extend({
            data: [],
            weekStartDay: 'sunday'
        }, options);

        $('#analyticsModal').remove();

        if ($('#weekAnalyticsPopupStyles').length === 0) {
            $('head').append(`
            <style id="weekAnalyticsPopupStyles">
                #analyticsModal .modal-content {
                    border-radius: 12px;
                    box-shadow: 0 8px 20px rgba(0,0,0,0.12);
                    font-family: 'Inter', sans-serif;
                    background: #fafafa;
                }
                #analyticsModal .modal-header {
                    border-bottom: 1px solid #e0e0e0;
                    background-color: #D7C4F0;
                    color: #2c2c2c;
                }
                #analyticsModal .modal-title { font-weight: 600; }
                #analyticsModal .btn-close { filter: invert(30%); }

                /* Table Wrapper */
                #analyticsModal .table-wrapper {
                    overflow-x: auto;
                    overflow-y: auto;
                    max-height: 500px;
                    position: relative;
                    border: 1px solid #dcdcdc;
                    background: #fff;
                    border-radius: 8px;
                    margin: 10px;
                }
                #analyticsModal table {
                    border-collapse: collapse;
                    width: max-content;
                }
                #analyticsModal th,
                #analyticsModal td {
                    padding: 8px;
                    text-align: center;
                    white-space: nowrap;
                    border-top: 1px solid #eaeaea;
                }

                /* Sticky Headers & Columns */
                #analyticsModal thead th {
                    position: sticky;
                    top: 0;
                    background: #f5f5f5;
                    z-index: 6;
                }
                #analyticsModal thead th.sticky-left,
                #analyticsModal tbody td.sticky-left {
                    position: sticky; left: 0; min-width: 140px;
                }
                #analyticsModal thead th.sticky-left-2,
                #analyticsModal tbody td.sticky-left-2 {
                    position: sticky; left: 140px; min-width: 150px;
                }
                #analyticsModal tbody td.sticky-left,
                #analyticsModal tbody td.sticky-left-2 {
                    background: #f0f0f0; z-index: 7;
                }
                #analyticsModal thead th.sticky-left,
                #analyticsModal thead th.sticky-left-2 {
                    background: #f5f5f5; z-index: 9;
                }

                /* RAG Coloring */
                #analyticsModal .rag-red { color: #e74c3c; font-weight: bold; }
                #analyticsModal .rag-amber { color: #f39c12; font-weight: bold; }
                #analyticsModal .rag-green { color: #27ae60; font-weight: bold; }

                /* Filter & Buttons */
                #analyticsModal .filter-container { margin: 10px; font-size: 0.875rem; }
                .dropdown-checkbox { max-height: 250px; overflow-y: auto; padding: 10px; }
                #analyticsModal .btn-sm { border-radius: 6px; font-size: 0.875rem; }
                #applyFilterBtn {
                    background: #9b59b6; border-color: #9b59b6;
                }
                #applyFilterBtn:hover {
                    background: #8e44ad; border-color: #8e44ad;
                }

                /* Summary Styling */
                #summaryContainer {
                    margin: 10px;
                    padding: 10px;
                    background: #f8f8f8;
                    border-radius: 8px;
                }
                #summaryContainer h6 { font-weight: 600; margin-bottom: 8px; }
            </style>
            `);
        }

        const modalHTML = `
        <div class="modal fade" id="analyticsModal" tabindex="-1" style="z-index:9999;zoom:85%">
          <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Staffing Summary</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body p-0">
                <div class="filter-container">
                    <div class="row g-2 align-items-center">
                        <div class="col-auto">
                            <label><b>LOB:</b></label><br/>
                            <div class="dropdown">
                                <button class="btn btn-sm dropdown-toggle" type="button" id="lobDropdownBtn" data-bs-toggle="dropdown" style="border: 1px solid;border-radius: 5px;">
                                    Select LOBs
                                </button>
                                <div class="dropdown-menu dropdown-checkbox" id="lobDropdown"></div>
                            </div>
                        </div>
                        <div class="col-auto">
                            <label><b>Metrics:</b></label><br/>
                            <div class="dropdown">
                                <button class="btn btn-sm dropdown-toggle" type="button" id="metricDropdownBtn" data-bs-toggle="dropdown" style="border: 1px solid;border-radius: 5px;">
                                    Select Metrics
                                </button>
                                <div class="dropdown-menu dropdown-checkbox" id="metricDropdown"></div>
                            </div>
                        </div>
                        <div class="col-auto">
                            <label><b>Week From:</b></label><br/>
                            <div class="dropdown">
                                <button class="btn btn-sm dropdown-toggle" type="button" id="weekFromDropdownBtn" data-bs-toggle="dropdown" style="border: 1px solid;border-radius: 5px;">
                                    Select From Week
                                </button>
                                <div class="dropdown-menu dropdown-checkbox" id="weekFromDropdown"></div>
                            </div>
                        </div>
                        <div class="col-auto">
                            <label><b>Week To:</b></label><br/>
                            <div class="dropdown">
                                <button class="btn btn-sm dropdown-toggle" type="button" id="weekToDropdownBtn" data-bs-toggle="dropdown" style="border: 1px solid;border-radius: 5px;">
                                    Select To Week
                                </button>
                                <div class="dropdown-menu dropdown-checkbox" id="weekToDropdown"></div>
                            </div>
                        </div>
                        <div class="col-auto">
                            <button id="applyFilterBtn" class="btn btn-primary btn-sm mt-3">Apply Filter</button>
                        </div>
                    </div>
                </div>
                <div id="summaryContainer"></div>
                <div class="table-wrapper" id="staffingContainer"></div>
              </div>
            </div>
          </div>
        </div>`;

        $('body').append(modalHTML);

        const $container = $('#staffingContainer');
        const parseWeek = w => {
            const [dd, mmm, yy] = w.split('-');
            const fullYear = yy.length === 2 ? (parseInt(yy, 10) < 50 ? '20' + yy : '19' + yy) : yy;
            return new Date(`${mmm} ${dd}, ${fullYear}`);
        };

        const uniqueWeeks = [...new Set(settings.data.map(d => d.week))]
            .sort((a, b) => parseWeek(a) - parseWeek(b));
        const uniqueLOBs = [...new Set(settings.data.map(d => d.sheetName))].sort();
        const metrics = ['Required HC', 'Available HC', 'Delta', 'Staffing %'];

        const groupedData = {};
        settings.data.forEach(d => {
            if (!groupedData[d.sheetName]) groupedData[d.sheetName] = {};
            if (!groupedData[d.sheetName][d.week]) groupedData[d.sheetName][d.week] = {};
            groupedData[d.sheetName][d.week][d.header] = Number(d.value);
        });

        for (const lob in groupedData) {
            for (const week in groupedData[lob]) {
                const req = groupedData[lob][week]?.['Required HC'] || 0;
                const avail = groupedData[lob][week]?.['Available HC'] || 0;
                groupedData[lob][week]['Delta'] = avail - req;
                groupedData[lob][week]['Staffing %'] = req === 0 ? 0 : Math.round((avail / req) * 100);
            }
        }

        const lobColors = ['#2c3e50','#34495e','#16a085','#8e44ad','#d35400','#7f8c8d','#27ae60','#c0392b'];

        function updateDropdownLabel(dropdownId, selectedItems, placeholder) {
            const btn = $(`#${dropdownId}Btn`);
            if (selectedItems.length === 0) {
                btn.text(placeholder);
            } else {
                btn.text(`${placeholder.split(' ')[0]} (${selectedItems.length}) selected`);
            }
        }
        function updateRadioDropdownLabel(dropdownBtnId, selectedValue, prefix) {
            $(`#${dropdownBtnId}`).text(`${prefix}: ${selectedValue}`);
        }

        function populateFilters() {
            const lobContainer = document.createDocumentFragment();
            $(lobContainer).append(`<label><input type="checkbox" class="lobSelectAll" checked> <b>Select All</b></label><br/>`);
            uniqueLOBs.forEach(lob => {
                $(lobContainer).append(`<label><input type="checkbox" class="lobCheckbox" value="${lob}" checked> ${lob}</label><br/>`);
            });
            $('#lobDropdown').append(lobContainer);

            const metricContainer = document.createDocumentFragment();
            $(metricContainer).append(`<label><input type="checkbox" class="metricSelectAll" checked> <b>Select All</b></label><br/>`);
            metrics.forEach(metric => {
                $(metricContainer).append(`<label><input type="checkbox" class="metricCheckbox" value="${metric}" checked> ${metric}</label><br/>`);
            });
            $('#metricDropdown').append(metricContainer);

            uniqueWeeks.forEach(week => {
                $('#weekFromDropdown').append(`<label><input type="radio" name="weekFrom" value="${week}" ${week === uniqueWeeks[0] ? 'checked' : ''}> ${week}</label><br/>`);
                $('#weekToDropdown').append(`<label><input type="radio" name="weekTo" value="${week}" ${week === uniqueWeeks[uniqueWeeks.length - 1] ? 'checked' : ''}> ${week}</label><br/>`);
            });

            updateDropdownLabel('lobDropdown', uniqueLOBs, 'Select LOBs');
            updateDropdownLabel('metricDropdown', metrics, 'Select Metrics');
            updateRadioDropdownLabel('weekFromDropdownBtn', uniqueWeeks[0], 'From');
            updateRadioDropdownLabel('weekToDropdownBtn', uniqueWeeks[uniqueWeeks.length - 1], 'To');
        }

        function buildTable(selectedLOBs, selectedMetrics, weekFrom, weekTo) {
            const fromIndex = uniqueWeeks.indexOf(weekFrom);
            const toIndex = uniqueWeeks.indexOf(weekTo);
            const weeksInRange = uniqueWeeks.slice(Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex) + 1);

            // === Calculate Overall Summary ===
            let totalRequired = 0, totalAvailable = 0, totalDelta = 0;
            let staffingPercentages = [];

            selectedLOBs.forEach(lob => {
                weeksInRange.forEach(week => {
                    const req = groupedData[lob][week]?.['Required HC'] || 0;
                    const avail = groupedData[lob][week]?.['Available HC'] || 0;
                    const delta = avail - req;
                    const staffingPercent = req === 0 ? 0 : (avail / req) * 100;

                    totalRequired += req;
                    totalAvailable += avail;
                    totalDelta += delta;
                    staffingPercentages.push(staffingPercent);
                });
            });

            const avgStaffing = staffingPercentages.length
                ? Math.round(staffingPercentages.reduce((a, b) => a + b, 0) / staffingPercentages.length)
                : 0;

            $('#summaryContainer').html(`
                <h6>Overall Summary</h6>
                <div class="row">
                    <div class="col-auto"><b>Total Required HC:</b> ${new Intl.NumberFormat().format(totalRequired)}</div>
                    <div class="col-auto"><b>Total Available HC:</b> ${new Intl.NumberFormat().format(totalAvailable)}</div>
                    <div class="col-auto"><b>Overall Delta:</b> ${totalDelta}</div>
                    <div class="col-auto"><b>Avg Staffing %:</b> ${avgStaffing}%</div>
                </div>
            `);

            // === Build Table ===
            const table = document.createElement('table');
            const thead = document.createElement('thead');
            const tbody = document.createElement('tbody');

            const headerRow = document.createElement('tr');
            headerRow.innerHTML = `<th class="sticky-left">LOB</th><th class="sticky-left-2">Metric</th>`;
            weeksInRange.forEach(week => {
                const th = document.createElement('th');
                th.textContent = week;
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);

            selectedLOBs.forEach((lob, lobIndex) => {
                const lobColor = lobColors[lobIndex % lobColors.length];
                selectedMetrics.forEach((metric, i) => {
                    const row = document.createElement('tr');

                    if (i === 0) {
                        const tdLOB = document.createElement('td');
                        tdLOB.className = 'sticky-left';
                        tdLOB.setAttribute('rowspan', selectedMetrics.length);
                        tdLOB.style.background = lobColor;
                        tdLOB.style.color = '#fff';
                        tdLOB.textContent = lob;
                        row.appendChild(tdLOB);
                    }

                    const tdMetric = document.createElement('td');
                    tdMetric.className = 'sticky-left-2';
                    tdMetric.textContent = metric;
                    row.appendChild(tdMetric);

                    weeksInRange.forEach(week => {
                        const td = document.createElement('td');
                        let val = (groupedData[lob][week] && groupedData[lob][week][metric]) || 0;
                        val = Math.round(val);

                        let cls = '';
                        if (metric === 'Delta' && val < 0) cls = 'rag-red';
                        if (metric === 'Staffing %') {
                            if (val < 80) cls = 'rag-red';
                            else if (val < 100) cls = 'rag-amber';
                            else cls = 'rag-green';
                            val = `${val}%`;
                        } else {
                            val = new Intl.NumberFormat().format(val);
                        }

                        td.className = cls;
                        td.title = val;
                        td.textContent = val;
                        row.appendChild(td);
                    });

                    tbody.appendChild(row);
                });
            });

            table.appendChild(thead);
            table.appendChild(tbody);
            $container.empty().append(table);
        }

        populateFilters();

        $('#analyticsModal').on('hidden.bs.modal', function () {
            $('#analyticsModal').remove();
            $('#weekAnalyticsPopupStyles').remove();
        });

        // Filter Event Handlers
        $('#lobDropdown').on('change', '.lobSelectAll', function () {
            const checked = $(this).is(':checked');
            $('.lobCheckbox').prop('checked', checked);
            updateDropdownLabel('lobDropdown', checked ? uniqueLOBs : [], 'Select LOBs');
        });
        $('#metricDropdown').on('change', '.metricSelectAll', function () {
            const checked = $(this).is(':checked');
            $('.metricCheckbox').prop('checked', checked);
            updateDropdownLabel('metricDropdown', checked ? metrics : [], 'Select Metrics');
        });
        $('#lobDropdown').on('change', '.lobCheckbox', function () {
            const selectedLOBs = $('.lobCheckbox:checked').map(function () { return this.value; }).get();
            updateDropdownLabel('lobDropdown', selectedLOBs, 'Select LOBs');
            $('.lobSelectAll').prop('checked', selectedLOBs.length === uniqueLOBs.length);
        });
        $('#metricDropdown').on('change', '.metricCheckbox', function () {
            const selectedMetrics = $('.metricCheckbox:checked').map(function () { return this.value; }).get();
            updateDropdownLabel('metricDropdown', selectedMetrics, 'Select Metrics');
            $('.metricSelectAll').prop('checked', selectedMetrics.length === metrics.length);
        });
        $('#weekFromDropdown').on('change', 'input[type=radio]', function () {
            updateRadioDropdownLabel('weekFromDropdownBtn', this.value, 'From');
        });
        $('#weekToDropdown').on('change', 'input[type=radio]', function () {
            updateRadioDropdownLabel('weekToDropdownBtn', this.value, 'To');
        });

        $('#applyFilterBtn').on('click', function () {
            const selectedLOBs = $('.lobCheckbox:checked').map(function () { return this.value; }).get();
            const selectedMetrics = $('.metricCheckbox:checked').map(function () { return this.value; }).get();
            const weekFrom = $('#weekFromDropdown input[type=radio]:checked').val();
            const weekTo = $('#weekToDropdown input[type=radio]:checked').val();
            buildTable(selectedLOBs, selectedMetrics, weekFrom, weekTo);
        });

        // Default Table + Summary
        buildTable(uniqueLOBs, metrics, uniqueWeeks[0], uniqueWeeks[uniqueWeeks.length - 1]);

        const modal = new bootstrap.Modal(document.getElementById('analyticsModal'));
        modal.show();

        return this;
    };
})(jQuery);
