function _shiftCrossSheetReference({ type, sheetIndex, rowIndex, rowCount = 1, colIndex, colCount = 1 }) {
    const allSheets = Ft() || [];
    let sheetChanged = false;

    for (let s = 0; s < allSheets.length; s++) {
        const sheet = allSheets[s];
        const data = sheet.data;

        for (let r = 0; r < data.length; r++) {
            for (let c = 0; c < data[r].length; c++) {
                const cell = data[r][c];
                if (!cell || !cell.f) continue;

                let origFormula = cell.f;
                let formula = origFormula;

                // ✅ Match cross-sheet references like: 'Sheet A'!D9
                formula = formula.replace(/'([^']+)'!([A-Z]+)(\d+)/g, function (match, sheetName, colLetter, rowNumber) {
                    const refSheet = allSheets.find(sh => sh.name === sheetName);
                    if (!refSheet) return match;

                    let refRow = parseInt(rowNumber, 10);
                    let refCol = _columnLetterToIndex(colLetter);

                    // --- Row handling ---
                    if (refSheet.index === sheetIndex) {
                        if (type === "insertRow" && refRow >= rowIndex + 1) {
                            refRow += rowCount;
                        } else if (type === "deleteRow") {
                            if (refRow > rowIndex && refRow <= rowIndex + rowCount) {
                                // deleted row — make reference invalid
                                return `'${sheetName}'!#REF!`;
                            } else if (refRow > rowIndex + rowCount) {
                                refRow -= rowCount;
                            }
                        }
                    }

                    // --- Column handling ---
                    if (refSheet.index === sheetIndex) {
                        if (type === "insertCol" && refCol >= colIndex) {
                            refCol += colCount;
                        } else if (type === "deleteCol") {
                            if (refCol >= colIndex && refCol < colIndex + colCount) {
                                // deleted col — make reference invalid
                                return `'${sheetName}'!#REF!`;
                            } else if (refCol >= colIndex + colCount) {
                                refCol -= colCount;
                            }
                        }
                    }

                    return `'${sheetName}'!${_columnIndexToLetter(refCol)}${refRow}`;
                });

                if (formula !== origFormula) {
                    // ✅ Update formula and clear old value cache
                    cell.f = formula;
                    delete cell.v;
                    delete cell.m;

                    // if the formula contains #REF!, set error value
                    if (formula.includes("#REF!")) {
                        cell.v = "#REF!";
                    }

                    sheetChanged = true;
                }
            }
        }
    }

    // ✅ After all updates, trigger LuckySheet's recalculation
    if (sheetChanged) {
        if (typeof p !== "undefined" && p?.execFunctionGroup) {
            p.execFunctionGroup();
        } else if (typeof formula !== "undefined" && formula?.execFunctionGroup) {
            formula.execFunctionGroup();
        }
        if (typeof luckysheetrefreshgrid === "function") {
            luckysheetrefreshgrid();
        }
    }

    // --- Utility: convert A→0, B→1, AA→26 ---
    function _columnLetterToIndex(col) {
        let index = 0;
        for (let i = 0; i < col.length; i++) {
            index = index * 26 + (col.charCodeAt(i) - 65 + 1);
        }
        return index - 1;
    }

    // --- Utility: convert 0→A, 25→Z, 26→AA ---
    function _columnIndexToLetter(index) {
        let col = "";
        index += 1;
        while (index > 0) {
            let rem = (index - 1) % 26;
            col = String.fromCharCode(65 + rem) + col;
            index = Math.floor((index - 1) / 26);
        }
        return col;
    }
}
