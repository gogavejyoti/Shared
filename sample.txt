function _shiftCrossSheetReference({ type, sheetIndex, rowIndex, rowCount = 1, colIndex, colCount = 1 }) {
    const allSheets = Ft() || [];

    for (let s = 0; s < allSheets.length; s++) {
        const sheet = allSheets[s];
        const data = sheet.data;

        for (let r = 0; r < data.length; r++) {
            for (let c = 0; c < data[r].length; c++) {
                const cell = data[r][c];
                if (!cell || !cell.f) continue;

                let formula = cell.f;
                let containsRef = false;

                formula = formula.replace(/'([^']+)'!([A-Z]+)(\d+)(?::([A-Z]+)(\d+))?/g, function (match, sheetName, colStart, rowStart, colEnd, rowEnd) {
                    const refSheet = allSheets.find(sh => sh.name === sheetName);
                    if (!refSheet) return match;

                    let startRow = parseInt(rowStart, 10);
                    let startCol = _columnLetterToIndex(colStart);

                    let endRow = rowEnd ? parseInt(rowEnd, 10) : startRow;
                    let endCol = colEnd ? _columnLetterToIndex(colEnd) : startCol;

                    let refDeleted = false;

                    // Row adjustments
                    if (type === "insertRow" && refSheet.index === sheetIndex && startRow >= rowIndex + 1) {
                        startRow += rowCount;
                        endRow += rowCount;
                    } else if (type === "deleteRow" && refSheet.index === sheetIndex) {
                        if ((startRow >= rowIndex + 1 && startRow <= rowIndex + rowCount) ||
                            (endRow >= rowIndex + 1 && endRow <= rowIndex + rowCount)) {
                            refDeleted = true;
                        }
                        if (startRow > rowIndex + rowCount) startRow -= rowCount;
                        if (endRow > rowIndex + rowCount) endRow -= rowCount;
                    }

                    // Column adjustments
                    if (type === "insertCol" && refSheet.index === sheetIndex && startCol >= colIndex) {
                        startCol += colCount;
                        endCol += colCount;
                    } else if (type === "deleteCol" && refSheet.index === sheetIndex) {
                        if ((startCol >= colIndex && startCol < colIndex + colCount) ||
                            (endCol >= colIndex && endCol < colIndex + colCount)) {
                            refDeleted = true;
                        }
                        if (startCol >= colIndex + colCount) startCol -= colCount;
                        if (endCol >= colIndex + colCount) endCol -= colCount;
                    }

                    if (refDeleted) containsRef = true;

                    return refDeleted
                        ? "#REF!"
                        : `'${sheetName}'!${_columnIndexToLetter(startCol)}${startRow}${colEnd ? ":" + _columnIndexToLetter(endCol) + endRow : ""}`;
                });

                if (containsRef) {
                    // Mark formula as error
                    cell.f = "#REF!";
                    cell.v = "#REF!";
                    cell.m = "#REF!";
                } else {
                    cell.f = formula;
                    // Clear old value so sheet recalculation will update it
                    cell.v = null;
                    cell.m = null;
                }
            }
        }
    }

    // Recalculate all sheets after updating formulas
    if (typeof LuckysheetRecalculateAll === "function") {
        LuckysheetRecalculateAll();
    }

    function _columnLetterToIndex(col) {
        let index = 0;
        for (let i = 0; i < col.length; i++) {
            index = index * 26 + (col.charCodeAt(i) - 65 + 1);
        }
        return index - 1;
    }

    function _columnIndexToLetter(index) {
        let col = "";
        index += 1;
        while (index > 0) {
            let rem = (index - 1) % 26;
            col = String.fromCharCode(65 + rem) + col;
            index = Math.floor((index - 1) / 26);
        }
        return col;
    }
}
